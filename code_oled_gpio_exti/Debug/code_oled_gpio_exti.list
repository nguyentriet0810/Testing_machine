
code_oled_gpio_exti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004198  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  080042a4  080042a4  000052a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b14  08004b14  00006020  2**0
                  CONTENTS
  4 .ARM          00000000  08004b14  08004b14  00006020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b14  08004b14  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004b1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000020  08004b3c  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08004b3c  000065c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baa9  00000000  00000000  00006049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca9  00000000  00000000  00011af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000137a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8b  00000000  00000000  00014508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c4d  00000000  00000000  00014f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3e9  00000000  00000000  0002cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9bf  00000000  00000000  0003bfc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c0  00000000  00000000  000c69cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000ca38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	0800428c 	.word	0x0800428c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	0800428c 	.word	0x0800428c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  // nut start_stop duoc nhan
  if (GPIO_Pin == START_STOP_Pin){
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d121      	bne.n	80006a8 <HAL_GPIO_EXTI_Callback+0x54>

	  if (tt == 1){
 8000664:	4b51      	ldr	r3, [pc, #324]	@ (80007ac <HAL_GPIO_EXTI_Callback+0x158>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10e      	bne.n	800068a <HAL_GPIO_EXTI_Callback+0x36>
		  tt = 0;
 800066c:	4b4f      	ldr	r3, [pc, #316]	@ (80007ac <HAL_GPIO_EXTI_Callback+0x158>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
		  SSD1306_GotoXY (56, 15);
 8000672:	210f      	movs	r1, #15
 8000674:	2038      	movs	r0, #56	@ 0x38
 8000676:	f000 ff11 	bl	800149c <SSD1306_GotoXY>
		  SSD1306_Puts ("STOP TEST ", &Font_7x10, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	494c      	ldr	r1, [pc, #304]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 800067e:	484d      	ldr	r0, [pc, #308]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0x160>)
 8000680:	f000 ffa0 	bl	80015c4 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000684:	f000 fe66 	bl	8001354 <SSD1306_UpdateScreen>
  	  SSD1306_GotoXY (56, 51);
  	  SSD1306_Puts ("LEFT   ", &Font_7x10, 1);
  	  SSD1306_UpdateScreen();
  }

}
 8000688:	e08b      	b.n	80007a2 <HAL_GPIO_EXTI_Callback+0x14e>
		  tt = 1;
 800068a:	4b48      	ldr	r3, [pc, #288]	@ (80007ac <HAL_GPIO_EXTI_Callback+0x158>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
		  SSD1306_GotoXY (56, 15);
 8000690:	210f      	movs	r1, #15
 8000692:	2038      	movs	r0, #56	@ 0x38
 8000694:	f000 ff02 	bl	800149c <SSD1306_GotoXY>
		  SSD1306_Puts ("START TEST", &Font_7x10, 1);
 8000698:	2201      	movs	r2, #1
 800069a:	4945      	ldr	r1, [pc, #276]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 800069c:	4846      	ldr	r0, [pc, #280]	@ (80007b8 <HAL_GPIO_EXTI_Callback+0x164>)
 800069e:	f000 ff91 	bl	80015c4 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80006a2:	f000 fe57 	bl	8001354 <SSD1306_UpdateScreen>
}
 80006a6:	e07c      	b.n	80007a2 <HAL_GPIO_EXTI_Callback+0x14e>
  else if (GPIO_Pin == EMERGENCY_STOP_Pin){
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d121      	bne.n	80006f2 <HAL_GPIO_EXTI_Callback+0x9e>
	  if (tt == 1){
 80006ae:	4b3f      	ldr	r3, [pc, #252]	@ (80007ac <HAL_GPIO_EXTI_Callback+0x158>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d10e      	bne.n	80006d4 <HAL_GPIO_EXTI_Callback+0x80>
		  tt = 0;
 80006b6:	4b3d      	ldr	r3, [pc, #244]	@ (80007ac <HAL_GPIO_EXTI_Callback+0x158>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
	  	  SSD1306_GotoXY (56, 15);
 80006bc:	210f      	movs	r1, #15
 80006be:	2038      	movs	r0, #56	@ 0x38
 80006c0:	f000 feec 	bl	800149c <SSD1306_GotoXY>
	  	  SSD1306_Puts ("STOP TEST ", &Font_7x10, 1);
 80006c4:	2201      	movs	r2, #1
 80006c6:	493a      	ldr	r1, [pc, #232]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80006c8:	483a      	ldr	r0, [pc, #232]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0x160>)
 80006ca:	f000 ff7b 	bl	80015c4 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen();
 80006ce:	f000 fe41 	bl	8001354 <SSD1306_UpdateScreen>
}
 80006d2:	e066      	b.n	80007a2 <HAL_GPIO_EXTI_Callback+0x14e>
	  	  tt = 1;
 80006d4:	4b35      	ldr	r3, [pc, #212]	@ (80007ac <HAL_GPIO_EXTI_Callback+0x158>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
	  	  SSD1306_GotoXY (56, 15);
 80006da:	210f      	movs	r1, #15
 80006dc:	2038      	movs	r0, #56	@ 0x38
 80006de:	f000 fedd 	bl	800149c <SSD1306_GotoXY>
	  	  SSD1306_Puts ("START TEST", &Font_7x10, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	4932      	ldr	r1, [pc, #200]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80006e6:	4834      	ldr	r0, [pc, #208]	@ (80007b8 <HAL_GPIO_EXTI_Callback+0x164>)
 80006e8:	f000 ff6c 	bl	80015c4 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen();
 80006ec:	f000 fe32 	bl	8001354 <SSD1306_UpdateScreen>
}
 80006f0:	e057      	b.n	80007a2 <HAL_GPIO_EXTI_Callback+0x14e>
  else if (GPIO_Pin == SPEED_MODE_Pin){
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d121      	bne.n	800073c <HAL_GPIO_EXTI_Callback+0xe8>
	  if (speed == 1){
 80006f8:	4b30      	ldr	r3, [pc, #192]	@ (80007bc <HAL_GPIO_EXTI_Callback+0x168>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d10e      	bne.n	800071e <HAL_GPIO_EXTI_Callback+0xca>
		  speed = 0;
 8000700:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <HAL_GPIO_EXTI_Callback+0x168>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
		  SSD1306_GotoXY (56, 39);
 8000706:	2127      	movs	r1, #39	@ 0x27
 8000708:	2038      	movs	r0, #56	@ 0x38
 800070a:	f000 fec7 	bl	800149c <SSD1306_GotoXY>
		  SSD1306_Puts ("SLOW      ", &Font_7x10, 1);
 800070e:	2201      	movs	r2, #1
 8000710:	4927      	ldr	r1, [pc, #156]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000712:	482b      	ldr	r0, [pc, #172]	@ (80007c0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000714:	f000 ff56 	bl	80015c4 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000718:	f000 fe1c 	bl	8001354 <SSD1306_UpdateScreen>
}
 800071c:	e041      	b.n	80007a2 <HAL_GPIO_EXTI_Callback+0x14e>
	  	  speed = 1;
 800071e:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <HAL_GPIO_EXTI_Callback+0x168>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
	  	  SSD1306_GotoXY (56, 39);
 8000724:	2127      	movs	r1, #39	@ 0x27
 8000726:	2038      	movs	r0, #56	@ 0x38
 8000728:	f000 feb8 	bl	800149c <SSD1306_GotoXY>
	  	  SSD1306_Puts ("FLASH     ", &Font_7x10, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	4920      	ldr	r1, [pc, #128]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000730:	4824      	ldr	r0, [pc, #144]	@ (80007c4 <HAL_GPIO_EXTI_Callback+0x170>)
 8000732:	f000 ff47 	bl	80015c4 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen();
 8000736:	f000 fe0d 	bl	8001354 <SSD1306_UpdateScreen>
}
 800073a:	e032      	b.n	80007a2 <HAL_GPIO_EXTI_Callback+0x14e>
  else if (GPIO_Pin == MOVEDW_Pin)
 800073c:	88fb      	ldrh	r3, [r7, #6]
 800073e:	2b10      	cmp	r3, #16
 8000740:	d116      	bne.n	8000770 <HAL_GPIO_EXTI_Callback+0x11c>
	  dir = 0;
 8000742:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, dir);
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0x174>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000752:	481e      	ldr	r0, [pc, #120]	@ (80007cc <HAL_GPIO_EXTI_Callback+0x178>)
 8000754:	f001 fca9 	bl	80020aa <HAL_GPIO_WritePin>
	  SSD1306_GotoXY (56, 51);
 8000758:	2133      	movs	r1, #51	@ 0x33
 800075a:	2038      	movs	r0, #56	@ 0x38
 800075c:	f000 fe9e 	bl	800149c <SSD1306_GotoXY>
	  SSD1306_Puts ("RIGHT  ", &Font_7x10, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	4913      	ldr	r1, [pc, #76]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000764:	481a      	ldr	r0, [pc, #104]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000766:	f000 ff2d 	bl	80015c4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 800076a:	f000 fdf3 	bl	8001354 <SSD1306_UpdateScreen>
}
 800076e:	e018      	b.n	80007a2 <HAL_GPIO_EXTI_Callback+0x14e>
  else if (GPIO_Pin == MOVEUP_Pin)
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	2b20      	cmp	r3, #32
 8000774:	d115      	bne.n	80007a2 <HAL_GPIO_EXTI_Callback+0x14e>
  	  dir = 1;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
  	  HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, dir);
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0x174>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000786:	4811      	ldr	r0, [pc, #68]	@ (80007cc <HAL_GPIO_EXTI_Callback+0x178>)
 8000788:	f001 fc8f 	bl	80020aa <HAL_GPIO_WritePin>
  	  SSD1306_GotoXY (56, 51);
 800078c:	2133      	movs	r1, #51	@ 0x33
 800078e:	2038      	movs	r0, #56	@ 0x38
 8000790:	f000 fe84 	bl	800149c <SSD1306_GotoXY>
  	  SSD1306_Puts ("LEFT   ", &Font_7x10, 1);
 8000794:	2201      	movs	r2, #1
 8000796:	4906      	ldr	r1, [pc, #24]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000798:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <HAL_GPIO_EXTI_Callback+0x180>)
 800079a:	f000 ff13 	bl	80015c4 <SSD1306_Puts>
  	  SSD1306_UpdateScreen();
 800079e:	f000 fdd9 	bl	8001354 <SSD1306_UpdateScreen>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200001b0 	.word	0x200001b0
 80007b0:	20000000 	.word	0x20000000
 80007b4:	080042a4 	.word	0x080042a4
 80007b8:	080042b0 	.word	0x080042b0
 80007bc:	200001b2 	.word	0x200001b2
 80007c0:	080042bc 	.word	0x080042bc
 80007c4:	080042c8 	.word	0x080042c8
 80007c8:	200001b1 	.word	0x200001b1
 80007cc:	40010800 	.word	0x40010800
 80007d0:	080042d4 	.word	0x080042d4
 80007d4:	080042dc 	.word	0x080042dc

080007d8 <microDelay>:
float knownOriginal = 46000000;  // in milli gram
float knownHX711 = 244104; // 244104
int weight;

void microDelay(uint16_t delay)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <microDelay+0x2c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 80007ea:	bf00      	nop
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <microDelay+0x2c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d3f9      	bcc.n	80007ec <microDelay+0x14>
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	200000d8 	.word	0x200000d8

08000808 <getHX711>:

int32_t getHX711(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 8000812:	f001 f973 	bl	8001afc <HAL_GetTick>
 8000816:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000818:	e008      	b.n	800082c <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 800081a:	f001 f96f 	bl	8001afc <HAL_GetTick>
 800081e:	4602      	mov	r2, r0
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	2bc8      	cmp	r3, #200	@ 0xc8
 8000826:	d901      	bls.n	800082c <getHX711+0x24>
      return 0;
 8000828:	2300      	movs	r3, #0
 800082a:	e04b      	b.n	80008c4 <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 800082c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000830:	4826      	ldr	r0, [pc, #152]	@ (80008cc <getHX711+0xc4>)
 8000832:	f001 fc23 	bl	800207c <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d0ee      	beq.n	800081a <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 800083c:	2300      	movs	r3, #0
 800083e:	72fb      	strb	r3, [r7, #11]
 8000840:	e025      	b.n	800088e <getHX711+0x86>
  {
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000848:	4820      	ldr	r0, [pc, #128]	@ (80008cc <getHX711+0xc4>)
 800084a:	f001 fc2e 	bl	80020aa <HAL_GPIO_WritePin>
    microDelay(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ffc2 	bl	80007d8 <microDelay>
    data = data << 1;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000860:	481a      	ldr	r0, [pc, #104]	@ (80008cc <getHX711+0xc4>)
 8000862:	f001 fc22 	bl	80020aa <HAL_GPIO_WritePin>
    microDelay(1);
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff ffb6 	bl	80007d8 <microDelay>
    if(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 800086c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000870:	4816      	ldr	r0, [pc, #88]	@ (80008cc <getHX711+0xc4>)
 8000872:	f001 fc03 	bl	800207c <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	d102      	bne.n	8000882 <getHX711+0x7a>
      data ++;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	3301      	adds	r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 8000882:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	3301      	adds	r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	72fb      	strb	r3, [r7, #11]
 800088e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000892:	2b17      	cmp	r3, #23
 8000894:	ddd5      	ble.n	8000842 <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 800089c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a4:	4809      	ldr	r0, [pc, #36]	@ (80008cc <getHX711+0xc4>)
 80008a6:	f001 fc00 	bl	80020aa <HAL_GPIO_WritePin>
  microDelay(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff ff94 	bl	80007d8 <microDelay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b6:	4805      	ldr	r0, [pc, #20]	@ (80008cc <getHX711+0xc4>)
 80008b8:	f001 fbf7 	bl	80020aa <HAL_GPIO_WritePin>
  microDelay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff ff8b 	bl	80007d8 <microDelay>
  return data;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40010c00 	.word	0x40010c00

080008d0 <weigh>:

int weigh()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
  int32_t  total = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  int32_t  samples = 200;
 80008da:	23c8      	movs	r3, #200	@ 0xc8
 80008dc:	60fb      	str	r3, [r7, #12]
  int milligram;
  float coefficient;
  for(uint16_t i = 0 ; i < samples ; i++)
 80008de:	2300      	movs	r3, #0
 80008e0:	827b      	strh	r3, [r7, #18]
 80008e2:	e008      	b.n	80008f6 <weigh+0x26>
  {
      total += getHX711();
 80008e4:	f7ff ff90 	bl	8000808 <getHX711>
 80008e8:	4602      	mov	r2, r0
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	4413      	add	r3, r2
 80008ee:	617b      	str	r3, [r7, #20]
  for(uint16_t i = 0 ; i < samples ; i++)
 80008f0:	8a7b      	ldrh	r3, [r7, #18]
 80008f2:	3301      	adds	r3, #1
 80008f4:	827b      	strh	r3, [r7, #18]
 80008f6:	8a7b      	ldrh	r3, [r7, #18]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	dcf2      	bgt.n	80008e4 <weigh+0x14>
  }
  int32_t average = (int32_t)(total / samples);
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	fb92 f3f3 	sdiv	r3, r2, r3
 8000906:	60bb      	str	r3, [r7, #8]
  coefficient = knownOriginal / knownHX711;
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <weigh+0x7c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a10      	ldr	r2, [pc, #64]	@ (8000950 <weigh+0x80>)
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fddc 	bl	80004d0 <__aeabi_fdiv>
 8000918:	4603      	mov	r3, r0
 800091a:	607b      	str	r3, [r7, #4]
  milligram = (int)(average-tare)*coefficient;
 800091c:	68ba      	ldr	r2, [r7, #8]
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <weigh+0x84>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fccb 	bl	80002c0 <__aeabi_i2f>
 800092a:	4603      	mov	r3, r0
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fd1a 	bl	8000368 <__aeabi_fmul>
 8000934:	4603      	mov	r3, r0
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fe66 	bl	8000608 <__aeabi_f2iz>
 800093c:	4603      	mov	r3, r0
 800093e:	603b      	str	r3, [r7, #0]
  return milligram;
 8000940:	683b      	ldr	r3, [r7, #0]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000000c 	.word	0x2000000c
 8000950:	20000010 	.word	0x20000010
 8000954:	20000008 	.word	0x20000008

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f001 f875 	bl	8001a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f8e9 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 fae5 	bl	8000f34 <MX_GPIO_Init>
  MX_I2C1_Init();
 800096a:	f000 f92b 	bl	8000bc4 <MX_I2C1_Init>
  MX_TIM2_Init();
 800096e:	f000 f9f9 	bl	8000d64 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000972:	f000 f955 	bl	8000c20 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000976:	f000 fa41 	bl	8000dfc <MX_TIM3_Init>
  MX_TIM4_Init();
 800097a:	f000 fa8d 	bl	8000e98 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800097e:	2108      	movs	r1, #8
 8000980:	485d      	ldr	r0, [pc, #372]	@ (8000af8 <main+0x1a0>)
 8000982:	f002 fe7b 	bl	800367c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim2);
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x1a4>)
 8000988:	f002 fdd6 	bl	8003538 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000992:	485b      	ldr	r0, [pc, #364]	@ (8000b00 <main+0x1a8>)
 8000994:	f001 fb89 	bl	80020aa <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f001 f8b9 	bl	8001b10 <HAL_Delay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009a4:	4856      	ldr	r0, [pc, #344]	@ (8000b00 <main+0x1a8>)
 80009a6:	f001 fb80 	bl	80020aa <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80009aa:	200a      	movs	r0, #10
 80009ac:	f001 f8b0 	bl	8001b10 <HAL_Delay>

  SSD1306_Init();
 80009b0:	f000 fc0c 	bl	80011cc <SSD1306_Init>
  char snum[5];

  //chay doan chuong trinh ban dau
  SSD1306_GotoXY (0,0);
 80009b4:	2100      	movs	r1, #0
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 fd70 	bl	800149c <SSD1306_GotoXY>
  SSD1306_Puts ("By TRIET", &Font_7x10, 1);
 80009bc:	2201      	movs	r2, #1
 80009be:	4951      	ldr	r1, [pc, #324]	@ (8000b04 <main+0x1ac>)
 80009c0:	4851      	ldr	r0, [pc, #324]	@ (8000b08 <main+0x1b0>)
 80009c2:	f000 fdff 	bl	80015c4 <SSD1306_Puts>
  SSD1306_GotoXY (0, 20);
 80009c6:	2114      	movs	r1, #20
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fd67 	bl	800149c <SSD1306_GotoXY>
  SSD1306_Puts ("STARTING", &Font_7x10, 1);
 80009ce:	2201      	movs	r2, #1
 80009d0:	494c      	ldr	r1, [pc, #304]	@ (8000b04 <main+0x1ac>)
 80009d2:	484e      	ldr	r0, [pc, #312]	@ (8000b0c <main+0x1b4>)
 80009d4:	f000 fdf6 	bl	80015c4 <SSD1306_Puts>
  SSD1306_GotoXY (0, 40);
 80009d8:	2128      	movs	r1, #40	@ 0x28
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 fd5e 	bl	800149c <SSD1306_GotoXY>
  SSD1306_Puts ("..........", &Font_7x10, 1);
 80009e0:	2201      	movs	r2, #1
 80009e2:	4948      	ldr	r1, [pc, #288]	@ (8000b04 <main+0x1ac>)
 80009e4:	484a      	ldr	r0, [pc, #296]	@ (8000b10 <main+0x1b8>)
 80009e6:	f000 fded 	bl	80015c4 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80009ea:	f000 fcb3 	bl	8001354 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 80009ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f2:	f001 f88d 	bl	8001b10 <HAL_Delay>

  SSD1306_ScrollRight(0,7);
 80009f6:	2107      	movs	r1, #7
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 fb71 	bl	80010e0 <SSD1306_ScrollRight>
  HAL_Delay(3000);
 80009fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a02:	f001 f885 	bl	8001b10 <HAL_Delay>
  SSD1306_ScrollLeft(0,7);
 8000a06:	2107      	movs	r1, #7
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 fb9f 	bl	800114c <SSD1306_ScrollLeft>
  HAL_Delay(3000);
 8000a0e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a12:	f001 f87d 	bl	8001b10 <HAL_Delay>
  SSD1306_Stopscroll();
 8000a16:	f000 fbcf 	bl	80011b8 <SSD1306_Stopscroll>
  SSD1306_Clear();
 8000a1a:	f000 fdf8 	bl	800160e <SSD1306_Clear>

  SSD1306_GotoXY (11,0);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	200b      	movs	r0, #11
 8000a22:	f000 fd3b 	bl	800149c <SSD1306_GotoXY>
  SSD1306_Puts ("TESTING MACHINE", &Font_7x10, 1);
 8000a26:	2201      	movs	r2, #1
 8000a28:	4936      	ldr	r1, [pc, #216]	@ (8000b04 <main+0x1ac>)
 8000a2a:	483a      	ldr	r0, [pc, #232]	@ (8000b14 <main+0x1bc>)
 8000a2c:	f000 fdca 	bl	80015c4 <SSD1306_Puts>
  SSD1306_GotoXY (0, 15);
 8000a30:	210f      	movs	r1, #15
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 fd32 	bl	800149c <SSD1306_GotoXY>
  SSD1306_Puts ("STATUS:        ", &Font_7x10, 1);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4932      	ldr	r1, [pc, #200]	@ (8000b04 <main+0x1ac>)
 8000a3c:	4836      	ldr	r0, [pc, #216]	@ (8000b18 <main+0x1c0>)
 8000a3e:	f000 fdc1 	bl	80015c4 <SSD1306_Puts>
  SSD1306_GotoXY (0, 27);
 8000a42:	211b      	movs	r1, #27
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 fd29 	bl	800149c <SSD1306_GotoXY>
  SSD1306_Puts ("FORCE :        ", &Font_7x10, 1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	492d      	ldr	r1, [pc, #180]	@ (8000b04 <main+0x1ac>)
 8000a4e:	4833      	ldr	r0, [pc, #204]	@ (8000b1c <main+0x1c4>)
 8000a50:	f000 fdb8 	bl	80015c4 <SSD1306_Puts>
  SSD1306_GotoXY (0, 39);
 8000a54:	2127      	movs	r1, #39	@ 0x27
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 fd20 	bl	800149c <SSD1306_GotoXY>
  SSD1306_Puts ("SPEED :        ", &Font_7x10, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4929      	ldr	r1, [pc, #164]	@ (8000b04 <main+0x1ac>)
 8000a60:	482f      	ldr	r0, [pc, #188]	@ (8000b20 <main+0x1c8>)
 8000a62:	f000 fdaf 	bl	80015c4 <SSD1306_Puts>
  SSD1306_GotoXY (0, 51);
 8000a66:	2133      	movs	r1, #51	@ 0x33
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f000 fd17 	bl	800149c <SSD1306_GotoXY>
  SSD1306_Puts ("MODE  :        ", &Font_7x10, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4924      	ldr	r1, [pc, #144]	@ (8000b04 <main+0x1ac>)
 8000a72:	482c      	ldr	r0, [pc, #176]	@ (8000b24 <main+0x1cc>)
 8000a74:	f000 fda6 	bl	80015c4 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000a78:	f000 fc6c 	bl	8001354 <SSD1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (tt == 0){
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <main+0x1d0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d103      	bne.n	8000a8c <main+0x134>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <main+0x1a0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	  }
	  if (tt == 1){
 8000a8c:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <main+0x1d0>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d1f3      	bne.n	8000a7c <main+0x124>

		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 500);
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <main+0x1a0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
		  HAL_Delay(2740);
 8000a9e:	f640 20b4 	movw	r0, #2740	@ 0xab4
 8000aa2:	f001 f835 	bl	8001b10 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <main+0x1a0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	63da      	str	r2, [r3, #60]	@ 0x3c

		  weight = weigh();
 8000aae:	f7ff ff0f 	bl	80008d0 <weigh>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b2c <main+0x1d4>)
 8000ab6:	6013      	str	r3, [r2, #0]
		  force = weight/1000000;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <main+0x1d4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <main+0x1d8>)
 8000abe:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac2:	1492      	asrs	r2, r2, #18
 8000ac4:	17db      	asrs	r3, r3, #31
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <main+0x1dc>)
 8000acc:	601a      	str	r2, [r3, #0]

		  itoa(force, snum, 10);
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <main+0x1dc>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	220a      	movs	r2, #10
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f003 fb66 	bl	80041aa <itoa>
		  SSD1306_GotoXY (56, 27);
 8000ade:	211b      	movs	r1, #27
 8000ae0:	2038      	movs	r0, #56	@ 0x38
 8000ae2:	f000 fcdb 	bl	800149c <SSD1306_GotoXY>
		  SSD1306_Puts (snum, &Font_7x10, 1);
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4906      	ldr	r1, [pc, #24]	@ (8000b04 <main+0x1ac>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fd69 	bl	80015c4 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000af2:	f000 fc2f 	bl	8001354 <SSD1306_UpdateScreen>
	  if (tt == 0){
 8000af6:	e7c1      	b.n	8000a7c <main+0x124>
 8000af8:	20000090 	.word	0x20000090
 8000afc:	200000d8 	.word	0x200000d8
 8000b00:	40010c00 	.word	0x40010c00
 8000b04:	20000000 	.word	0x20000000
 8000b08:	080042e4 	.word	0x080042e4
 8000b0c:	080042f0 	.word	0x080042f0
 8000b10:	080042fc 	.word	0x080042fc
 8000b14:	08004308 	.word	0x08004308
 8000b18:	08004318 	.word	0x08004318
 8000b1c:	08004328 	.word	0x08004328
 8000b20:	08004338 	.word	0x08004338
 8000b24:	08004348 	.word	0x08004348
 8000b28:	200001b0 	.word	0x200001b0
 8000b2c:	200001b8 	.word	0x200001b8
 8000b30:	431bde83 	.word	0x431bde83
 8000b34:	200001b4 	.word	0x200001b4

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b090      	sub	sp, #64	@ 0x40
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	2228      	movs	r2, #40	@ 0x28
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 fb74 	bl	8004234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b76:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0318 	add.w	r3, r7, #24
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 f88d 	bl	8002ca0 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b8c:	f000 faa2 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fafa 	bl	80031a4 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bb6:	f000 fa8d 	bl	80010d4 <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3740      	adds	r7, #64	@ 0x40
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bca:	4a13      	ldr	r2, [pc, #76]	@ (8000c18 <MX_I2C1_Init+0x54>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bd0:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <MX_I2C1_Init+0x58>)
 8000bd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000be2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000be6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000c02:	f001 fa83 	bl	800210c <HAL_I2C_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c0c:	f000 fa62 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000003c 	.word	0x2000003c
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	00061a80 	.word	0x00061a80

08000c20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b096      	sub	sp, #88	@ 0x58
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2220      	movs	r2, #32
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 faeb 	bl	8004234 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000c60:	4a3f      	ldr	r2, [pc, #252]	@ (8000d60 <MX_TIM1_Init+0x140>)
 8000c62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000c64:	4b3d      	ldr	r3, [pc, #244]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000c66:	2247      	movs	r2, #71	@ 0x47
 8000c68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000c70:	4b3a      	ldr	r3, [pc, #232]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000c72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b38      	ldr	r3, [pc, #224]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c7e:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c84:	4b35      	ldr	r3, [pc, #212]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000c86:	2280      	movs	r2, #128	@ 0x80
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c8a:	4834      	ldr	r0, [pc, #208]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000c8c:	f002 fc04 	bl	8003498 <HAL_TIM_Base_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c96:	f000 fa1d 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ca0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	482d      	ldr	r0, [pc, #180]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000ca8:	f002 fe4c 	bl	8003944 <HAL_TIM_ConfigClockSource>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cb2:	f000 fa0f 	bl	80010d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cb6:	4829      	ldr	r0, [pc, #164]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000cb8:	f002 fc88 	bl	80035cc <HAL_TIM_PWM_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cc2:	f000 fa07 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4821      	ldr	r0, [pc, #132]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000cd6:	f003 f9a1 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ce0:	f000 f9f8 	bl	80010d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce4:	2360      	movs	r3, #96	@ 0x60
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 499;
 8000ce8:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d06:	2208      	movs	r2, #8
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4814      	ldr	r0, [pc, #80]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000d0c:	f002 fd58 	bl	80037c0 <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000d16:	f000 f9dd 	bl	80010d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4807      	ldr	r0, [pc, #28]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000d3e:	f003 f9cb 	bl	80040d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000d48:	f000 f9c4 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d4c:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <MX_TIM1_Init+0x13c>)
 8000d4e:	f000 fdc7 	bl	80018e0 <HAL_TIM_MspPostInit>

}
 8000d52:	bf00      	nop
 8000d54:	3758      	adds	r7, #88	@ 0x58
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000090 	.word	0x20000090
 8000d60:	40012c00 	.word	0x40012c00

08000d64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <MX_TIM2_Init+0x94>)
 8000d82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <MX_TIM2_Init+0x94>)
 8000d8a:	2247      	movs	r2, #71	@ 0x47
 8000d8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_TIM2_Init+0x94>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d94:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <MX_TIM2_Init+0x94>)
 8000d96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <MX_TIM2_Init+0x94>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <MX_TIM2_Init+0x94>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da8:	4813      	ldr	r0, [pc, #76]	@ (8000df8 <MX_TIM2_Init+0x94>)
 8000daa:	f002 fb75 	bl	8003498 <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000db4:	f000 f98e 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <MX_TIM2_Init+0x94>)
 8000dc6:	f002 fdbd 	bl	8003944 <HAL_TIM_ConfigClockSource>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dd0:	f000 f980 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <MX_TIM2_Init+0x94>)
 8000de2:	f003 f91b 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dec:	f000 f972 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200000d8 	.word	0x200000d8

08000dfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	463b      	mov	r3, r7
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e18:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000e94 <MX_TIM3_Init+0x98>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e20:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e3c:	2280      	movs	r2, #128	@ 0x80
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e40:	4813      	ldr	r0, [pc, #76]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e42:	f002 fb29 	bl	8003498 <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e4c:	f000 f942 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e5e:	f002 fd71 	bl	8003944 <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e68:	f000 f934 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e7a:	f003 f8cf 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e84:	f000 f926 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000120 	.word	0x20000120
 8000e94:	40000400 	.word	0x40000400

08000e98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <MX_TIM4_Init+0x94>)
 8000eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8000f30 <MX_TIM4_Init+0x98>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <MX_TIM4_Init+0x94>)
 8000ebc:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8000ec0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_TIM4_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <MX_TIM4_Init+0x94>)
 8000eca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ece:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <MX_TIM4_Init+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <MX_TIM4_Init+0x94>)
 8000ed8:	2280      	movs	r2, #128	@ 0x80
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000edc:	4813      	ldr	r0, [pc, #76]	@ (8000f2c <MX_TIM4_Init+0x94>)
 8000ede:	f002 fadb 	bl	8003498 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000ee8:	f000 f8f4 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <MX_TIM4_Init+0x94>)
 8000efa:	f002 fd23 	bl	8003944 <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 f8e6 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_TIM4_Init+0x94>)
 8000f16:	f003 f881 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000f20:	f000 f8d8 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000168 	.word	0x20000168
 8000f30:	40000800 	.word	0x40000800

08000f34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f48:	4b5d      	ldr	r3, [pc, #372]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b5a      	ldr	r3, [pc, #360]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f60:	4b57      	ldr	r3, [pc, #348]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a56      	ldr	r2, [pc, #344]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f66:	f043 0320 	orr.w	r3, r3, #32
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b54      	ldr	r3, [pc, #336]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0320 	and.w	r3, r3, #32
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b51      	ldr	r3, [pc, #324]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a50      	ldr	r2, [pc, #320]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b4e      	ldr	r3, [pc, #312]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b4b      	ldr	r3, [pc, #300]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a4a      	ldr	r2, [pc, #296]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f96:	f043 0308 	orr.w	r3, r3, #8
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b48      	ldr	r3, [pc, #288]	@ (80010c0 <MX_GPIO_Init+0x18c>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fae:	4845      	ldr	r0, [pc, #276]	@ (80010c4 <MX_GPIO_Init+0x190>)
 8000fb0:	f001 f87b 	bl	80020aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fba:	4843      	ldr	r0, [pc, #268]	@ (80010c8 <MX_GPIO_Init+0x194>)
 8000fbc:	f001 f875 	bl	80020aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fc6:	4841      	ldr	r0, [pc, #260]	@ (80010cc <MX_GPIO_Init+0x198>)
 8000fc8:	f001 f86f 	bl	80020aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4837      	ldr	r0, [pc, #220]	@ (80010c4 <MX_GPIO_Init+0x190>)
 8000fe6:	f000 fec5 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPEED_MODE_Pin EMERGENCY_STOP_Pin START_STOP_Pin TARE_Pin
                           MOVEDW_Pin MOVEUP_Pin */
  GPIO_InitStruct.Pin = SPEED_MODE_Pin|EMERGENCY_STOP_Pin|START_STOP_Pin|TARE_Pin
 8000fea:	233f      	movs	r3, #63	@ 0x3f
 8000fec:	613b      	str	r3, [r7, #16]
                          |MOVEDW_Pin|MOVEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fee:	4b38      	ldr	r3, [pc, #224]	@ (80010d0 <MX_GPIO_Init+0x19c>)
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4832      	ldr	r0, [pc, #200]	@ (80010c8 <MX_GPIO_Init+0x194>)
 8000ffe:	f000 feb9 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001002:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100c:	2301      	movs	r3, #1
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2302      	movs	r3, #2
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	482b      	ldr	r0, [pc, #172]	@ (80010c8 <MX_GPIO_Init+0x194>)
 800101c:	f000 feaa 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001020:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4619      	mov	r1, r3
 8001034:	4825      	ldr	r0, [pc, #148]	@ (80010cc <MX_GPIO_Init+0x198>)
 8001036:	f000 fe9d 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800103a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2302      	movs	r3, #2
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	481e      	ldr	r0, [pc, #120]	@ (80010cc <MX_GPIO_Init+0x198>)
 8001054:	f000 fe8e 	bl	8001d74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2104      	movs	r1, #4
 800105c:	2006      	movs	r0, #6
 800105e:	f000 fe52 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001062:	2006      	movs	r0, #6
 8001064:	f000 fe6b 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2007      	movs	r0, #7
 800106e:	f000 fe4a 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001072:	2007      	movs	r0, #7
 8001074:	f000 fe63 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2008      	movs	r0, #8
 800107e:	f000 fe42 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001082:	2008      	movs	r0, #8
 8001084:	f000 fe5b 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2105      	movs	r1, #5
 800108c:	2009      	movs	r0, #9
 800108e:	f000 fe3a 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001092:	2009      	movs	r0, #9
 8001094:	f000 fe53 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2105      	movs	r1, #5
 800109c:	200a      	movs	r0, #10
 800109e:	f000 fe32 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010a2:	200a      	movs	r0, #10
 80010a4:	f000 fe4b 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2105      	movs	r1, #5
 80010ac:	2017      	movs	r0, #23
 80010ae:	f000 fe2a 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010b2:	2017      	movs	r0, #23
 80010b4:	f000 fe43 	bl	8001d3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40011000 	.word	0x40011000
 80010c8:	40010800 	.word	0x40010800
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	10210000 	.word	0x10210000

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <Error_Handler+0x8>

080010e0 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80010f0:	2226      	movs	r2, #38	@ 0x26
 80010f2:	2100      	movs	r1, #0
 80010f4:	2078      	movs	r0, #120	@ 0x78
 80010f6:	f000 fb0d 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2078      	movs	r0, #120	@ 0x78
 8001100:	f000 fb08 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	461a      	mov	r2, r3
 8001108:	2100      	movs	r1, #0
 800110a:	2078      	movs	r0, #120	@ 0x78
 800110c:	f000 fb02 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	2078      	movs	r0, #120	@ 0x78
 8001116:	f000 fafd 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	461a      	mov	r2, r3
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	@ 0x78
 8001122:	f000 faf7 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	@ 0x78
 800112c:	f000 faf2 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001130:	22ff      	movs	r2, #255	@ 0xff
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	@ 0x78
 8001136:	f000 faed 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800113a:	222f      	movs	r2, #47	@ 0x2f
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	@ 0x78
 8001140:	f000 fae8 	bl	8001714 <ssd1306_I2C_Write>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	4613      	mov	r3, r2
 800115a:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 800115c:	2227      	movs	r2, #39	@ 0x27
 800115e:	2100      	movs	r1, #0
 8001160:	2078      	movs	r0, #120	@ 0x78
 8001162:	f000 fad7 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	@ 0x78
 800116c:	f000 fad2 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	461a      	mov	r2, r3
 8001174:	2100      	movs	r1, #0
 8001176:	2078      	movs	r0, #120	@ 0x78
 8001178:	f000 facc 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2078      	movs	r0, #120	@ 0x78
 8001182:	f000 fac7 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	461a      	mov	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	2078      	movs	r0, #120	@ 0x78
 800118e:	f000 fac1 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2078      	movs	r0, #120	@ 0x78
 8001198:	f000 fabc 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800119c:	22ff      	movs	r2, #255	@ 0xff
 800119e:	2100      	movs	r1, #0
 80011a0:	2078      	movs	r0, #120	@ 0x78
 80011a2:	f000 fab7 	bl	8001714 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80011a6:	222f      	movs	r2, #47	@ 0x2f
 80011a8:	2100      	movs	r1, #0
 80011aa:	2078      	movs	r0, #120	@ 0x78
 80011ac:	f000 fab2 	bl	8001714 <ssd1306_I2C_Write>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011bc:	222e      	movs	r2, #46	@ 0x2e
 80011be:	2100      	movs	r1, #0
 80011c0:	2078      	movs	r0, #120	@ 0x78
 80011c2:	f000 faa7 	bl	8001714 <ssd1306_I2C_Write>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80011d2:	f000 fa25 	bl	8001620 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80011d6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80011da:	2201      	movs	r2, #1
 80011dc:	2178      	movs	r1, #120	@ 0x78
 80011de:	485b      	ldr	r0, [pc, #364]	@ (800134c <SSD1306_Init+0x180>)
 80011e0:	f001 f9d6 	bl	8002590 <HAL_I2C_IsDeviceReady>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e0a9      	b.n	8001342 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80011ee:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80011f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011f4:	e002      	b.n	80011fc <SSD1306_Init+0x30>
		p--;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f9      	bne.n	80011f6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001202:	22ae      	movs	r2, #174	@ 0xae
 8001204:	2100      	movs	r1, #0
 8001206:	2078      	movs	r0, #120	@ 0x78
 8001208:	f000 fa84 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800120c:	2220      	movs	r2, #32
 800120e:	2100      	movs	r1, #0
 8001210:	2078      	movs	r0, #120	@ 0x78
 8001212:	f000 fa7f 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001216:	2210      	movs	r2, #16
 8001218:	2100      	movs	r1, #0
 800121a:	2078      	movs	r0, #120	@ 0x78
 800121c:	f000 fa7a 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001220:	22b0      	movs	r2, #176	@ 0xb0
 8001222:	2100      	movs	r1, #0
 8001224:	2078      	movs	r0, #120	@ 0x78
 8001226:	f000 fa75 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800122a:	22c8      	movs	r2, #200	@ 0xc8
 800122c:	2100      	movs	r1, #0
 800122e:	2078      	movs	r0, #120	@ 0x78
 8001230:	f000 fa70 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2078      	movs	r0, #120	@ 0x78
 800123a:	f000 fa6b 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800123e:	2210      	movs	r2, #16
 8001240:	2100      	movs	r1, #0
 8001242:	2078      	movs	r0, #120	@ 0x78
 8001244:	f000 fa66 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001248:	2240      	movs	r2, #64	@ 0x40
 800124a:	2100      	movs	r1, #0
 800124c:	2078      	movs	r0, #120	@ 0x78
 800124e:	f000 fa61 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001252:	2281      	movs	r2, #129	@ 0x81
 8001254:	2100      	movs	r1, #0
 8001256:	2078      	movs	r0, #120	@ 0x78
 8001258:	f000 fa5c 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800125c:	22ff      	movs	r2, #255	@ 0xff
 800125e:	2100      	movs	r1, #0
 8001260:	2078      	movs	r0, #120	@ 0x78
 8001262:	f000 fa57 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001266:	22a1      	movs	r2, #161	@ 0xa1
 8001268:	2100      	movs	r1, #0
 800126a:	2078      	movs	r0, #120	@ 0x78
 800126c:	f000 fa52 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001270:	22a6      	movs	r2, #166	@ 0xa6
 8001272:	2100      	movs	r1, #0
 8001274:	2078      	movs	r0, #120	@ 0x78
 8001276:	f000 fa4d 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800127a:	22a8      	movs	r2, #168	@ 0xa8
 800127c:	2100      	movs	r1, #0
 800127e:	2078      	movs	r0, #120	@ 0x78
 8001280:	f000 fa48 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001284:	223f      	movs	r2, #63	@ 0x3f
 8001286:	2100      	movs	r1, #0
 8001288:	2078      	movs	r0, #120	@ 0x78
 800128a:	f000 fa43 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800128e:	22a4      	movs	r2, #164	@ 0xa4
 8001290:	2100      	movs	r1, #0
 8001292:	2078      	movs	r0, #120	@ 0x78
 8001294:	f000 fa3e 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001298:	22d3      	movs	r2, #211	@ 0xd3
 800129a:	2100      	movs	r1, #0
 800129c:	2078      	movs	r0, #120	@ 0x78
 800129e:	f000 fa39 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2078      	movs	r0, #120	@ 0x78
 80012a8:	f000 fa34 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80012ac:	22d5      	movs	r2, #213	@ 0xd5
 80012ae:	2100      	movs	r1, #0
 80012b0:	2078      	movs	r0, #120	@ 0x78
 80012b2:	f000 fa2f 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80012b6:	22f0      	movs	r2, #240	@ 0xf0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2078      	movs	r0, #120	@ 0x78
 80012bc:	f000 fa2a 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80012c0:	22d9      	movs	r2, #217	@ 0xd9
 80012c2:	2100      	movs	r1, #0
 80012c4:	2078      	movs	r0, #120	@ 0x78
 80012c6:	f000 fa25 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80012ca:	2222      	movs	r2, #34	@ 0x22
 80012cc:	2100      	movs	r1, #0
 80012ce:	2078      	movs	r0, #120	@ 0x78
 80012d0:	f000 fa20 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80012d4:	22da      	movs	r2, #218	@ 0xda
 80012d6:	2100      	movs	r1, #0
 80012d8:	2078      	movs	r0, #120	@ 0x78
 80012da:	f000 fa1b 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012de:	2212      	movs	r2, #18
 80012e0:	2100      	movs	r1, #0
 80012e2:	2078      	movs	r0, #120	@ 0x78
 80012e4:	f000 fa16 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80012e8:	22db      	movs	r2, #219	@ 0xdb
 80012ea:	2100      	movs	r1, #0
 80012ec:	2078      	movs	r0, #120	@ 0x78
 80012ee:	f000 fa11 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80012f2:	2220      	movs	r2, #32
 80012f4:	2100      	movs	r1, #0
 80012f6:	2078      	movs	r0, #120	@ 0x78
 80012f8:	f000 fa0c 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80012fc:	228d      	movs	r2, #141	@ 0x8d
 80012fe:	2100      	movs	r1, #0
 8001300:	2078      	movs	r0, #120	@ 0x78
 8001302:	f000 fa07 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001306:	2214      	movs	r2, #20
 8001308:	2100      	movs	r1, #0
 800130a:	2078      	movs	r0, #120	@ 0x78
 800130c:	f000 fa02 	bl	8001714 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001310:	22af      	movs	r2, #175	@ 0xaf
 8001312:	2100      	movs	r1, #0
 8001314:	2078      	movs	r0, #120	@ 0x78
 8001316:	f000 f9fd 	bl	8001714 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800131a:	222e      	movs	r2, #46	@ 0x2e
 800131c:	2100      	movs	r1, #0
 800131e:	2078      	movs	r0, #120	@ 0x78
 8001320:	f000 f9f8 	bl	8001714 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001324:	2000      	movs	r0, #0
 8001326:	f000 f843 	bl	80013b0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800132a:	f000 f813 	bl	8001354 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <SSD1306_Init+0x184>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <SSD1306_Init+0x184>)
 8001336:	2200      	movs	r2, #0
 8001338:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800133a:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <SSD1306_Init+0x184>)
 800133c:	2201      	movs	r2, #1
 800133e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001340:	2301      	movs	r3, #1
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000003c 	.word	0x2000003c
 8001350:	200005bc 	.word	0x200005bc

08001354 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	e01d      	b.n	800139c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	3b50      	subs	r3, #80	@ 0x50
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	2100      	movs	r1, #0
 800136a:	2078      	movs	r0, #120	@ 0x78
 800136c:	f000 f9d2 	bl	8001714 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	2078      	movs	r0, #120	@ 0x78
 8001376:	f000 f9cd 	bl	8001714 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800137a:	2210      	movs	r2, #16
 800137c:	2100      	movs	r1, #0
 800137e:	2078      	movs	r0, #120	@ 0x78
 8001380:	f000 f9c8 	bl	8001714 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	01db      	lsls	r3, r3, #7
 8001388:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <SSD1306_UpdateScreen+0x58>)
 800138a:	441a      	add	r2, r3
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	2140      	movs	r1, #64	@ 0x40
 8001390:	2078      	movs	r0, #120	@ 0x78
 8001392:	f000 f959 	bl	8001648 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	3301      	adds	r3, #1
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	2b07      	cmp	r3, #7
 80013a0:	d9de      	bls.n	8001360 <SSD1306_UpdateScreen+0xc>
	}
}
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200001bc 	.word	0x200001bc

080013b0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <SSD1306_Fill+0x14>
 80013c0:	2300      	movs	r3, #0
 80013c2:	e000      	b.n	80013c6 <SSD1306_Fill+0x16>
 80013c4:	23ff      	movs	r3, #255	@ 0xff
 80013c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ca:	4619      	mov	r1, r3
 80013cc:	4803      	ldr	r0, [pc, #12]	@ (80013dc <SSD1306_Fill+0x2c>)
 80013ce:	f002 ff31 	bl	8004234 <memset>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200001bc 	.word	0x200001bc

080013e0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
 80013ea:	460b      	mov	r3, r1
 80013ec:	80bb      	strh	r3, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	70fb      	strb	r3, [r7, #3]
	if (
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80013f6:	d848      	bhi.n	800148a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80013fc:	d845      	bhi.n	800148a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80013fe:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <SSD1306_DrawPixel+0xb4>)
 8001400:	791b      	ldrb	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d11a      	bne.n	8001450 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	88bb      	ldrh	r3, [r7, #4]
 800141e:	08db      	lsrs	r3, r3, #3
 8001420:	b298      	uxth	r0, r3
 8001422:	4603      	mov	r3, r0
 8001424:	01db      	lsls	r3, r3, #7
 8001426:	4413      	add	r3, r2
 8001428:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <SSD1306_DrawPixel+0xb8>)
 800142a:	5cd3      	ldrb	r3, [r2, r3]
 800142c:	b25a      	sxtb	r2, r3
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	b25b      	sxtb	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b259      	sxtb	r1, r3
 8001440:	88fa      	ldrh	r2, [r7, #6]
 8001442:	4603      	mov	r3, r0
 8001444:	01db      	lsls	r3, r3, #7
 8001446:	4413      	add	r3, r2
 8001448:	b2c9      	uxtb	r1, r1
 800144a:	4a13      	ldr	r2, [pc, #76]	@ (8001498 <SSD1306_DrawPixel+0xb8>)
 800144c:	54d1      	strb	r1, [r2, r3]
 800144e:	e01d      	b.n	800148c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001450:	88fa      	ldrh	r2, [r7, #6]
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	b298      	uxth	r0, r3
 8001458:	4603      	mov	r3, r0
 800145a:	01db      	lsls	r3, r3, #7
 800145c:	4413      	add	r3, r2
 800145e:	4a0e      	ldr	r2, [pc, #56]	@ (8001498 <SSD1306_DrawPixel+0xb8>)
 8001460:	5cd3      	ldrb	r3, [r2, r3]
 8001462:	b25a      	sxtb	r2, r3
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	b25b      	sxtb	r3, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	b25b      	sxtb	r3, r3
 8001476:	4013      	ands	r3, r2
 8001478:	b259      	sxtb	r1, r3
 800147a:	88fa      	ldrh	r2, [r7, #6]
 800147c:	4603      	mov	r3, r0
 800147e:	01db      	lsls	r3, r3, #7
 8001480:	4413      	add	r3, r2
 8001482:	b2c9      	uxtb	r1, r1
 8001484:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <SSD1306_DrawPixel+0xb8>)
 8001486:	54d1      	strb	r1, [r2, r3]
 8001488:	e000      	b.n	800148c <SSD1306_DrawPixel+0xac>
		return;
 800148a:	bf00      	nop
	}
}
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	200005bc 	.word	0x200005bc
 8001498:	200001bc 	.word	0x200001bc

0800149c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	80fb      	strh	r3, [r7, #6]
 80014a8:	4613      	mov	r3, r2
 80014aa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80014ac:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <SSD1306_GotoXY+0x28>)
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80014b2:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <SSD1306_GotoXY+0x28>)
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	8053      	strh	r3, [r2, #2]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	200005bc 	.word	0x200005bc

080014c8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	4613      	mov	r3, r2
 80014d6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014d8:	4b39      	ldr	r3, [pc, #228]	@ (80015c0 <SSD1306_Putc+0xf8>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
	if (
 80014e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80014e6:	dc07      	bgt.n	80014f8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80014e8:	4b35      	ldr	r3, [pc, #212]	@ (80015c0 <SSD1306_Putc+0xf8>)
 80014ea:	885b      	ldrh	r3, [r3, #2]
 80014ec:	461a      	mov	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80014f6:	dd01      	ble.n	80014fc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	e05d      	b.n	80015b8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e04b      	b.n	800159a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	3b20      	subs	r3, #32
 800150a:	6839      	ldr	r1, [r7, #0]
 800150c:	7849      	ldrb	r1, [r1, #1]
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4619      	mov	r1, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	440b      	add	r3, r1
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	e030      	b.n	8001588 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d010      	beq.n	8001558 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001536:	4b22      	ldr	r3, [pc, #136]	@ (80015c0 <SSD1306_Putc+0xf8>)
 8001538:	881a      	ldrh	r2, [r3, #0]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4413      	add	r3, r2
 8001540:	b298      	uxth	r0, r3
 8001542:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <SSD1306_Putc+0xf8>)
 8001544:	885a      	ldrh	r2, [r3, #2]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	b29b      	uxth	r3, r3
 800154a:	4413      	add	r3, r2
 800154c:	b29b      	uxth	r3, r3
 800154e:	79ba      	ldrb	r2, [r7, #6]
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff ff45 	bl	80013e0 <SSD1306_DrawPixel>
 8001556:	e014      	b.n	8001582 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001558:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <SSD1306_Putc+0xf8>)
 800155a:	881a      	ldrh	r2, [r3, #0]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	b29b      	uxth	r3, r3
 8001560:	4413      	add	r3, r2
 8001562:	b298      	uxth	r0, r3
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <SSD1306_Putc+0xf8>)
 8001566:	885a      	ldrh	r2, [r3, #2]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b299      	uxth	r1, r3
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf0c      	ite	eq
 8001576:	2301      	moveq	r3, #1
 8001578:	2300      	movne	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	f7ff ff2f 	bl	80013e0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	3301      	adds	r3, #1
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4293      	cmp	r3, r2
 8001592:	d3c8      	bcc.n	8001526 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	785b      	ldrb	r3, [r3, #1]
 800159e:	461a      	mov	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d3ad      	bcc.n	8001502 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <SSD1306_Putc+0xf8>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <SSD1306_Putc+0xf8>)
 80015b4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80015b6:	79fb      	ldrb	r3, [r7, #7]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200005bc 	.word	0x200005bc

080015c4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	4613      	mov	r3, r2
 80015d0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80015d2:	e012      	b.n	80015fa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	79fa      	ldrb	r2, [r7, #7]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff73 	bl	80014c8 <SSD1306_Putc>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d002      	beq.n	80015f4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	e008      	b.n	8001606 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3301      	adds	r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1e8      	bne.n	80015d4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	781b      	ldrb	r3, [r3, #0]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff fecc 	bl	80013b0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001618:	f7ff fe9c 	bl	8001354 <SSD1306_UpdateScreen>
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <ssd1306_I2C_Init+0x24>)
 8001628:	607b      	str	r3, [r7, #4]
	while(p>0)
 800162a:	e002      	b.n	8001632 <ssd1306_I2C_Init+0x12>
		p--;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f9      	bne.n	800162c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	0003d090 	.word	0x0003d090

08001648 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b0c7      	sub	sp, #284	@ 0x11c
 800164c:	af02      	add	r7, sp, #8
 800164e:	4604      	mov	r4, r0
 8001650:	4608      	mov	r0, r1
 8001652:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001656:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800165a:	600a      	str	r2, [r1, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001662:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001666:	4622      	mov	r2, r4
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800166e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001672:	4602      	mov	r2, r0
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800167a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800167e:	460a      	mov	r2, r1
 8001680:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001686:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800168a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800168e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800169c:	e015      	b.n	80016ca <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800169e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016a2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016a6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	441a      	add	r2, r3
 80016ae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016b2:	3301      	adds	r3, #1
 80016b4:	7811      	ldrb	r1, [r2, #0]
 80016b6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016ba:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016be:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80016c0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016c4:	3301      	adds	r3, #1
 80016c6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80016ca:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016d4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80016d8:	8812      	ldrh	r2, [r2, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d8df      	bhi.n	800169e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80016de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016e2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b299      	uxth	r1, r3
 80016ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	f107 020c 	add.w	r2, r7, #12
 80016fc:	200a      	movs	r0, #10
 80016fe:	9000      	str	r0, [sp, #0]
 8001700:	4803      	ldr	r0, [pc, #12]	@ (8001710 <ssd1306_I2C_WriteMulti+0xc8>)
 8001702:	f000 fe47 	bl	8002394 <HAL_I2C_Master_Transmit>
}
 8001706:	bf00      	nop
 8001708:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800170c:	46bd      	mov	sp, r7
 800170e:	bd90      	pop	{r4, r7, pc}
 8001710:	2000003c 	.word	0x2000003c

08001714 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af02      	add	r7, sp, #8
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	460b      	mov	r3, r1
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	4613      	mov	r3, r2
 8001724:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800172a:	797b      	ldrb	r3, [r7, #5]
 800172c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	b299      	uxth	r1, r3
 8001732:	f107 020c 	add.w	r2, r7, #12
 8001736:	230a      	movs	r3, #10
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2302      	movs	r3, #2
 800173c:	4803      	ldr	r0, [pc, #12]	@ (800174c <ssd1306_I2C_Write+0x38>)
 800173e:	f000 fe29 	bl	8002394 <HAL_I2C_Master_Transmit>
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000003c 	.word	0x2000003c

08001750 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <HAL_MspInit+0x5c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a0e      	ldr	r2, [pc, #56]	@ (80017ac <HAL_MspInit+0x5c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_MspInit+0x60>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <HAL_MspInit+0x60>)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000

080017b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a15      	ldr	r2, [pc, #84]	@ (8001824 <HAL_I2C_MspInit+0x70>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d123      	bne.n	800181c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ec:	23c0      	movs	r3, #192	@ 0xc0
 80017ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	4619      	mov	r1, r3
 80017fe:	480b      	ldr	r0, [pc, #44]	@ (800182c <HAL_I2C_MspInit+0x78>)
 8001800:	f000 fab8 	bl	8001d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 800180a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800180e:	61d3      	str	r3, [r2, #28]
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40005400 	.word	0x40005400
 8001828:	40021000 	.word	0x40021000
 800182c:	40010c00 	.word	0x40010c00

08001830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a24      	ldr	r2, [pc, #144]	@ (80018d0 <HAL_TIM_Base_MspInit+0xa0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10c      	bne.n	800185c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	4a23      	ldr	r2, [pc, #140]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001848:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800184c:	6193      	str	r3, [r2, #24]
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800185a:	e034      	b.n	80018c6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001864:	d10c      	bne.n	8001880 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a1a      	ldr	r2, [pc, #104]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
}
 800187e:	e022      	b.n	80018c6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <HAL_TIM_Base_MspInit+0xa8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10c      	bne.n	80018a4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a11      	ldr	r2, [pc, #68]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
}
 80018a2:	e010      	b.n	80018c6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0c      	ldr	r2, [pc, #48]	@ (80018dc <HAL_TIM_Base_MspInit+0xac>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d10b      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_TIM_Base_MspInit+0xa4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40012c00 	.word	0x40012c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40000400 	.word	0x40000400
 80018dc:	40000800 	.word	0x40000800

080018e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a10      	ldr	r2, [pc, #64]	@ (800193c <HAL_TIM_MspPostInit+0x5c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d118      	bne.n	8001932 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <HAL_TIM_MspPostInit+0x60>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a0e      	ldr	r2, [pc, #56]	@ (8001940 <HAL_TIM_MspPostInit+0x60>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <HAL_TIM_MspPostInit+0x60>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800191c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2302      	movs	r3, #2
 8001924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	@ (8001944 <HAL_TIM_MspPostInit+0x64>)
 800192e:	f000 fa21 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001932:	bf00      	nop
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40012c00 	.word	0x40012c00
 8001940:	40021000 	.word	0x40021000
 8001944:	40010800 	.word	0x40010800

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <NMI_Handler+0x4>

08001950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <MemManage_Handler+0x4>

08001960 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <UsageFault_Handler+0x4>

08001970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001998:	f000 f89e 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPEED_MODE_Pin);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f000 fb99 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}

080019ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMERGENCY_STOP_Pin);
 80019b2:	2002      	movs	r0, #2
 80019b4:	f000 fb92 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_STOP_Pin);
 80019c0:	2004      	movs	r0, #4
 80019c2:	f000 fb8b 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}

080019ca <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TARE_Pin);
 80019ce:	2008      	movs	r0, #8
 80019d0:	f000 fb84 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MOVEDW_Pin);
 80019dc:	2010      	movs	r0, #16
 80019de:	f000 fb7d 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MOVEUP_Pin);
 80019ea:	2020      	movs	r0, #32
 80019ec:	f000 fb76 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a00:	f7ff fff8 	bl	80019f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480b      	ldr	r0, [pc, #44]	@ (8001a34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a06:	490c      	ldr	r1, [pc, #48]	@ (8001a38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a08:	4a0c      	ldr	r2, [pc, #48]	@ (8001a3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a09      	ldr	r2, [pc, #36]	@ (8001a40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a1c:	4c09      	ldr	r4, [pc, #36]	@ (8001a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f002 fc0b 	bl	8004244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a2e:	f7fe ff93 	bl	8000958 <main>
  bx lr
 8001a32:	4770      	bx	lr
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001a3c:	08004b1c 	.word	0x08004b1c
  ldr r2, =_sbss
 8001a40:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001a44:	200005c8 	.word	0x200005c8

08001a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_2_IRQHandler>
	...

08001a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <HAL_Init+0x28>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a07      	ldr	r2, [pc, #28]	@ (8001a74 <HAL_Init+0x28>)
 8001a56:	f043 0310 	orr.w	r3, r3, #16
 8001a5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f947 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a62:	200f      	movs	r0, #15
 8001a64:	f000 f808 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff fe72 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40022000 	.word	0x40022000

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_InitTick+0x54>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_InitTick+0x58>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f95f 	bl	8001d5a <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 f927 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	@ (8001ad4 <HAL_InitTick+0x5c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000014 	.word	0x20000014
 8001ad0:	2000001c 	.word	0x2000001c
 8001ad4:	20000018 	.word	0x20000018

08001ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_IncTick+0x1c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_IncTick+0x20>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a03      	ldr	r2, [pc, #12]	@ (8001af8 <HAL_IncTick+0x20>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	2000001c 	.word	0x2000001c
 8001af8:	200005c4 	.word	0x200005c4

08001afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b02      	ldr	r3, [pc, #8]	@ (8001b0c <HAL_GetTick+0x10>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	200005c4 	.word	0x200005c4

08001b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b18:	f7ff fff0 	bl	8001afc <HAL_GetTick>
 8001b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d005      	beq.n	8001b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_Delay+0x44>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b36:	bf00      	nop
 8001b38:	f7ff ffe0 	bl	8001afc <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d8f7      	bhi.n	8001b38 <HAL_Delay+0x28>
  {
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000001c 	.word	0x2000001c

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4906      	ldr	r1, [pc, #24]	@ (8001bf0 <__NVIC_EnableIRQ+0x34>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	db0a      	blt.n	8001c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	490c      	ldr	r1, [pc, #48]	@ (8001c40 <__NVIC_SetPriority+0x4c>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	440b      	add	r3, r1
 8001c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c1c:	e00a      	b.n	8001c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4908      	ldr	r1, [pc, #32]	@ (8001c44 <__NVIC_SetPriority+0x50>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	440b      	add	r3, r1
 8001c32:	761a      	strb	r2, [r3, #24]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e100 	.word	0xe000e100
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	@ 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f1c3 0307 	rsb	r3, r3, #7
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	bf28      	it	cs
 8001c66:	2304      	movcs	r3, #4
 8001c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d902      	bls.n	8001c78 <NVIC_EncodePriority+0x30>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b03      	subs	r3, #3
 8001c76:	e000      	b.n	8001c7a <NVIC_EncodePriority+0x32>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	4313      	orrs	r3, r2
         );
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	@ 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff90 	bl	8001bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff2d 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff42 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff90 	bl	8001c48 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5f 	bl	8001bf4 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff35 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffa2 	bl	8001cac <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b08b      	sub	sp, #44	@ 0x2c
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	e169      	b.n	800205c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	f040 8158 	bne.w	8002056 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4a9a      	ldr	r2, [pc, #616]	@ (8002014 <HAL_GPIO_Init+0x2a0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d05e      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001db0:	4a98      	ldr	r2, [pc, #608]	@ (8002014 <HAL_GPIO_Init+0x2a0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d875      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001db6:	4a98      	ldr	r2, [pc, #608]	@ (8002018 <HAL_GPIO_Init+0x2a4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d058      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dbc:	4a96      	ldr	r2, [pc, #600]	@ (8002018 <HAL_GPIO_Init+0x2a4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d86f      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dc2:	4a96      	ldr	r2, [pc, #600]	@ (800201c <HAL_GPIO_Init+0x2a8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d052      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dc8:	4a94      	ldr	r2, [pc, #592]	@ (800201c <HAL_GPIO_Init+0x2a8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d869      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dce:	4a94      	ldr	r2, [pc, #592]	@ (8002020 <HAL_GPIO_Init+0x2ac>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d04c      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dd4:	4a92      	ldr	r2, [pc, #584]	@ (8002020 <HAL_GPIO_Init+0x2ac>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d863      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dda:	4a92      	ldr	r2, [pc, #584]	@ (8002024 <HAL_GPIO_Init+0x2b0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d046      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001de0:	4a90      	ldr	r2, [pc, #576]	@ (8002024 <HAL_GPIO_Init+0x2b0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d85d      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001de6:	2b12      	cmp	r3, #18
 8001de8:	d82a      	bhi.n	8001e40 <HAL_GPIO_Init+0xcc>
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d859      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dee:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <HAL_GPIO_Init+0x80>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e6f 	.word	0x08001e6f
 8001df8:	08001e49 	.word	0x08001e49
 8001dfc:	08001e5b 	.word	0x08001e5b
 8001e00:	08001e9d 	.word	0x08001e9d
 8001e04:	08001ea3 	.word	0x08001ea3
 8001e08:	08001ea3 	.word	0x08001ea3
 8001e0c:	08001ea3 	.word	0x08001ea3
 8001e10:	08001ea3 	.word	0x08001ea3
 8001e14:	08001ea3 	.word	0x08001ea3
 8001e18:	08001ea3 	.word	0x08001ea3
 8001e1c:	08001ea3 	.word	0x08001ea3
 8001e20:	08001ea3 	.word	0x08001ea3
 8001e24:	08001ea3 	.word	0x08001ea3
 8001e28:	08001ea3 	.word	0x08001ea3
 8001e2c:	08001ea3 	.word	0x08001ea3
 8001e30:	08001ea3 	.word	0x08001ea3
 8001e34:	08001ea3 	.word	0x08001ea3
 8001e38:	08001e51 	.word	0x08001e51
 8001e3c:	08001e65 	.word	0x08001e65
 8001e40:	4a79      	ldr	r2, [pc, #484]	@ (8002028 <HAL_GPIO_Init+0x2b4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e46:	e02c      	b.n	8001ea2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	623b      	str	r3, [r7, #32]
          break;
 8001e4e:	e029      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	3304      	adds	r3, #4
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e024      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	3308      	adds	r3, #8
 8001e60:	623b      	str	r3, [r7, #32]
          break;
 8001e62:	e01f      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	330c      	adds	r3, #12
 8001e6a:	623b      	str	r3, [r7, #32]
          break;
 8001e6c:	e01a      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e76:	2304      	movs	r3, #4
 8001e78:	623b      	str	r3, [r7, #32]
          break;
 8001e7a:	e013      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d105      	bne.n	8001e90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e84:	2308      	movs	r3, #8
 8001e86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	611a      	str	r2, [r3, #16]
          break;
 8001e8e:	e009      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e90:	2308      	movs	r3, #8
 8001e92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	615a      	str	r2, [r3, #20]
          break;
 8001e9a:	e003      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e000      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          break;
 8001ea2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2bff      	cmp	r3, #255	@ 0xff
 8001ea8:	d801      	bhi.n	8001eae <HAL_GPIO_Init+0x13a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	e001      	b.n	8001eb2 <HAL_GPIO_Init+0x13e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2bff      	cmp	r3, #255	@ 0xff
 8001eb8:	d802      	bhi.n	8001ec0 <HAL_GPIO_Init+0x14c>
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	e002      	b.n	8001ec6 <HAL_GPIO_Init+0x152>
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	3b08      	subs	r3, #8
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	210f      	movs	r1, #15
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	6a39      	ldr	r1, [r7, #32]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80b1 	beq.w	8002056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800202c <HAL_GPIO_Init+0x2b8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800202c <HAL_GPIO_Init+0x2b8>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b4a      	ldr	r3, [pc, #296]	@ (800202c <HAL_GPIO_Init+0x2b8>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f0c:	4a48      	ldr	r2, [pc, #288]	@ (8002030 <HAL_GPIO_Init+0x2bc>)
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a40      	ldr	r2, [pc, #256]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d013      	beq.n	8001f60 <HAL_GPIO_Init+0x1ec>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3f      	ldr	r2, [pc, #252]	@ (8002038 <HAL_GPIO_Init+0x2c4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d00d      	beq.n	8001f5c <HAL_GPIO_Init+0x1e8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3e      	ldr	r2, [pc, #248]	@ (800203c <HAL_GPIO_Init+0x2c8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d007      	beq.n	8001f58 <HAL_GPIO_Init+0x1e4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002040 <HAL_GPIO_Init+0x2cc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_GPIO_Init+0x1e0>
 8001f50:	2303      	movs	r3, #3
 8001f52:	e006      	b.n	8001f62 <HAL_GPIO_Init+0x1ee>
 8001f54:	2304      	movs	r3, #4
 8001f56:	e004      	b.n	8001f62 <HAL_GPIO_Init+0x1ee>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e002      	b.n	8001f62 <HAL_GPIO_Init+0x1ee>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_GPIO_Init+0x1ee>
 8001f60:	2300      	movs	r3, #0
 8001f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f64:	f002 0203 	and.w	r2, r2, #3
 8001f68:	0092      	lsls	r2, r2, #2
 8001f6a:	4093      	lsls	r3, r2
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f72:	492f      	ldr	r1, [pc, #188]	@ (8002030 <HAL_GPIO_Init+0x2bc>)
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	3302      	adds	r3, #2
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	492c      	ldr	r1, [pc, #176]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fb4:	4b23      	ldr	r3, [pc, #140]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	4922      	ldr	r1, [pc, #136]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60cb      	str	r3, [r1, #12]
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fc2:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	491e      	ldr	r1, [pc, #120]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fdc:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4918      	ldr	r1, [pc, #96]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fea:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	4914      	ldr	r1, [pc, #80]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d021      	beq.n	8002048 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002004:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	490e      	ldr	r1, [pc, #56]	@ (8002044 <HAL_GPIO_Init+0x2d0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
 8002010:	e021      	b.n	8002056 <HAL_GPIO_Init+0x2e2>
 8002012:	bf00      	nop
 8002014:	10320000 	.word	0x10320000
 8002018:	10310000 	.word	0x10310000
 800201c:	10220000 	.word	0x10220000
 8002020:	10210000 	.word	0x10210000
 8002024:	10120000 	.word	0x10120000
 8002028:	10110000 	.word	0x10110000
 800202c:	40021000 	.word	0x40021000
 8002030:	40010000 	.word	0x40010000
 8002034:	40010800 	.word	0x40010800
 8002038:	40010c00 	.word	0x40010c00
 800203c:	40011000 	.word	0x40011000
 8002040:	40011400 	.word	0x40011400
 8002044:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002048:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <HAL_GPIO_Init+0x304>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	43db      	mvns	r3, r3
 8002050:	4909      	ldr	r1, [pc, #36]	@ (8002078 <HAL_GPIO_Init+0x304>)
 8002052:	4013      	ands	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	3301      	adds	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	f47f ae8e 	bne.w	8001d88 <HAL_GPIO_Init+0x14>
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	372c      	adds	r7, #44	@ 0x2c
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	40010400 	.word	0x40010400

0800207c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e001      	b.n	800209e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	807b      	strh	r3, [r7, #2]
 80020b6:	4613      	mov	r3, r2
 80020b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ba:	787b      	ldrb	r3, [r7, #1]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c0:	887a      	ldrh	r2, [r7, #2]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020c6:	e003      	b.n	80020d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	041a      	lsls	r2, r3, #16
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	611a      	str	r2, [r3, #16]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020e6:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020f2:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe faaa 	bl	8000654 <HAL_GPIO_EXTI_Callback>
  }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40010400 	.word	0x40010400

0800210c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e12b      	b.n	8002376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fb3e 	bl	80017b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	@ 0x24
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800215e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800216e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002170:	f001 f960 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8002174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a81      	ldr	r2, [pc, #516]	@ (8002380 <HAL_I2C_Init+0x274>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d807      	bhi.n	8002190 <HAL_I2C_Init+0x84>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a80      	ldr	r2, [pc, #512]	@ (8002384 <HAL_I2C_Init+0x278>)
 8002184:	4293      	cmp	r3, r2
 8002186:	bf94      	ite	ls
 8002188:	2301      	movls	r3, #1
 800218a:	2300      	movhi	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e006      	b.n	800219e <HAL_I2C_Init+0x92>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4a7d      	ldr	r2, [pc, #500]	@ (8002388 <HAL_I2C_Init+0x27c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	bf94      	ite	ls
 8002198:	2301      	movls	r3, #1
 800219a:	2300      	movhi	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0e7      	b.n	8002376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a78      	ldr	r2, [pc, #480]	@ (800238c <HAL_I2C_Init+0x280>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9b      	lsrs	r3, r3, #18
 80021b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002380 <HAL_I2C_Init+0x274>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d802      	bhi.n	80021e0 <HAL_I2C_Init+0xd4>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3301      	adds	r3, #1
 80021de:	e009      	b.n	80021f4 <HAL_I2C_Init+0xe8>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	4a69      	ldr	r2, [pc, #420]	@ (8002390 <HAL_I2C_Init+0x284>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	3301      	adds	r3, #1
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002206:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	495c      	ldr	r1, [pc, #368]	@ (8002380 <HAL_I2C_Init+0x274>)
 8002210:	428b      	cmp	r3, r1
 8002212:	d819      	bhi.n	8002248 <HAL_I2C_Init+0x13c>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e59      	subs	r1, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002222:	1c59      	adds	r1, r3, #1
 8002224:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002228:	400b      	ands	r3, r1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_I2C_Init+0x138>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1e59      	subs	r1, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fbb1 f3f3 	udiv	r3, r1, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002242:	e051      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002244:	2304      	movs	r3, #4
 8002246:	e04f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d111      	bne.n	8002274 <HAL_I2C_Init+0x168>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1e58      	subs	r0, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	440b      	add	r3, r1
 800225e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002262:	3301      	adds	r3, #1
 8002264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e012      	b.n	800229a <HAL_I2C_Init+0x18e>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e58      	subs	r0, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	0099      	lsls	r1, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Init+0x196>
 800229e:	2301      	movs	r3, #1
 80022a0:	e022      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10e      	bne.n	80022c8 <HAL_I2C_Init+0x1bc>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1e58      	subs	r0, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022c6:	e00f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	6809      	ldr	r1, [r1, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002316:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6911      	ldr	r1, [r2, #16]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68d2      	ldr	r2, [r2, #12]
 8002322:	4311      	orrs	r1, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	430b      	orrs	r3, r1
 800232a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	000186a0 	.word	0x000186a0
 8002384:	001e847f 	.word	0x001e847f
 8002388:	003d08ff 	.word	0x003d08ff
 800238c:	431bde83 	.word	0x431bde83
 8002390:	10624dd3 	.word	0x10624dd3

08002394 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	460b      	mov	r3, r1
 80023a2:	817b      	strh	r3, [r7, #10]
 80023a4:	4613      	mov	r3, r2
 80023a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff fba8 	bl	8001afc <HAL_GetTick>
 80023ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	f040 80e0 	bne.w	800257c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2319      	movs	r3, #25
 80023c2:	2201      	movs	r2, #1
 80023c4:	4970      	ldr	r1, [pc, #448]	@ (8002588 <HAL_I2C_Master_Transmit+0x1f4>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fa92 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0d3      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_I2C_Master_Transmit+0x50>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0cc      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d007      	beq.n	800240a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002418:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2221      	movs	r2, #33	@ 0x21
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2210      	movs	r2, #16
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	893a      	ldrh	r2, [r7, #8]
 800243a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a50      	ldr	r2, [pc, #320]	@ (800258c <HAL_I2C_Master_Transmit+0x1f8>)
 800244a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800244c:	8979      	ldrh	r1, [r7, #10]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6a3a      	ldr	r2, [r7, #32]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f9ca 	bl	80027ec <I2C_MasterRequestWrite>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e08d      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002478:	e066      	b.n	8002548 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	6a39      	ldr	r1, [r7, #32]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fb50 	bl	8002b24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	2b04      	cmp	r3, #4
 8002490:	d107      	bne.n	80024a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06b      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d11b      	bne.n	800251c <HAL_I2C_Master_Transmit+0x188>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d017      	beq.n	800251c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	6a39      	ldr	r1, [r7, #32]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fb47 	bl	8002bb4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	2b04      	cmp	r3, #4
 8002532:	d107      	bne.n	8002544 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002542:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e01a      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	d194      	bne.n	800247a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	00100002 	.word	0x00100002
 800258c:	ffff0000 	.word	0xffff0000

08002590 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	@ 0x28
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	460b      	mov	r3, r1
 800259e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff faac 	bl	8001afc <HAL_GetTick>
 80025a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 8111 	bne.w	80027da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2319      	movs	r3, #25
 80025be:	2201      	movs	r2, #1
 80025c0:	4988      	ldr	r1, [pc, #544]	@ (80027e4 <HAL_I2C_IsDeviceReady+0x254>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f994 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	e104      	b.n	80027dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_I2C_IsDeviceReady+0x50>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0fd      	b.n	80027dc <HAL_I2C_IsDeviceReady+0x24c>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d007      	beq.n	8002606 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002614:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2224      	movs	r2, #36	@ 0x24
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a70      	ldr	r2, [pc, #448]	@ (80027e8 <HAL_I2C_IsDeviceReady+0x258>)
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002638:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f952 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00d      	beq.n	800266e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002660:	d103      	bne.n	800266a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002668:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0b6      	b.n	80027dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800267c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800267e:	f7ff fa3d 	bl	8001afc <HAL_GetTick>
 8002682:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b02      	cmp	r3, #2
 8002690:	bf0c      	ite	eq
 8002692:	2301      	moveq	r3, #1
 8002694:	2300      	movne	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026a8:	bf0c      	ite	eq
 80026aa:	2301      	moveq	r3, #1
 80026ac:	2300      	movne	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026b2:	e025      	b.n	8002700 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026b4:	f7ff fa22 	bl	8001afc <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d302      	bcc.n	80026ca <HAL_I2C_IsDeviceReady+0x13a>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	22a0      	movs	r2, #160	@ 0xa0
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b02      	cmp	r3, #2
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2ba0      	cmp	r3, #160	@ 0xa0
 800270a:	d005      	beq.n	8002718 <HAL_I2C_IsDeviceReady+0x188>
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <HAL_I2C_IsDeviceReady+0x188>
 8002712:	7dbb      	ldrb	r3, [r7, #22]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0cd      	beq.n	80026b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b02      	cmp	r3, #2
 800272c:	d129      	bne.n	8002782 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	2319      	movs	r3, #25
 800275a:	2201      	movs	r2, #1
 800275c:	4921      	ldr	r1, [pc, #132]	@ (80027e4 <HAL_I2C_IsDeviceReady+0x254>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f8c6 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e036      	b.n	80027dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e02c      	b.n	80027dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002790:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800279a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2319      	movs	r3, #25
 80027a2:	2201      	movs	r2, #1
 80027a4:	490f      	ldr	r1, [pc, #60]	@ (80027e4 <HAL_I2C_IsDeviceReady+0x254>)
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f8a2 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e012      	b.n	80027dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	3301      	adds	r3, #1
 80027ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f4ff af32 	bcc.w	800262a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027da:	2302      	movs	r3, #2
  }
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	00100002 	.word	0x00100002
 80027e8:	ffff0000 	.word	0xffff0000

080027ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	460b      	mov	r3, r1
 80027fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d006      	beq.n	8002816 <I2C_MasterRequestWrite+0x2a>
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d003      	beq.n	8002816 <I2C_MasterRequestWrite+0x2a>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002814:	d108      	bne.n	8002828 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e00b      	b.n	8002840 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	2b12      	cmp	r3, #18
 800282e:	d107      	bne.n	8002840 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800283e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f84f 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00d      	beq.n	8002874 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002866:	d103      	bne.n	8002870 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800286e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e035      	b.n	80028e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800287c:	d108      	bne.n	8002890 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800288c:	611a      	str	r2, [r3, #16]
 800288e:	e01b      	b.n	80028c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002890:	897b      	ldrh	r3, [r7, #10]
 8002892:	11db      	asrs	r3, r3, #7
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0306 	and.w	r3, r3, #6
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f063 030f 	orn	r3, r3, #15
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	490e      	ldr	r1, [pc, #56]	@ (80028e8 <I2C_MasterRequestWrite+0xfc>)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f898 	bl	80029e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e010      	b.n	80028e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4907      	ldr	r1, [pc, #28]	@ (80028ec <I2C_MasterRequestWrite+0x100>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f888 	bl	80029e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	00010008 	.word	0x00010008
 80028ec:	00010002 	.word	0x00010002

080028f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002900:	e048      	b.n	8002994 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d044      	beq.n	8002994 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7ff f8f7 	bl	8001afc <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x30>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d139      	bne.n	8002994 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	0c1b      	lsrs	r3, r3, #16
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b01      	cmp	r3, #1
 8002928:	d10d      	bne.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x56>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	43da      	mvns	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4013      	ands	r3, r2
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	e00c      	b.n	8002960 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	43da      	mvns	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4013      	ands	r3, r2
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	429a      	cmp	r2, r3
 8002964:	d116      	bne.n	8002994 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e023      	b.n	80029dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	0c1b      	lsrs	r3, r3, #16
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d10d      	bne.n	80029ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	43da      	mvns	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4013      	ands	r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	e00c      	b.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	43da      	mvns	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d093      	beq.n	8002902 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029f2:	e071      	b.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a02:	d123      	bne.n	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f043 0204 	orr.w	r2, r3, #4
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e067      	b.n	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a52:	d041      	beq.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a54:	f7ff f852 	bl	8001afc <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d302      	bcc.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d136      	bne.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d10c      	bne.n	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf14      	ite	ne
 8002a86:	2301      	movne	r3, #1
 8002a88:	2300      	moveq	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	e00b      	b.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	43da      	mvns	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e021      	b.n	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	0c1b      	lsrs	r3, r3, #16
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10c      	bne.n	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	43da      	mvns	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4013      	ands	r3, r2
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf14      	ite	ne
 8002af4:	2301      	movne	r3, #1
 8002af6:	2300      	moveq	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e00b      	b.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	43da      	mvns	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4013      	ands	r3, r2
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bf14      	ite	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	2300      	moveq	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f47f af6d 	bne.w	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b30:	e034      	b.n	8002b9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f886 	bl	8002c44 <I2C_IsAcknowledgeFailed>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e034      	b.n	8002bac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d028      	beq.n	8002b9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7fe ffd7 	bl	8001afc <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d11d      	bne.n	8002b9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6a:	2b80      	cmp	r3, #128	@ 0x80
 8002b6c:	d016      	beq.n	8002b9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e007      	b.n	8002bac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba6:	2b80      	cmp	r3, #128	@ 0x80
 8002ba8:	d1c3      	bne.n	8002b32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bc0:	e034      	b.n	8002c2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f83e 	bl	8002c44 <I2C_IsAcknowledgeFailed>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e034      	b.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d028      	beq.n	8002c2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bda:	f7fe ff8f 	bl	8001afc <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d302      	bcc.n	8002bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d11d      	bne.n	8002c2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d016      	beq.n	8002c2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e007      	b.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d1c3      	bne.n	8002bc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5a:	d11b      	bne.n	8002c94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f043 0204 	orr.w	r2, r3, #4
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e272      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8087 	beq.w	8002dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc0:	4b92      	ldr	r3, [pc, #584]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d00c      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ccc:	4b8f      	ldr	r3, [pc, #572]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d112      	bne.n	8002cfe <HAL_RCC_OscConfig+0x5e>
 8002cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce4:	d10b      	bne.n	8002cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce6:	4b89      	ldr	r3, [pc, #548]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d06c      	beq.n	8002dcc <HAL_RCC_OscConfig+0x12c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d168      	bne.n	8002dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e24c      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x76>
 8002d08:	4b80      	ldr	r3, [pc, #512]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a7f      	ldr	r2, [pc, #508]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e02e      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x98>
 8002d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7a      	ldr	r2, [pc, #488]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b78      	ldr	r3, [pc, #480]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a77      	ldr	r2, [pc, #476]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e01d      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0xbc>
 8002d42:	4b72      	ldr	r3, [pc, #456]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a71      	ldr	r2, [pc, #452]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6e      	ldr	r2, [pc, #440]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d5c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a6a      	ldr	r2, [pc, #424]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b68      	ldr	r3, [pc, #416]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a67      	ldr	r2, [pc, #412]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe febe 	bl	8001afc <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe feba 	bl	8001afc <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	@ 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e200      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b5d      	ldr	r3, [pc, #372]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe4>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe feaa 	bl	8001afc <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe fea6 	bl	8001afc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	@ 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1ec      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	4b53      	ldr	r3, [pc, #332]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x10c>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d063      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dda:	4b4c      	ldr	r3, [pc, #304]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002de6:	4b49      	ldr	r3, [pc, #292]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d11c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x18c>
 8002df2:	4b46      	ldr	r3, [pc, #280]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d116      	bne.n	8002e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	4b43      	ldr	r3, [pc, #268]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_RCC_OscConfig+0x176>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e1c0      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	4b3d      	ldr	r3, [pc, #244]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4939      	ldr	r1, [pc, #228]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	e03a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d020      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e34:	4b36      	ldr	r3, [pc, #216]	@ (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fe5f 	bl	8001afc <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e42:	f7fe fe5b 	bl	8001afc <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1a1      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	4b2d      	ldr	r3, [pc, #180]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b2a      	ldr	r3, [pc, #168]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4927      	ldr	r1, [pc, #156]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]
 8002e74:	e015      	b.n	8002ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e76:	4b26      	ldr	r3, [pc, #152]	@ (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fe3e 	bl	8001afc <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e84:	f7fe fe3a 	bl	8001afc <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e180      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e96:	4b1d      	ldr	r3, [pc, #116]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03a      	beq.n	8002f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d019      	beq.n	8002eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb6:	4b17      	ldr	r3, [pc, #92]	@ (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fe fe1e 	bl	8001afc <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7fe fe1a 	bl	8001afc <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e160      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f000 faba 	bl	800345c <RCC_Delay>
 8002ee8:	e01c      	b.n	8002f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eea:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fe04 	bl	8001afc <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef6:	e00f      	b.n	8002f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7fe fe00 	bl	8001afc <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d908      	bls.n	8002f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e146      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	42420000 	.word	0x42420000
 8002f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	4b92      	ldr	r3, [pc, #584]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e9      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a6 	beq.w	800307e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f36:	4b8b      	ldr	r3, [pc, #556]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10d      	bne.n	8002f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	4b88      	ldr	r3, [pc, #544]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4a87      	ldr	r2, [pc, #540]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f4c:	61d3      	str	r3, [r2, #28]
 8002f4e:	4b85      	ldr	r3, [pc, #532]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5e:	4b82      	ldr	r3, [pc, #520]	@ (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d118      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f76:	f7fe fdc1 	bl	8001afc <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7e:	f7fe fdbd 	bl	8001afc <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b64      	cmp	r3, #100	@ 0x64
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e103      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f90:	4b75      	ldr	r3, [pc, #468]	@ (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x312>
 8002fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6213      	str	r3, [r2, #32]
 8002fb0:	e02d      	b.n	800300e <HAL_RCC_OscConfig+0x36e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x334>
 8002fba:	4b6a      	ldr	r3, [pc, #424]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a69      	ldr	r2, [pc, #420]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6213      	str	r3, [r2, #32]
 8002fc6:	4b67      	ldr	r3, [pc, #412]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a66      	ldr	r2, [pc, #408]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	6213      	str	r3, [r2, #32]
 8002fd2:	e01c      	b.n	800300e <HAL_RCC_OscConfig+0x36e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d10c      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x356>
 8002fdc:	4b61      	ldr	r3, [pc, #388]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4a60      	ldr	r2, [pc, #384]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	f043 0304 	orr.w	r3, r3, #4
 8002fe6:	6213      	str	r3, [r2, #32]
 8002fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4a5d      	ldr	r2, [pc, #372]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6213      	str	r3, [r2, #32]
 8002ff4:	e00b      	b.n	800300e <HAL_RCC_OscConfig+0x36e>
 8002ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4a5a      	ldr	r2, [pc, #360]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	6213      	str	r3, [r2, #32]
 8003002:	4b58      	ldr	r3, [pc, #352]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a57      	ldr	r2, [pc, #348]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	f023 0304 	bic.w	r3, r3, #4
 800300c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d015      	beq.n	8003042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003016:	f7fe fd71 	bl	8001afc <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301c:	e00a      	b.n	8003034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe fd6d 	bl	8001afc <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e0b1      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003034:	4b4b      	ldr	r3, [pc, #300]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ee      	beq.n	800301e <HAL_RCC_OscConfig+0x37e>
 8003040:	e014      	b.n	800306c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7fe fd5b 	bl	8001afc <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fe fd57 	bl	8001afc <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e09b      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003060:	4b40      	ldr	r3, [pc, #256]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ee      	bne.n	800304a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d105      	bne.n	800307e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003072:	4b3c      	ldr	r3, [pc, #240]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4a3b      	ldr	r2, [pc, #236]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800307c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8087 	beq.w	8003196 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003088:	4b36      	ldr	r3, [pc, #216]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b08      	cmp	r3, #8
 8003092:	d061      	beq.n	8003158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d146      	bne.n	800312a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309c:	4b33      	ldr	r3, [pc, #204]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7fe fd2b 	bl	8001afc <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fe fd27 	bl	8001afc <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e06d      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030bc:	4b29      	ldr	r3, [pc, #164]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f0      	bne.n	80030aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d0:	d108      	bne.n	80030e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030d2:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4921      	ldr	r1, [pc, #132]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a19      	ldr	r1, [r3, #32]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	430b      	orrs	r3, r1
 80030f6:	491b      	ldr	r1, [pc, #108]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fc:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fe fcfb 	bl	8001afc <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310a:	f7fe fcf7 	bl	8001afc <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e03d      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x46a>
 8003128:	e035      	b.n	8003196 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	4b10      	ldr	r3, [pc, #64]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fce4 	bl	8001afc <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fce0 	bl	8001afc <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e026      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314a:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x498>
 8003156:	e01e      	b.n	8003196 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d107      	bne.n	8003170 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e019      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
 8003164:	40021000 	.word	0x40021000
 8003168:	40007000 	.word	0x40007000
 800316c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003170:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <HAL_RCC_OscConfig+0x500>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	429a      	cmp	r2, r3
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d001      	beq.n	8003196 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0d0      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d910      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b67      	ldr	r3, [pc, #412]	@ (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4965      	ldr	r1, [pc, #404]	@ (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	@ (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a58      	ldr	r2, [pc, #352]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800320a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a52      	ldr	r2, [pc, #328]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d040      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d115      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003262:	4b41      	ldr	r3, [pc, #260]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e073      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003272:	4b3d      	ldr	r3, [pc, #244]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e06b      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003282:	4b39      	ldr	r3, [pc, #228]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4936      	ldr	r1, [pc, #216]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003294:	f7fe fc32 	bl	8001afc <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329c:	f7fe fc2e 	bl	8001afc <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e053      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 020c 	and.w	r2, r3, #12
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1eb      	bne.n	800329c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c4:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d210      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 0207 	bic.w	r2, r3, #7
 80032da:	4922      	ldr	r1, [pc, #136]	@ (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800331e:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f821 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	@ (800336c <HAL_RCC_ClockConfig+0x1c8>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <HAL_RCC_ClockConfig+0x1cc>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <HAL_RCC_ClockConfig+0x1d0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fb90 	bl	8001a78 <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40022000 	.word	0x40022000
 8003368:	40021000 	.word	0x40021000
 800336c:	08004ac4 	.word	0x08004ac4
 8003370:	20000014 	.word	0x20000014
 8003374:	20000018 	.word	0x20000018

08003378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003392:	4b1e      	ldr	r3, [pc, #120]	@ (800340c <HAL_RCC_GetSysClockFreq+0x94>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d002      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x30>
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d003      	beq.n	80033ae <HAL_RCC_GetSysClockFreq+0x36>
 80033a6:	e027      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033a8:	4b19      	ldr	r3, [pc, #100]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x98>)
 80033aa:	613b      	str	r3, [r7, #16]
      break;
 80033ac:	e027      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	0c9b      	lsrs	r3, r3, #18
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	4a17      	ldr	r2, [pc, #92]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033b8:	5cd3      	ldrb	r3, [r2, r3]
 80033ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d010      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033c6:	4b11      	ldr	r3, [pc, #68]	@ (800340c <HAL_RCC_GetSysClockFreq+0x94>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0c5b      	lsrs	r3, r3, #17
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	4a11      	ldr	r2, [pc, #68]	@ (8003418 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x98>)
 80033da:	fb03 f202 	mul.w	r2, r3, r2
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e004      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a0c      	ldr	r2, [pc, #48]	@ (800341c <HAL_RCC_GetSysClockFreq+0xa4>)
 80033ec:	fb02 f303 	mul.w	r3, r2, r3
 80033f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	613b      	str	r3, [r7, #16]
      break;
 80033f6:	e002      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x98>)
 80033fa:	613b      	str	r3, [r7, #16]
      break;
 80033fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fe:	693b      	ldr	r3, [r7, #16]
}
 8003400:	4618      	mov	r0, r3
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	007a1200 	.word	0x007a1200
 8003414:	08004adc 	.word	0x08004adc
 8003418:	08004aec 	.word	0x08004aec
 800341c:	003d0900 	.word	0x003d0900

08003420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b02      	ldr	r3, [pc, #8]	@ (8003430 <HAL_RCC_GetHCLKFreq+0x10>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	20000014 	.word	0x20000014

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003438:	f7ff fff2 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4903      	ldr	r1, [pc, #12]	@ (8003458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	08004ad4 	.word	0x08004ad4

0800345c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003464:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <RCC_Delay+0x34>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <RCC_Delay+0x38>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	0a5b      	lsrs	r3, r3, #9
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003478:	bf00      	nop
  }
  while (Delay --);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	60fa      	str	r2, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f9      	bne.n	8003478 <RCC_Delay+0x1c>
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	20000014 	.word	0x20000014
 8003494:	10624dd3 	.word	0x10624dd3

08003498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e041      	b.n	800352e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe f9b6 	bl	8001830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f000 fafc 	bl	8003ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d001      	beq.n	8003550 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a18      	ldr	r2, [pc, #96]	@ (80035c0 <HAL_TIM_Base_Start+0x88>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00e      	beq.n	8003580 <HAL_TIM_Base_Start+0x48>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356a:	d009      	beq.n	8003580 <HAL_TIM_Base_Start+0x48>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a14      	ldr	r2, [pc, #80]	@ (80035c4 <HAL_TIM_Base_Start+0x8c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_TIM_Base_Start+0x48>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a13      	ldr	r2, [pc, #76]	@ (80035c8 <HAL_TIM_Base_Start+0x90>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d111      	bne.n	80035a4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b06      	cmp	r3, #6
 8003590:	d010      	beq.n	80035b4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a2:	e007      	b.n	80035b4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800

080035cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e041      	b.n	8003662 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f839 	bl	800366a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	4619      	mov	r1, r3
 800360a:	4610      	mov	r0, r2
 800360c:	f000 fa62 	bl	8003ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_TIM_PWM_Start+0x24>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e022      	b.n	80036e6 <HAL_TIM_PWM_Start+0x6a>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d109      	bne.n	80036ba <HAL_TIM_PWM_Start+0x3e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	bf14      	ite	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	2300      	moveq	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	e015      	b.n	80036e6 <HAL_TIM_PWM_Start+0x6a>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d109      	bne.n	80036d4 <HAL_TIM_PWM_Start+0x58>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e008      	b.n	80036e6 <HAL_TIM_PWM_Start+0x6a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e05e      	b.n	80037ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_PWM_Start+0x82>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036fc:	e013      	b.n	8003726 <HAL_TIM_PWM_Start+0xaa>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d104      	bne.n	800370e <HAL_TIM_PWM_Start+0x92>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800370c:	e00b      	b.n	8003726 <HAL_TIM_PWM_Start+0xaa>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d104      	bne.n	800371e <HAL_TIM_PWM_Start+0xa2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800371c:	e003      	b.n	8003726 <HAL_TIM_PWM_Start+0xaa>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	6839      	ldr	r1, [r7, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fc50 	bl	8003fd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1e      	ldr	r2, [pc, #120]	@ (80037b4 <HAL_TIM_PWM_Start+0x138>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d107      	bne.n	800374e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800374c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a18      	ldr	r2, [pc, #96]	@ (80037b4 <HAL_TIM_PWM_Start+0x138>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_TIM_PWM_Start+0xfa>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003760:	d009      	beq.n	8003776 <HAL_TIM_PWM_Start+0xfa>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a14      	ldr	r2, [pc, #80]	@ (80037b8 <HAL_TIM_PWM_Start+0x13c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_TIM_PWM_Start+0xfa>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a12      	ldr	r2, [pc, #72]	@ (80037bc <HAL_TIM_PWM_Start+0x140>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d111      	bne.n	800379a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b06      	cmp	r3, #6
 8003786:	d010      	beq.n	80037aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003798:	e007      	b.n	80037aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800

080037c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037da:	2302      	movs	r3, #2
 80037dc:	e0ae      	b.n	800393c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b0c      	cmp	r3, #12
 80037ea:	f200 809f 	bhi.w	800392c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037ee:	a201      	add	r2, pc, #4	@ (adr r2, 80037f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	08003829 	.word	0x08003829
 80037f8:	0800392d 	.word	0x0800392d
 80037fc:	0800392d 	.word	0x0800392d
 8003800:	0800392d 	.word	0x0800392d
 8003804:	08003869 	.word	0x08003869
 8003808:	0800392d 	.word	0x0800392d
 800380c:	0800392d 	.word	0x0800392d
 8003810:	0800392d 	.word	0x0800392d
 8003814:	080038ab 	.word	0x080038ab
 8003818:	0800392d 	.word	0x0800392d
 800381c:	0800392d 	.word	0x0800392d
 8003820:	0800392d 	.word	0x0800392d
 8003824:	080038eb 	.word	0x080038eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f9b2 	bl	8003b98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0208 	orr.w	r2, r2, #8
 8003842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0204 	bic.w	r2, r2, #4
 8003852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6999      	ldr	r1, [r3, #24]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	619a      	str	r2, [r3, #24]
      break;
 8003866:	e064      	b.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f9f8 	bl	8003c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6999      	ldr	r1, [r3, #24]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	021a      	lsls	r2, r3, #8
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	619a      	str	r2, [r3, #24]
      break;
 80038a8:	e043      	b.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fa41 	bl	8003d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0208 	orr.w	r2, r2, #8
 80038c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0204 	bic.w	r2, r2, #4
 80038d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69d9      	ldr	r1, [r3, #28]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	61da      	str	r2, [r3, #28]
      break;
 80038e8:	e023      	b.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fa8b 	bl	8003e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69d9      	ldr	r1, [r3, #28]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	021a      	lsls	r2, r3, #8
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	61da      	str	r2, [r3, #28]
      break;
 800392a:	e002      	b.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	75fb      	strb	r3, [r7, #23]
      break;
 8003930:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800393a:	7dfb      	ldrb	r3, [r7, #23]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_TIM_ConfigClockSource+0x1c>
 800395c:	2302      	movs	r3, #2
 800395e:	e0b4      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x186>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800397e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003998:	d03e      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0xd4>
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800399e:	f200 8087 	bhi.w	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039a6:	f000 8086 	beq.w	8003ab6 <HAL_TIM_ConfigClockSource+0x172>
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ae:	d87f      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039b0:	2b70      	cmp	r3, #112	@ 0x70
 80039b2:	d01a      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0xa6>
 80039b4:	2b70      	cmp	r3, #112	@ 0x70
 80039b6:	d87b      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039b8:	2b60      	cmp	r3, #96	@ 0x60
 80039ba:	d050      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x11a>
 80039bc:	2b60      	cmp	r3, #96	@ 0x60
 80039be:	d877      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039c0:	2b50      	cmp	r3, #80	@ 0x50
 80039c2:	d03c      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0xfa>
 80039c4:	2b50      	cmp	r3, #80	@ 0x50
 80039c6:	d873      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	d058      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x13a>
 80039cc:	2b40      	cmp	r3, #64	@ 0x40
 80039ce:	d86f      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039d0:	2b30      	cmp	r3, #48	@ 0x30
 80039d2:	d064      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15a>
 80039d4:	2b30      	cmp	r3, #48	@ 0x30
 80039d6:	d86b      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d060      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15a>
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d867      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05c      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15a>
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d05a      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x15a>
 80039e8:	e062      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039fa:	f000 facc 	bl	8003f96 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	609a      	str	r2, [r3, #8]
      break;
 8003a16:	e04f      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a28:	f000 fab5 	bl	8003f96 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a3a:	609a      	str	r2, [r3, #8]
      break;
 8003a3c:	e03c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f000 fa2c 	bl	8003ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2150      	movs	r1, #80	@ 0x50
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fa83 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e02c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f000 fa4a 	bl	8003f04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2160      	movs	r1, #96	@ 0x60
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fa73 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003a7c:	e01c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f000 fa0c 	bl	8003ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2140      	movs	r1, #64	@ 0x40
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fa63 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e00c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f000 fa5a 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003aae:	e003      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab4:	e000      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a29      	ldr	r2, [pc, #164]	@ (8003b8c <TIM_Base_SetConfig+0xb8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00b      	beq.n	8003b04 <TIM_Base_SetConfig+0x30>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af2:	d007      	beq.n	8003b04 <TIM_Base_SetConfig+0x30>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a26      	ldr	r2, [pc, #152]	@ (8003b90 <TIM_Base_SetConfig+0xbc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_Base_SetConfig+0x30>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a25      	ldr	r2, [pc, #148]	@ (8003b94 <TIM_Base_SetConfig+0xc0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d108      	bne.n	8003b16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <TIM_Base_SetConfig+0xb8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_Base_SetConfig+0x62>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b24:	d007      	beq.n	8003b36 <TIM_Base_SetConfig+0x62>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a19      	ldr	r2, [pc, #100]	@ (8003b90 <TIM_Base_SetConfig+0xbc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_Base_SetConfig+0x62>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a18      	ldr	r2, [pc, #96]	@ (8003b94 <TIM_Base_SetConfig+0xc0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d108      	bne.n	8003b48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a07      	ldr	r2, [pc, #28]	@ (8003b8c <TIM_Base_SetConfig+0xb8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d103      	bne.n	8003b7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	615a      	str	r2, [r3, #20]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40000800 	.word	0x40000800

08003b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f023 0201 	bic.w	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 0302 	bic.w	r3, r3, #2
 8003be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a1c      	ldr	r2, [pc, #112]	@ (8003c60 <TIM_OC1_SetConfig+0xc8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10c      	bne.n	8003c0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0308 	bic.w	r3, r3, #8
 8003bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a13      	ldr	r2, [pc, #76]	@ (8003c60 <TIM_OC1_SetConfig+0xc8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d111      	bne.n	8003c3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40012c00 	.word	0x40012c00

08003c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f023 0210 	bic.w	r2, r3, #16
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0320 	bic.w	r3, r3, #32
 8003cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003d34 <TIM_OC2_SetConfig+0xd0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10d      	bne.n	8003ce0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <TIM_OC2_SetConfig+0xd0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d113      	bne.n	8003d10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	40012c00 	.word	0x40012c00

08003d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1d      	ldr	r2, [pc, #116]	@ (8003e08 <TIM_OC3_SetConfig+0xd0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10d      	bne.n	8003db2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a14      	ldr	r2, [pc, #80]	@ (8003e08 <TIM_OC3_SetConfig+0xd0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d113      	bne.n	8003de2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	621a      	str	r2, [r3, #32]
}
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40012c00 	.word	0x40012c00

08003e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	031b      	lsls	r3, r3, #12
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea4 <TIM_OC4_SetConfig+0x98>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d109      	bne.n	8003e80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	40012c00 	.word	0x40012c00

08003ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f023 030a 	bic.w	r3, r3, #10
 8003ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	621a      	str	r2, [r3, #32]
}
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0210 	bic.w	r2, r3, #16
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	031b      	lsls	r3, r3, #12
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	621a      	str	r2, [r3, #32]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f043 0307 	orr.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	609a      	str	r2, [r3, #8]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b087      	sub	sp, #28
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	021a      	lsls	r2, r3, #8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	609a      	str	r2, [r3, #8]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr

08003fd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a1a      	ldr	r2, [r3, #32]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	431a      	orrs	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004030:	2302      	movs	r3, #2
 8004032:	e046      	b.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800405a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004080:	d009      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a12      	ldr	r2, [pc, #72]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a10      	ldr	r2, [pc, #64]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10c      	bne.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800409c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800

080040d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e03d      	b.n	8004170 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <__itoa>:
 800417a:	1e93      	subs	r3, r2, #2
 800417c:	2b22      	cmp	r3, #34	@ 0x22
 800417e:	b510      	push	{r4, lr}
 8004180:	460c      	mov	r4, r1
 8004182:	d904      	bls.n	800418e <__itoa+0x14>
 8004184:	2300      	movs	r3, #0
 8004186:	461c      	mov	r4, r3
 8004188:	700b      	strb	r3, [r1, #0]
 800418a:	4620      	mov	r0, r4
 800418c:	bd10      	pop	{r4, pc}
 800418e:	2a0a      	cmp	r2, #10
 8004190:	d109      	bne.n	80041a6 <__itoa+0x2c>
 8004192:	2800      	cmp	r0, #0
 8004194:	da07      	bge.n	80041a6 <__itoa+0x2c>
 8004196:	232d      	movs	r3, #45	@ 0x2d
 8004198:	700b      	strb	r3, [r1, #0]
 800419a:	2101      	movs	r1, #1
 800419c:	4240      	negs	r0, r0
 800419e:	4421      	add	r1, r4
 80041a0:	f000 f806 	bl	80041b0 <__utoa>
 80041a4:	e7f1      	b.n	800418a <__itoa+0x10>
 80041a6:	2100      	movs	r1, #0
 80041a8:	e7f9      	b.n	800419e <__itoa+0x24>

080041aa <itoa>:
 80041aa:	f7ff bfe6 	b.w	800417a <__itoa>
	...

080041b0 <__utoa>:
 80041b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b2:	b08b      	sub	sp, #44	@ 0x2c
 80041b4:	4605      	mov	r5, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	466e      	mov	r6, sp
 80041ba:	4c1d      	ldr	r4, [pc, #116]	@ (8004230 <__utoa+0x80>)
 80041bc:	f104 0c20 	add.w	ip, r4, #32
 80041c0:	4637      	mov	r7, r6
 80041c2:	6820      	ldr	r0, [r4, #0]
 80041c4:	6861      	ldr	r1, [r4, #4]
 80041c6:	3408      	adds	r4, #8
 80041c8:	c703      	stmia	r7!, {r0, r1}
 80041ca:	4564      	cmp	r4, ip
 80041cc:	463e      	mov	r6, r7
 80041ce:	d1f7      	bne.n	80041c0 <__utoa+0x10>
 80041d0:	7921      	ldrb	r1, [r4, #4]
 80041d2:	6820      	ldr	r0, [r4, #0]
 80041d4:	7139      	strb	r1, [r7, #4]
 80041d6:	1e91      	subs	r1, r2, #2
 80041d8:	2922      	cmp	r1, #34	@ 0x22
 80041da:	6038      	str	r0, [r7, #0]
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	d904      	bls.n	80041ec <__utoa+0x3c>
 80041e2:	7019      	strb	r1, [r3, #0]
 80041e4:	460b      	mov	r3, r1
 80041e6:	4618      	mov	r0, r3
 80041e8:	b00b      	add	sp, #44	@ 0x2c
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ec:	1e58      	subs	r0, r3, #1
 80041ee:	4684      	mov	ip, r0
 80041f0:	fbb5 f7f2 	udiv	r7, r5, r2
 80041f4:	fb02 5617 	mls	r6, r2, r7, r5
 80041f8:	3628      	adds	r6, #40	@ 0x28
 80041fa:	446e      	add	r6, sp
 80041fc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004200:	460c      	mov	r4, r1
 8004202:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004206:	462e      	mov	r6, r5
 8004208:	42b2      	cmp	r2, r6
 800420a:	463d      	mov	r5, r7
 800420c:	f101 0101 	add.w	r1, r1, #1
 8004210:	d9ee      	bls.n	80041f0 <__utoa+0x40>
 8004212:	2200      	movs	r2, #0
 8004214:	545a      	strb	r2, [r3, r1]
 8004216:	1919      	adds	r1, r3, r4
 8004218:	1aa5      	subs	r5, r4, r2
 800421a:	42aa      	cmp	r2, r5
 800421c:	dae3      	bge.n	80041e6 <__utoa+0x36>
 800421e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004222:	780e      	ldrb	r6, [r1, #0]
 8004224:	3201      	adds	r2, #1
 8004226:	7006      	strb	r6, [r0, #0]
 8004228:	f801 5901 	strb.w	r5, [r1], #-1
 800422c:	e7f4      	b.n	8004218 <__utoa+0x68>
 800422e:	bf00      	nop
 8004230:	08004aee 	.word	0x08004aee

08004234 <memset>:
 8004234:	4603      	mov	r3, r0
 8004236:	4402      	add	r2, r0
 8004238:	4293      	cmp	r3, r2
 800423a:	d100      	bne.n	800423e <memset+0xa>
 800423c:	4770      	bx	lr
 800423e:	f803 1b01 	strb.w	r1, [r3], #1
 8004242:	e7f9      	b.n	8004238 <memset+0x4>

08004244 <__libc_init_array>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	2600      	movs	r6, #0
 8004248:	4d0c      	ldr	r5, [pc, #48]	@ (800427c <__libc_init_array+0x38>)
 800424a:	4c0d      	ldr	r4, [pc, #52]	@ (8004280 <__libc_init_array+0x3c>)
 800424c:	1b64      	subs	r4, r4, r5
 800424e:	10a4      	asrs	r4, r4, #2
 8004250:	42a6      	cmp	r6, r4
 8004252:	d109      	bne.n	8004268 <__libc_init_array+0x24>
 8004254:	f000 f81a 	bl	800428c <_init>
 8004258:	2600      	movs	r6, #0
 800425a:	4d0a      	ldr	r5, [pc, #40]	@ (8004284 <__libc_init_array+0x40>)
 800425c:	4c0a      	ldr	r4, [pc, #40]	@ (8004288 <__libc_init_array+0x44>)
 800425e:	1b64      	subs	r4, r4, r5
 8004260:	10a4      	asrs	r4, r4, #2
 8004262:	42a6      	cmp	r6, r4
 8004264:	d105      	bne.n	8004272 <__libc_init_array+0x2e>
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	f855 3b04 	ldr.w	r3, [r5], #4
 800426c:	4798      	blx	r3
 800426e:	3601      	adds	r6, #1
 8004270:	e7ee      	b.n	8004250 <__libc_init_array+0xc>
 8004272:	f855 3b04 	ldr.w	r3, [r5], #4
 8004276:	4798      	blx	r3
 8004278:	3601      	adds	r6, #1
 800427a:	e7f2      	b.n	8004262 <__libc_init_array+0x1e>
 800427c:	08004b14 	.word	0x08004b14
 8004280:	08004b14 	.word	0x08004b14
 8004284:	08004b14 	.word	0x08004b14
 8004288:	08004b18 	.word	0x08004b18

0800428c <_init>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr

08004298 <_fini>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	bf00      	nop
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr
