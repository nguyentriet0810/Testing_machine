
MAIN_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  08005d58  08005d58  00006d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066ec  080066ec  0000807c  2**0
                  CONTENTS
  4 .ARM          00000008  080066ec  080066ec  000076ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f4  080066f4  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f4  080066f4  000076f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066f8  080066f8  000076f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080066fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  2000007c  08006778  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08006778  00008778  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f69e  00000000  00000000  000080a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002189  00000000  00000000  00017743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  000198d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c54  00000000  00000000  0001a858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018431  00000000  00000000  0001b4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126b6  00000000  00000000  000338dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d327  00000000  00000000  00045f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d32ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004888  00000000  00000000  000d3300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000d7b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005d40 	.word	0x08005d40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08005d40 	.word	0x08005d40

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay(uint16_t time)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <microDelay+0x2c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < time);
 8000676:	bf00      	nop
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <microDelay+0x2c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	429a      	cmp	r2, r3
 8000682:	d3f9      	bcc.n	8000678 <microDelay+0x14>
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	20000134 	.word	0x20000134

08000694 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if (HAL_GPIO_ReadPin(START_STOP_GPIO_Port, START_STOP_Pin) == 0) {
 800069c:	2101      	movs	r1, #1
 800069e:	482f      	ldr	r0, [pc, #188]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80006a0:	f002 fa1e 	bl	8002ae0 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d12c      	bne.n	8000704 <HAL_TIM_PeriodElapsedCallback+0x70>
  	  if (HAL_GPIO_ReadPin(START_STOP_GPIO_Port, START_STOP_Pin) == 0){
 80006aa:	2101      	movs	r1, #1
 80006ac:	482b      	ldr	r0, [pc, #172]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80006ae:	f002 fa17 	bl	8002ae0 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d11c      	bne.n	80006f2 <HAL_TIM_PeriodElapsedCallback+0x5e>
  		  if (counter < 9){
 80006b8:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b08      	cmp	r3, #8
 80006be:	d806      	bhi.n	80006ce <HAL_TIM_PeriodElapsedCallback+0x3a>
  			  counter++;
 80006c0:	4b27      	ldr	r3, [pc, #156]	@ (8000760 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	e011      	b.n	80006f2 <HAL_TIM_PeriodElapsedCallback+0x5e>
  		  }
  		  else{
  			  status = 1;
 80006ce:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	701a      	strb	r2, [r3, #0]
  			  if (status == 1){
 80006d4:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d10a      	bne.n	80006f2 <HAL_TIM_PeriodElapsedCallback+0x5e>
  				  SSD1306_GotoXY (56, 11);
 80006dc:	210b      	movs	r1, #11
 80006de:	2038      	movs	r0, #56	@ 0x38
 80006e0:	f001 fbb8 	bl	8001e54 <SSD1306_GotoXY>
  				  SSD1306_Puts ("START    ", &Font_7x10, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	4920      	ldr	r1, [pc, #128]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006e8:	4820      	ldr	r0, [pc, #128]	@ (800076c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80006ea:	f001 fc47 	bl	8001f7c <SSD1306_Puts>
  				  SSD1306_UpdateScreen();
 80006ee:	f001 fb0d 	bl	8001d0c <SSD1306_UpdateScreen>
  			  }
  		  }
  	  }
  	  while (HAL_GPIO_ReadPin(START_STOP_GPIO_Port, START_STOP_Pin) == 0){};
 80006f2:	bf00      	nop
 80006f4:	2101      	movs	r1, #1
 80006f6:	4819      	ldr	r0, [pc, #100]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80006f8:	f002 f9f2 	bl	8002ae0 <HAL_GPIO_ReadPin>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d0f8      	beq.n	80006f4 <HAL_TIM_PeriodElapsedCallback+0x60>
  	 			SSD1306_UpdateScreen();
  	 		}
  	 	}
  	 	while (HAL_GPIO_ReadPin(EMERGENCY_GPIO_Port, EMERGENCY_Pin) == 0){};
    }
}
 8000702:	e027      	b.n	8000754 <HAL_TIM_PeriodElapsedCallback+0xc0>
    else if (HAL_GPIO_ReadPin(EMERGENCY_GPIO_Port, EMERGENCY_Pin) == 0) {
 8000704:	2102      	movs	r1, #2
 8000706:	4815      	ldr	r0, [pc, #84]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000708:	f002 f9ea 	bl	8002ae0 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d120      	bne.n	8000754 <HAL_TIM_PeriodElapsedCallback+0xc0>
    	if (HAL_GPIO_ReadPin(EMERGENCY_GPIO_Port, EMERGENCY_Pin) == 0){
 8000712:	2102      	movs	r1, #2
 8000714:	4811      	ldr	r0, [pc, #68]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000716:	f002 f9e3 	bl	8002ae0 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d111      	bne.n	8000744 <HAL_TIM_PeriodElapsedCallback+0xb0>
    		if (counter > 7) {
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b07      	cmp	r3, #7
 8000726:	d90d      	bls.n	8000744 <HAL_TIM_PeriodElapsedCallback+0xb0>
  	 			status = 2;
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800072a:	2202      	movs	r2, #2
 800072c:	701a      	strb	r2, [r3, #0]
  	 			SSD1306_GotoXY (56, 11);
 800072e:	210b      	movs	r1, #11
 8000730:	2038      	movs	r0, #56	@ 0x38
 8000732:	f001 fb8f 	bl	8001e54 <SSD1306_GotoXY>
  	 			SSD1306_Puts ("E_STOP     ", &Font_7x10, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	490b      	ldr	r1, [pc, #44]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800073a:	480d      	ldr	r0, [pc, #52]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800073c:	f001 fc1e 	bl	8001f7c <SSD1306_Puts>
  	 			SSD1306_UpdateScreen();
 8000740:	f001 fae4 	bl	8001d0c <SSD1306_UpdateScreen>
  	 	while (HAL_GPIO_ReadPin(EMERGENCY_GPIO_Port, EMERGENCY_Pin) == 0){};
 8000744:	bf00      	nop
 8000746:	2102      	movs	r1, #2
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800074a:	f002 f9c9 	bl	8002ae0 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0f8      	beq.n	8000746 <HAL_TIM_PeriodElapsedCallback+0xb2>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40010800 	.word	0x40010800
 8000760:	2000020c 	.word	0x2000020c
 8000764:	2000020d 	.word	0x2000020d
 8000768:	20000000 	.word	0x20000000
 800076c:	08005d58 	.word	0x08005d58
 8000770:	08005d64 	.word	0x08005d64

08000774 <getHX711>:

int32_t getHX711(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 800077e:	f001 feef 	bl	8002560 <HAL_GetTick>
 8000782:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000784:	e008      	b.n	8000798 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 8000786:	f001 feeb 	bl	8002560 <HAL_GetTick>
 800078a:	4602      	mov	r2, r0
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	2bc8      	cmp	r3, #200	@ 0xc8
 8000792:	d901      	bls.n	8000798 <getHX711+0x24>
      return 0;
 8000794:	2300      	movs	r3, #0
 8000796:	e04b      	b.n	8000830 <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000798:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079c:	4826      	ldr	r0, [pc, #152]	@ (8000838 <getHX711+0xc4>)
 800079e:	f002 f99f 	bl	8002ae0 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d0ee      	beq.n	8000786 <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	72fb      	strb	r3, [r7, #11]
 80007ac:	e025      	b.n	80007fa <getHX711+0x86>
  {
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007b4:	4820      	ldr	r0, [pc, #128]	@ (8000838 <getHX711+0xc4>)
 80007b6:	f002 f9aa 	bl	8002b0e <HAL_GPIO_WritePin>
    microDelay(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff ff52 	bl	8000664 <microDelay>
    data = data << 1;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007cc:	481a      	ldr	r0, [pc, #104]	@ (8000838 <getHX711+0xc4>)
 80007ce:	f002 f99e 	bl	8002b0e <HAL_GPIO_WritePin>
    microDelay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff ff46 	bl	8000664 <microDelay>
    if(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 80007d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007dc:	4816      	ldr	r0, [pc, #88]	@ (8000838 <getHX711+0xc4>)
 80007de:	f002 f97f 	bl	8002ae0 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d102      	bne.n	80007ee <getHX711+0x7a>
      data ++;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 80007ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	3301      	adds	r3, #1
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	72fb      	strb	r3, [r7, #11]
 80007fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80007fe:	2b17      	cmp	r3, #23
 8000800:	ddd5      	ble.n	80007ae <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8000808:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000810:	4809      	ldr	r0, [pc, #36]	@ (8000838 <getHX711+0xc4>)
 8000812:	f002 f97c 	bl	8002b0e <HAL_GPIO_WritePin>
  microDelay(1);
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff ff24 	bl	8000664 <microDelay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <getHX711+0xc4>)
 8000824:	f002 f973 	bl	8002b0e <HAL_GPIO_WritePin>
  microDelay(1);
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff ff1b 	bl	8000664 <microDelay>
  return data;
 800082e:	68fb      	ldr	r3, [r7, #12]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40010c00 	.word	0x40010c00

0800083c <weigh>:

int weigh()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
  int32_t  total = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  int32_t  samples = 50;
 8000846:	2332      	movs	r3, #50	@ 0x32
 8000848:	60fb      	str	r3, [r7, #12]
  int milligram;
  float coefficient;
  for(uint16_t i = 0 ; i < samples ; i++)
 800084a:	2300      	movs	r3, #0
 800084c:	827b      	strh	r3, [r7, #18]
 800084e:	e008      	b.n	8000862 <weigh+0x26>
  {
      total += getHX711();
 8000850:	f7ff ff90 	bl	8000774 <getHX711>
 8000854:	4602      	mov	r2, r0
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	617b      	str	r3, [r7, #20]
  for(uint16_t i = 0 ; i < samples ; i++)
 800085c:	8a7b      	ldrh	r3, [r7, #18]
 800085e:	3301      	adds	r3, #1
 8000860:	827b      	strh	r3, [r7, #18]
 8000862:	8a7b      	ldrh	r3, [r7, #18]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	429a      	cmp	r2, r3
 8000868:	dcf2      	bgt.n	8000850 <weigh+0x14>
  }
  int32_t average = (int32_t)(total / samples);
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000872:	60bb      	str	r3, [r7, #8]
  coefficient = knownOriginal / knownHX711;
 8000874:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <weigh+0x7c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a10      	ldr	r2, [pc, #64]	@ (80008bc <weigh+0x80>)
 800087a:	6812      	ldr	r2, [r2, #0]
 800087c:	4611      	mov	r1, r2
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe2e 	bl	80004e0 <__aeabi_fdiv>
 8000884:	4603      	mov	r3, r0
 8000886:	607b      	str	r3, [r7, #4]
  milligram = (int)(average-tare)*coefficient;
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <weigh+0x84>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fd1d 	bl	80002d0 <__aeabi_i2f>
 8000896:	4603      	mov	r3, r0
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd6c 	bl	8000378 <__aeabi_fmul>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff feb8 	bl	8000618 <__aeabi_f2iz>
 80008a8:	4603      	mov	r3, r0
 80008aa:	603b      	str	r3, [r7, #0]
  return milligram;
 80008ac:	683b      	ldr	r3, [r7, #0]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000014 	.word	0x20000014
 80008bc:	20000018 	.word	0x20000018
 80008c0:	20000010 	.word	0x20000010

080008c4 <getForce>:

int getForce(){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
	int32_t ratio;
	float Force;
	float ConfigForce;
	for (int y = 0; y < 3; y++){
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	e00a      	b.n	80008e6 <getForce+0x22>
		weight = weigh() - offset; // in milligram
 80008d0:	f7ff ffb4 	bl	800083c <weigh>
 80008d4:	4602      	mov	r2, r0
 80008d6:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <getForce+0xa0>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	4a22      	ldr	r2, [pc, #136]	@ (8000968 <getForce+0xa4>)
 80008de:	6013      	str	r3, [r2, #0]
	for (int y = 0; y < 3; y++){
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	3301      	adds	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	ddf1      	ble.n	80008d0 <getForce+0xc>
	}
	Force = weight / 1000;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <getForce+0xa4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a1e      	ldr	r2, [pc, #120]	@ (800096c <getForce+0xa8>)
 80008f2:	fb82 1203 	smull	r1, r2, r2, r3
 80008f6:	1192      	asrs	r2, r2, #6
 80008f8:	17db      	asrs	r3, r3, #31
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fce7 	bl	80002d0 <__aeabi_i2f>
 8000902:	4603      	mov	r3, r0
 8000904:	60bb      	str	r3, [r7, #8]
	ratio = (Force*100)/knownOriginalForce;
 8000906:	491a      	ldr	r1, [pc, #104]	@ (8000970 <getForce+0xac>)
 8000908:	68b8      	ldr	r0, [r7, #8]
 800090a:	f7ff fd35 	bl	8000378 <__aeabi_fmul>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <getForce+0xb0>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	4610      	mov	r0, r2
 800091a:	f7ff fde1 	bl	80004e0 <__aeabi_fdiv>
 800091e:	4603      	mov	r3, r0
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe79 	bl	8000618 <__aeabi_f2iz>
 8000926:	4603      	mov	r3, r0
 8000928:	607b      	str	r3, [r7, #4]
	ConfigForce = Force + ratio*offset/100000;
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <getForce+0xa0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <getForce+0xb4>)
 8000936:	fb82 1203 	smull	r1, r2, r2, r3
 800093a:	1352      	asrs	r2, r2, #13
 800093c:	17db      	asrs	r3, r3, #31
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fcc5 	bl	80002d0 <__aeabi_i2f>
 8000946:	4603      	mov	r3, r0
 8000948:	4619      	mov	r1, r3
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	f7ff fc0c 	bl	8000168 <__addsf3>
 8000950:	4603      	mov	r3, r0
 8000952:	603b      	str	r3, [r7, #0]
	return ConfigForce;
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f7ff fe5f 	bl	8000618 <__aeabi_f2iz>
 800095a:	4603      	mov	r3, r0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000218 	.word	0x20000218
 8000968:	20000214 	.word	0x20000214
 800096c:	10624dd3 	.word	0x10624dd3
 8000970:	42c80000 	.word	0x42c80000
 8000974:	2000001c 	.word	0x2000001c
 8000978:	14f8b589 	.word	0x14f8b589

0800097c <send_values>:

void send_values(uint32_t value1, uint32_t value2, uint32_t value3) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b08e      	sub	sp, #56	@ 0x38
 8000980:	af02      	add	r7, sp, #8
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
    char buffer[25]; // Buffer to hold the formatted string

    // Format the string: "value1,value2,value3\n"
    sprintf(buffer, "%lu,%lu,%lu\n", value1, value2, value3);
 8000988:	f107 0014 	add.w	r0, r7, #20
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	4909      	ldr	r1, [pc, #36]	@ (80009bc <send_values+0x40>)
 8000996:	f004 fd23 	bl	80053e0 <siprintf>

    // Transmit the string over USART3
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 15);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fbd4 	bl	800014c <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f107 0114 	add.w	r1, r7, #20
 80009ac:	230f      	movs	r3, #15
 80009ae:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <send_values+0x44>)
 80009b0:	f004 fae5 	bl	8004f7e <HAL_UART_Transmit>
}
 80009b4:	bf00      	nop
 80009b6:	3730      	adds	r7, #48	@ 0x30
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	08005d70 	.word	0x08005d70
 80009c0:	200001c4 	.word	0x200001c4

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ca:	f001 fd71 	bl	80024b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ce:	f000 fde7 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f000 ffbd 	bl	8001950 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009d6:	f000 fe29 	bl	800162c <MX_I2C1_Init>
  MX_TIM1_Init();
 80009da:	f000 fe55 	bl	8001688 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009de:	f000 fef3 	bl	80017c8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80009e2:	f000 ff3d 	bl	8001860 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80009e6:	f000 ff89 	bl	80018fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009ea:	2108      	movs	r1, #8
 80009ec:	48b9      	ldr	r0, [pc, #740]	@ (8000cd4 <main+0x310>)
 80009ee:	f003 fbc5 	bl	800417c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 80009f2:	48b9      	ldr	r0, [pc, #740]	@ (8000cd8 <main+0x314>)
 80009f4:	f003 face 	bl	8003f94 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80009f8:	48b8      	ldr	r0, [pc, #736]	@ (8000cdc <main+0x318>)
 80009fa:	f003 fb15 	bl	8004028 <HAL_TIM_Base_Start_IT>

  SSD1306_Init();
 80009fe:	f001 f8c1 	bl	8001b84 <SSD1306_Init>

  char sum[5];

  HAL_Delay (10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f001 fdb6 	bl	8002574 <HAL_Delay>


  SSD1306_GotoXY (0,0);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f001 fa22 	bl	8001e54 <SSD1306_GotoXY>
  SSD1306_Puts ("PROGRAMMED", &Font_7x10, 1);
 8000a10:	2201      	movs	r2, #1
 8000a12:	49b3      	ldr	r1, [pc, #716]	@ (8000ce0 <main+0x31c>)
 8000a14:	48b3      	ldr	r0, [pc, #716]	@ (8000ce4 <main+0x320>)
 8000a16:	f001 fab1 	bl	8001f7c <SSD1306_Puts>
  SSD1306_GotoXY (11, 20);
 8000a1a:	2114      	movs	r1, #20
 8000a1c:	200b      	movs	r0, #11
 8000a1e:	f001 fa19 	bl	8001e54 <SSD1306_GotoXY>
  SSD1306_Puts ("BY TRIET NGUYEN", &Font_7x10, 1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	49ae      	ldr	r1, [pc, #696]	@ (8000ce0 <main+0x31c>)
 8000a26:	48b0      	ldr	r0, [pc, #704]	@ (8000ce8 <main+0x324>)
 8000a28:	f001 faa8 	bl	8001f7c <SSD1306_Puts>
  SSD1306_GotoXY (0, 40);
 8000a2c:	2128      	movs	r1, #40	@ 0x28
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f001 fa10 	bl	8001e54 <SSD1306_GotoXY>
  SSD1306_Puts ("STARTING.......", &Font_7x10, 1);
 8000a34:	2201      	movs	r2, #1
 8000a36:	49aa      	ldr	r1, [pc, #680]	@ (8000ce0 <main+0x31c>)
 8000a38:	48ac      	ldr	r0, [pc, #688]	@ (8000cec <main+0x328>)
 8000a3a:	f001 fa9f 	bl	8001f7c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000a3e:	f001 f965 	bl	8001d0c <SSD1306_UpdateScreen>
  SSD1306_ScrollRight(0,7);
 8000a42:	2107      	movs	r1, #7
 8000a44:	2000      	movs	r0, #0
 8000a46:	f001 f827 	bl	8001a98 <SSD1306_ScrollRight>
  HAL_Delay(3000);
 8000a4a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a4e:	f001 fd91 	bl	8002574 <HAL_Delay>
  SSD1306_ScrollLeft(0,7);
 8000a52:	2107      	movs	r1, #7
 8000a54:	2000      	movs	r0, #0
 8000a56:	f001 f855 	bl	8001b04 <SSD1306_ScrollLeft>
  HAL_Delay(3000);
 8000a5a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a5e:	f001 fd89 	bl	8002574 <HAL_Delay>
  SSD1306_Stopscroll();
 8000a62:	f001 f885 	bl	8001b70 <SSD1306_Stopscroll>
  SSD1306_Clear();
 8000a66:	f001 faae 	bl	8001fc6 <SSD1306_Clear>
  HAL_Delay(10);
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f001 fd82 	bl	8002574 <HAL_Delay>
  counter = 1;
 8000a70:	4b9f      	ldr	r3, [pc, #636]	@ (8000cf0 <main+0x32c>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (counter)
 8000a76:	4b9e      	ldr	r3, [pc, #632]	@ (8000cf0 <main+0x32c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	2b0a      	cmp	r3, #10
 8000a7e:	d8fa      	bhi.n	8000a76 <main+0xb2>
 8000a80:	a201      	add	r2, pc, #4	@ (adr r2, 8000a88 <main+0xc4>)
 8000a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a86:	bf00      	nop
 8000a88:	08000ab5 	.word	0x08000ab5
 8000a8c:	08000acf 	.word	0x08000acf
 8000a90:	08000b3d 	.word	0x08000b3d
 8000a94:	08000bbb 	.word	0x08000bbb
 8000a98:	08000bd5 	.word	0x08000bd5
 8000a9c:	08000c33 	.word	0x08000c33
 8000aa0:	08000cb7 	.word	0x08000cb7
 8000aa4:	08001171 	.word	0x08001171
 8000aa8:	08001189 	.word	0x08001189
 8000aac:	080011ff 	.word	0x080011ff
 8000ab0:	08001487 	.word	0x08001487
	  {
	  	  case 1:
	  		  SSD1306_Clear();
 8000ab4:	f001 fa87 	bl	8001fc6 <SSD1306_Clear>
	  		  HAL_Delay(10);
 8000ab8:	200a      	movs	r0, #10
 8000aba:	f001 fd5b 	bl	8002574 <HAL_Delay>
	  		  counter++;
 8000abe:	4b8c      	ldr	r3, [pc, #560]	@ (8000cf0 <main+0x32c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b8a      	ldr	r3, [pc, #552]	@ (8000cf0 <main+0x32c>)
 8000ac8:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000aca:	f000 bd48 	b.w	800155e <main+0xb9a>
	  	  case 2:
	  		  SSD1306_GotoXY (11,0);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	200b      	movs	r0, #11
 8000ad2:	f001 f9bf 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("TESTING MACHINE", &Font_7x10, 1);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4981      	ldr	r1, [pc, #516]	@ (8000ce0 <main+0x31c>)
 8000ada:	4886      	ldr	r0, [pc, #536]	@ (8000cf4 <main+0x330>)
 8000adc:	f001 fa4e 	bl	8001f7c <SSD1306_Puts>

	  		  SSD1306_GotoXY (0, 15);
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f001 f9b6 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("SETINGS GRIP BLOCK", &Font_7x10, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	497d      	ldr	r1, [pc, #500]	@ (8000ce0 <main+0x31c>)
 8000aec:	4882      	ldr	r0, [pc, #520]	@ (8000cf8 <main+0x334>)
 8000aee:	f001 fa45 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (0, 27);
 8000af2:	211b      	movs	r1, #27
 8000af4:	2000      	movs	r0, #0
 8000af6:	f001 f9ad 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("CLICK MOVE UP", &Font_7x10, 1);
 8000afa:	2201      	movs	r2, #1
 8000afc:	4978      	ldr	r1, [pc, #480]	@ (8000ce0 <main+0x31c>)
 8000afe:	487f      	ldr	r0, [pc, #508]	@ (8000cfc <main+0x338>)
 8000b00:	f001 fa3c 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (0, 39);
 8000b04:	2127      	movs	r1, #39	@ 0x27
 8000b06:	2000      	movs	r0, #0
 8000b08:	f001 f9a4 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts (" OR CLICK MOVE DW ", &Font_7x10, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4974      	ldr	r1, [pc, #464]	@ (8000ce0 <main+0x31c>)
 8000b10:	487b      	ldr	r0, [pc, #492]	@ (8000d00 <main+0x33c>)
 8000b12:	f001 fa33 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (0, 51);
 8000b16:	2133      	movs	r1, #51	@ 0x33
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 f99b 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("START TO CONTINUE ", &Font_7x10, 1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	496f      	ldr	r1, [pc, #444]	@ (8000ce0 <main+0x31c>)
 8000b22:	4878      	ldr	r0, [pc, #480]	@ (8000d04 <main+0x340>)
 8000b24:	f001 fa2a 	bl	8001f7c <SSD1306_Puts>

	  		  SSD1306_UpdateScreen();
 8000b28:	f001 f8f0 	bl	8001d0c <SSD1306_UpdateScreen>
	  		  counter++;
 8000b2c:	4b70      	ldr	r3, [pc, #448]	@ (8000cf0 <main+0x32c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b6e      	ldr	r3, [pc, #440]	@ (8000cf0 <main+0x32c>)
 8000b36:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000b38:	f000 bd11 	b.w	800155e <main+0xb9a>
	  	  case 3:
	  		  if (HAL_GPIO_ReadPin(MOVE_UP_GPIO_Port, MOVE_UP_Pin) == 0) {
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	4872      	ldr	r0, [pc, #456]	@ (8000d08 <main+0x344>)
 8000b40:	f001 ffce 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d116      	bne.n	8000b78 <main+0x1b4>
	  			  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b50:	486d      	ldr	r0, [pc, #436]	@ (8000d08 <main+0x344>)
 8000b52:	f001 ffdc 	bl	8002b0e <HAL_GPIO_WritePin>
	  			  while (HAL_GPIO_ReadPin(MOVE_UP_GPIO_Port, MOVE_UP_Pin) == 0){
 8000b56:	e004      	b.n	8000b62 <main+0x19e>
	  				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 8000b58:	4b5e      	ldr	r3, [pc, #376]	@ (8000cd4 <main+0x310>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000b60:	63da      	str	r2, [r3, #60]	@ 0x3c
	  			  while (HAL_GPIO_ReadPin(MOVE_UP_GPIO_Port, MOVE_UP_Pin) == 0){
 8000b62:	2108      	movs	r1, #8
 8000b64:	4868      	ldr	r0, [pc, #416]	@ (8000d08 <main+0x344>)
 8000b66:	f001 ffbb 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0f3      	beq.n	8000b58 <main+0x194>
	  			  }
	  			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000b70:	4b58      	ldr	r3, [pc, #352]	@ (8000cd4 <main+0x310>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	63da      	str	r2, [r3, #60]	@ 0x3c
	  		  }
	  		  if (HAL_GPIO_ReadPin(MOVE_DOWN_GPIO_Port, MOVE_DOWN_Pin) == 0) {
 8000b78:	2104      	movs	r1, #4
 8000b7a:	4863      	ldr	r0, [pc, #396]	@ (8000d08 <main+0x344>)
 8000b7c:	f001 ffb0 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f040 84e5 	bne.w	8001552 <main+0xb8e>
	  			  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b8e:	485e      	ldr	r0, [pc, #376]	@ (8000d08 <main+0x344>)
 8000b90:	f001 ffbd 	bl	8002b0e <HAL_GPIO_WritePin>
	  			  while (HAL_GPIO_ReadPin(MOVE_DOWN_GPIO_Port, MOVE_DOWN_Pin) == 0){
 8000b94:	e004      	b.n	8000ba0 <main+0x1dc>
	  				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 8000b96:	4b4f      	ldr	r3, [pc, #316]	@ (8000cd4 <main+0x310>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	  			  while (HAL_GPIO_ReadPin(MOVE_DOWN_GPIO_Port, MOVE_DOWN_Pin) == 0){
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4859      	ldr	r0, [pc, #356]	@ (8000d08 <main+0x344>)
 8000ba4:	f001 ff9c 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f3      	beq.n	8000b96 <main+0x1d2>
	  			  }
	  			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000bae:	4b49      	ldr	r3, [pc, #292]	@ (8000cd4 <main+0x310>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
	  		  }

	  		  break;
 8000bb6:	f000 bccc 	b.w	8001552 <main+0xb8e>
	  	  case 4:
	  		  SSD1306_Clear();
 8000bba:	f001 fa04 	bl	8001fc6 <SSD1306_Clear>
	  		  HAL_Delay(10);
 8000bbe:	200a      	movs	r0, #10
 8000bc0:	f001 fcd8 	bl	8002574 <HAL_Delay>
	  		  counter++;
 8000bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf0 <main+0x32c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b48      	ldr	r3, [pc, #288]	@ (8000cf0 <main+0x32c>)
 8000bce:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000bd0:	f000 bcc5 	b.w	800155e <main+0xb9a>
	  	  case 5:
	  		  SSD1306_GotoXY (0, 15);
 8000bd4:	210f      	movs	r1, #15
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f001 f93c 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("SETINGS OFFSET", &Font_7x10, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4940      	ldr	r1, [pc, #256]	@ (8000ce0 <main+0x31c>)
 8000be0:	484a      	ldr	r0, [pc, #296]	@ (8000d0c <main+0x348>)
 8000be2:	f001 f9cb 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (0, 27);
 8000be6:	211b      	movs	r1, #27
 8000be8:	2000      	movs	r0, #0
 8000bea:	f001 f933 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("WAITING ......", &Font_7x10, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	493b      	ldr	r1, [pc, #236]	@ (8000ce0 <main+0x31c>)
 8000bf2:	4847      	ldr	r0, [pc, #284]	@ (8000d10 <main+0x34c>)
 8000bf4:	f001 f9c2 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_UpdateScreen();
 8000bf8:	f001 f888 	bl	8001d0c <SSD1306_UpdateScreen>
	  		  for (int z; z < 3; z++) {
 8000bfc:	e007      	b.n	8000c0e <main+0x24a>
	  			offset = weigh();
 8000bfe:	f7ff fe1d 	bl	800083c <weigh>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a43      	ldr	r2, [pc, #268]	@ (8000d14 <main+0x350>)
 8000c06:	6013      	str	r3, [r2, #0]
	  		  for (int z; z < 3; z++) {
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	ddf4      	ble.n	8000bfe <main+0x23a>

	  		  }
	  		  SSD1306_Clear();
 8000c14:	f001 f9d7 	bl	8001fc6 <SSD1306_Clear>
	  		  HAL_Delay(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f001 fcab 	bl	8002574 <HAL_Delay>
	  		  SSD1306_Clear();
 8000c1e:	f001 f9d2 	bl	8001fc6 <SSD1306_Clear>
	  		  counter++;
 8000c22:	4b33      	ldr	r3, [pc, #204]	@ (8000cf0 <main+0x32c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b31      	ldr	r3, [pc, #196]	@ (8000cf0 <main+0x32c>)
 8000c2c:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000c2e:	f000 bc96 	b.w	800155e <main+0xb9a>

	  	  case 6:
	  		  SSD1306_Clear();
 8000c32:	f001 f9c8 	bl	8001fc6 <SSD1306_Clear>
	  		  HAL_Delay(10);
 8000c36:	200a      	movs	r0, #10
 8000c38:	f001 fc9c 	bl	8002574 <HAL_Delay>

	  		  SSD1306_GotoXY (11,0);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	200b      	movs	r0, #11
 8000c40:	f001 f908 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("TESTING MACHINE", &Font_7x10, 1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	4926      	ldr	r1, [pc, #152]	@ (8000ce0 <main+0x31c>)
 8000c48:	482a      	ldr	r0, [pc, #168]	@ (8000cf4 <main+0x330>)
 8000c4a:	f001 f997 	bl	8001f7c <SSD1306_Puts>

	  		  SSD1306_GotoXY (0, 11);
 8000c4e:	210b      	movs	r1, #11
 8000c50:	2000      	movs	r0, #0
 8000c52:	f001 f8ff 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts (">MODE :           ", &Font_7x10, 1);
 8000c56:	2201      	movs	r2, #1
 8000c58:	4921      	ldr	r1, [pc, #132]	@ (8000ce0 <main+0x31c>)
 8000c5a:	482f      	ldr	r0, [pc, #188]	@ (8000d18 <main+0x354>)
 8000c5c:	f001 f98e 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (0, 22);
 8000c60:	2116      	movs	r1, #22
 8000c62:	2000      	movs	r0, #0
 8000c64:	f001 f8f6 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts (" TIMES:           ", &Font_7x10, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	491d      	ldr	r1, [pc, #116]	@ (8000ce0 <main+0x31c>)
 8000c6c:	482b      	ldr	r0, [pc, #172]	@ (8000d1c <main+0x358>)
 8000c6e:	f001 f985 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (0, 33);
 8000c72:	2121      	movs	r1, #33	@ 0x21
 8000c74:	2000      	movs	r0, #0
 8000c76:	f001 f8ed 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts (" STEP :           ", &Font_7x10, 1);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4918      	ldr	r1, [pc, #96]	@ (8000ce0 <main+0x31c>)
 8000c7e:	4828      	ldr	r0, [pc, #160]	@ (8000d20 <main+0x35c>)
 8000c80:	f001 f97c 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (0, 44);
 8000c84:	212c      	movs	r1, #44	@ 0x2c
 8000c86:	2000      	movs	r0, #0
 8000c88:	f001 f8e4 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts (" LEN  :           ", &Font_7x10, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4914      	ldr	r1, [pc, #80]	@ (8000ce0 <main+0x31c>)
 8000c90:	4824      	ldr	r0, [pc, #144]	@ (8000d24 <main+0x360>)
 8000c92:	f001 f973 	bl	8001f7c <SSD1306_Puts>

	  		  SSD1306_UpdateScreen();
 8000c96:	f001 f839 	bl	8001d0c <SSD1306_UpdateScreen>

	  		  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ca0:	4819      	ldr	r0, [pc, #100]	@ (8000d08 <main+0x344>)
 8000ca2:	f001 ff34 	bl	8002b0e <HAL_GPIO_WritePin>
	  		  counter++;
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <main+0x32c>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <main+0x32c>)
 8000cb0:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000cb2:	f000 bc54 	b.w	800155e <main+0xb9a>
	  	  case 7:
	  		  if (set_mode == 1){
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <main+0x364>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d138      	bne.n	8000d30 <main+0x36c>
	  			  SSD1306_GotoXY (56, 11);
 8000cbe:	210b      	movs	r1, #11
 8000cc0:	2038      	movs	r0, #56	@ 0x38
 8000cc2:	f001 f8c7 	bl	8001e54 <SSD1306_GotoXY>
	  			  SSD1306_Puts ("PULL     ", &Font_7x10, 1);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4905      	ldr	r1, [pc, #20]	@ (8000ce0 <main+0x31c>)
 8000cca:	4818      	ldr	r0, [pc, #96]	@ (8000d2c <main+0x368>)
 8000ccc:	f001 f956 	bl	8001f7c <SSD1306_Puts>
 8000cd0:	e03b      	b.n	8000d4a <main+0x386>
 8000cd2:	bf00      	nop
 8000cd4:	200000ec 	.word	0x200000ec
 8000cd8:	20000134 	.word	0x20000134
 8000cdc:	2000017c 	.word	0x2000017c
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	08005d80 	.word	0x08005d80
 8000ce8:	08005d8c 	.word	0x08005d8c
 8000cec:	08005d9c 	.word	0x08005d9c
 8000cf0:	2000020c 	.word	0x2000020c
 8000cf4:	08005dac 	.word	0x08005dac
 8000cf8:	08005dbc 	.word	0x08005dbc
 8000cfc:	08005dd0 	.word	0x08005dd0
 8000d00:	08005de0 	.word	0x08005de0
 8000d04:	08005df4 	.word	0x08005df4
 8000d08:	40010800 	.word	0x40010800
 8000d0c:	08005e08 	.word	0x08005e08
 8000d10:	08005e18 	.word	0x08005e18
 8000d14:	20000218 	.word	0x20000218
 8000d18:	08005e28 	.word	0x08005e28
 8000d1c:	08005e3c 	.word	0x08005e3c
 8000d20:	08005e50 	.word	0x08005e50
 8000d24:	08005e64 	.word	0x08005e64
 8000d28:	2000000c 	.word	0x2000000c
 8000d2c:	08005e78 	.word	0x08005e78
	  		  }
	  		  else if (set_mode == 2){
 8000d30:	4bb1      	ldr	r3, [pc, #708]	@ (8000ff8 <main+0x634>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d108      	bne.n	8000d4a <main+0x386>
	  			  SSD1306_GotoXY (56, 11);
 8000d38:	210b      	movs	r1, #11
 8000d3a:	2038      	movs	r0, #56	@ 0x38
 8000d3c:	f001 f88a 	bl	8001e54 <SSD1306_GotoXY>
	  			  SSD1306_Puts ("PULL & RE", &Font_7x10, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	49ae      	ldr	r1, [pc, #696]	@ (8000ffc <main+0x638>)
 8000d44:	48ae      	ldr	r0, [pc, #696]	@ (8001000 <main+0x63c>)
 8000d46:	f001 f919 	bl	8001f7c <SSD1306_Puts>
	  		  }
	  		  itoa(set_step, sum, 10);
 8000d4a:	4bae      	ldr	r3, [pc, #696]	@ (8001004 <main+0x640>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	220a      	movs	r2, #10
 8000d54:	4619      	mov	r1, r3
 8000d56:	f004 faff 	bl	8005358 <itoa>
	  		  SSD1306_GotoXY (56, 33);
 8000d5a:	2121      	movs	r1, #33	@ 0x21
 8000d5c:	2038      	movs	r0, #56	@ 0x38
 8000d5e:	f001 f879 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts (sum, &Font_7x10, 1);
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2201      	movs	r2, #1
 8000d66:	49a5      	ldr	r1, [pc, #660]	@ (8000ffc <main+0x638>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 f907 	bl	8001f7c <SSD1306_Puts>
	  		  itoa(set_times, sum, 10);
 8000d6e:	4ba6      	ldr	r3, [pc, #664]	@ (8001008 <main+0x644>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	220a      	movs	r2, #10
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f004 faed 	bl	8005358 <itoa>
	  		  SSD1306_GotoXY (56, 22);
 8000d7e:	2116      	movs	r1, #22
 8000d80:	2038      	movs	r0, #56	@ 0x38
 8000d82:	f001 f867 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts (sum, &Font_7x10, 1);
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2201      	movs	r2, #1
 8000d8a:	499c      	ldr	r1, [pc, #624]	@ (8000ffc <main+0x638>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 f8f5 	bl	8001f7c <SSD1306_Puts>
	  		  itoa(set_lengh, sum, 10);
 8000d92:	4b9e      	ldr	r3, [pc, #632]	@ (800100c <main+0x648>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	220a      	movs	r2, #10
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f004 fadb 	bl	8005358 <itoa>
	  		  SSD1306_GotoXY (56, 44);
 8000da2:	212c      	movs	r1, #44	@ 0x2c
 8000da4:	2038      	movs	r0, #56	@ 0x38
 8000da6:	f001 f855 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts (sum, &Font_7x10, 1);
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2201      	movs	r2, #1
 8000dae:	4993      	ldr	r1, [pc, #588]	@ (8000ffc <main+0x638>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 f8e3 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_UpdateScreen();
 8000db6:	f000 ffa9 	bl	8001d0c <SSD1306_UpdateScreen>
	  		  if (HAL_GPIO_ReadPin(MOVE_DOWN_GPIO_Port, MOVE_DOWN_Pin) == 0) {
 8000dba:	2104      	movs	r1, #4
 8000dbc:	4894      	ldr	r0, [pc, #592]	@ (8001010 <main+0x64c>)
 8000dbe:	f001 fe8f 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d138      	bne.n	8000e3a <main+0x476>
	  			  HAL_Delay(20);
 8000dc8:	2014      	movs	r0, #20
 8000dca:	f001 fbd3 	bl	8002574 <HAL_Delay>
	  			  if (HAL_GPIO_ReadPin(MOVE_DOWN_GPIO_Port, MOVE_DOWN_Pin) == 0){
 8000dce:	2104      	movs	r1, #4
 8000dd0:	488f      	ldr	r0, [pc, #572]	@ (8001010 <main+0x64c>)
 8000dd2:	f001 fe85 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d125      	bne.n	8000e28 <main+0x464>
	  				  SSD1306_GotoXY (0, i);
 8000ddc:	4b8d      	ldr	r3, [pc, #564]	@ (8001014 <main+0x650>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	2000      	movs	r0, #0
 8000de6:	f001 f835 	bl	8001e54 <SSD1306_GotoXY>
	  				  SSD1306_Puts (" ", &Font_7x10, 1);
 8000dea:	2201      	movs	r2, #1
 8000dec:	4983      	ldr	r1, [pc, #524]	@ (8000ffc <main+0x638>)
 8000dee:	488a      	ldr	r0, [pc, #552]	@ (8001018 <main+0x654>)
 8000df0:	f001 f8c4 	bl	8001f7c <SSD1306_Puts>
	  				  i = i + 11;
 8000df4:	4b87      	ldr	r3, [pc, #540]	@ (8001014 <main+0x650>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	330b      	adds	r3, #11
 8000dfa:	4a86      	ldr	r2, [pc, #536]	@ (8001014 <main+0x650>)
 8000dfc:	6013      	str	r3, [r2, #0]
	  				  if (i > 44)	i = 11;
 8000dfe:	4b85      	ldr	r3, [pc, #532]	@ (8001014 <main+0x650>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e04:	dd02      	ble.n	8000e0c <main+0x448>
 8000e06:	4b83      	ldr	r3, [pc, #524]	@ (8001014 <main+0x650>)
 8000e08:	220b      	movs	r2, #11
 8000e0a:	601a      	str	r2, [r3, #0]
	  				  SSD1306_GotoXY (0, i);
 8000e0c:	4b81      	ldr	r3, [pc, #516]	@ (8001014 <main+0x650>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4619      	mov	r1, r3
 8000e14:	2000      	movs	r0, #0
 8000e16:	f001 f81d 	bl	8001e54 <SSD1306_GotoXY>
	  				  SSD1306_Puts (">", &Font_7x10, 1);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4977      	ldr	r1, [pc, #476]	@ (8000ffc <main+0x638>)
 8000e1e:	487f      	ldr	r0, [pc, #508]	@ (800101c <main+0x658>)
 8000e20:	f001 f8ac 	bl	8001f7c <SSD1306_Puts>
	  				  SSD1306_UpdateScreen();
 8000e24:	f000 ff72 	bl	8001d0c <SSD1306_UpdateScreen>
	  			  }
	  			  while (HAL_GPIO_ReadPin(MOVE_DOWN_GPIO_Port, MOVE_DOWN_Pin) == 0){};
 8000e28:	bf00      	nop
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4878      	ldr	r0, [pc, #480]	@ (8001010 <main+0x64c>)
 8000e2e:	f001 fe57 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f8      	beq.n	8000e2a <main+0x466>
	  					  SSD1306_UpdateScreen();
	  					  HAL_Delay(200);
	  				  }
	  			  };
	  		  }
	  		  break;
 8000e38:	e38e      	b.n	8001558 <main+0xb94>
	  		  else if (HAL_GPIO_ReadPin(MOVE_UP_GPIO_Port, MOVE_UP_Pin) == 0) {
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	4874      	ldr	r0, [pc, #464]	@ (8001010 <main+0x64c>)
 8000e3e:	f001 fe4f 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d138      	bne.n	8000eba <main+0x4f6>
	  			  HAL_Delay(20);
 8000e48:	2014      	movs	r0, #20
 8000e4a:	f001 fb93 	bl	8002574 <HAL_Delay>
	  			  if (HAL_GPIO_ReadPin(MOVE_UP_GPIO_Port, MOVE_UP_Pin) == 0){
 8000e4e:	2108      	movs	r1, #8
 8000e50:	486f      	ldr	r0, [pc, #444]	@ (8001010 <main+0x64c>)
 8000e52:	f001 fe45 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d125      	bne.n	8000ea8 <main+0x4e4>
	  				  SSD1306_GotoXY (0, i);
 8000e5c:	4b6d      	ldr	r3, [pc, #436]	@ (8001014 <main+0x650>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	4619      	mov	r1, r3
 8000e64:	2000      	movs	r0, #0
 8000e66:	f000 fff5 	bl	8001e54 <SSD1306_GotoXY>
	  				  SSD1306_Puts (" ", &Font_7x10, 1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4963      	ldr	r1, [pc, #396]	@ (8000ffc <main+0x638>)
 8000e6e:	486a      	ldr	r0, [pc, #424]	@ (8001018 <main+0x654>)
 8000e70:	f001 f884 	bl	8001f7c <SSD1306_Puts>
	  				  i = i - 11;
 8000e74:	4b67      	ldr	r3, [pc, #412]	@ (8001014 <main+0x650>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3b0b      	subs	r3, #11
 8000e7a:	4a66      	ldr	r2, [pc, #408]	@ (8001014 <main+0x650>)
 8000e7c:	6013      	str	r3, [r2, #0]
	  				  if (i < 11)	i = 44;
 8000e7e:	4b65      	ldr	r3, [pc, #404]	@ (8001014 <main+0x650>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b0a      	cmp	r3, #10
 8000e84:	dc02      	bgt.n	8000e8c <main+0x4c8>
 8000e86:	4b63      	ldr	r3, [pc, #396]	@ (8001014 <main+0x650>)
 8000e88:	222c      	movs	r2, #44	@ 0x2c
 8000e8a:	601a      	str	r2, [r3, #0]
	  				  SSD1306_GotoXY (0, i);
 8000e8c:	4b61      	ldr	r3, [pc, #388]	@ (8001014 <main+0x650>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	4619      	mov	r1, r3
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 ffdd 	bl	8001e54 <SSD1306_GotoXY>
	  				  SSD1306_Puts (">", &Font_7x10, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4957      	ldr	r1, [pc, #348]	@ (8000ffc <main+0x638>)
 8000e9e:	485f      	ldr	r0, [pc, #380]	@ (800101c <main+0x658>)
 8000ea0:	f001 f86c 	bl	8001f7c <SSD1306_Puts>
	  				  SSD1306_UpdateScreen();
 8000ea4:	f000 ff32 	bl	8001d0c <SSD1306_UpdateScreen>
	  			  while (HAL_GPIO_ReadPin(MOVE_UP_GPIO_Port, MOVE_UP_Pin) == 0){};
 8000ea8:	bf00      	nop
 8000eaa:	2108      	movs	r1, #8
 8000eac:	4858      	ldr	r0, [pc, #352]	@ (8001010 <main+0x64c>)
 8000eae:	f001 fe17 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f8      	beq.n	8000eaa <main+0x4e6>
	  		  break;
 8000eb8:	e34e      	b.n	8001558 <main+0xb94>
	  		  else if (HAL_GPIO_ReadPin(ADDITION_GPIO_Port, ADDITION_Pin) == 0) {
 8000eba:	2120      	movs	r1, #32
 8000ebc:	4854      	ldr	r0, [pc, #336]	@ (8001010 <main+0x64c>)
 8000ebe:	f001 fe0f 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f040 80ad 	bne.w	8001024 <main+0x660>
	  			  HAL_Delay(20);
 8000eca:	2014      	movs	r0, #20
 8000ecc:	f001 fb52 	bl	8002574 <HAL_Delay>
	  			  if (HAL_GPIO_ReadPin(ADDITION_GPIO_Port, ADDITION_Pin) == 0){
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	484f      	ldr	r0, [pc, #316]	@ (8001010 <main+0x64c>)
 8000ed4:	f001 fe04 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 8084 	bne.w	8000fe8 <main+0x624>
	  				  if (i == 11){
 8000ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8001014 <main+0x650>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b0b      	cmp	r3, #11
 8000ee6:	d10d      	bne.n	8000f04 <main+0x540>
	  					  set_mode++;
 8000ee8:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <main+0x634>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b41      	ldr	r3, [pc, #260]	@ (8000ff8 <main+0x634>)
 8000ef2:	701a      	strb	r2, [r3, #0]
	  					  if (set_mode > 2) set_mode = 2;
 8000ef4:	4b40      	ldr	r3, [pc, #256]	@ (8000ff8 <main+0x634>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d975      	bls.n	8000fe8 <main+0x624>
 8000efc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff8 <main+0x634>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	e071      	b.n	8000fe8 <main+0x624>
	  				  else if (i == 33){
 8000f04:	4b43      	ldr	r3, [pc, #268]	@ (8001014 <main+0x650>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b21      	cmp	r3, #33	@ 0x21
 8000f0a:	d16d      	bne.n	8000fe8 <main+0x624>
	  					  set_step++;
 8000f0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001004 <main+0x640>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b3b      	ldr	r3, [pc, #236]	@ (8001004 <main+0x640>)
 8000f16:	701a      	strb	r2, [r3, #0]
	  					  if (set_step > 2) set_step = 2;
 8000f18:	4b3a      	ldr	r3, [pc, #232]	@ (8001004 <main+0x640>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d963      	bls.n	8000fe8 <main+0x624>
 8000f20:	4b38      	ldr	r3, [pc, #224]	@ (8001004 <main+0x640>)
 8000f22:	2202      	movs	r2, #2
 8000f24:	701a      	strb	r2, [r3, #0]
	  			  while (HAL_GPIO_ReadPin(ADDITION_GPIO_Port, ADDITION_Pin) == 0)
 8000f26:	e05f      	b.n	8000fe8 <main+0x624>
	  				  if ((i == 22) && (set_mode == 2)){
 8000f28:	4b3a      	ldr	r3, [pc, #232]	@ (8001014 <main+0x650>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b16      	cmp	r3, #22
 8000f2e:	d12a      	bne.n	8000f86 <main+0x5c2>
 8000f30:	4b31      	ldr	r3, [pc, #196]	@ (8000ff8 <main+0x634>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d126      	bne.n	8000f86 <main+0x5c2>
	  					  set_times++;
 8000f38:	4b33      	ldr	r3, [pc, #204]	@ (8001008 <main+0x644>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	4b31      	ldr	r3, [pc, #196]	@ (8001008 <main+0x644>)
 8000f42:	701a      	strb	r2, [r3, #0]
	  					  SSD1306_GotoXY (56, 22);
 8000f44:	2116      	movs	r1, #22
 8000f46:	2038      	movs	r0, #56	@ 0x38
 8000f48:	f000 ff84 	bl	8001e54 <SSD1306_GotoXY>
	  					  SSD1306_Puts ("      ", &Font_7x10, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	492b      	ldr	r1, [pc, #172]	@ (8000ffc <main+0x638>)
 8000f50:	4833      	ldr	r0, [pc, #204]	@ (8001020 <main+0x65c>)
 8000f52:	f001 f813 	bl	8001f7c <SSD1306_Puts>
	  					  itoa(set_times, sum, 10);
 8000f56:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <main+0x644>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	220a      	movs	r2, #10
 8000f60:	4619      	mov	r1, r3
 8000f62:	f004 f9f9 	bl	8005358 <itoa>
	  					  SSD1306_GotoXY (56, 22);
 8000f66:	2116      	movs	r1, #22
 8000f68:	2038      	movs	r0, #56	@ 0x38
 8000f6a:	f000 ff73 	bl	8001e54 <SSD1306_GotoXY>
	  					  SSD1306_Puts (sum, &Font_7x10, 1);
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2201      	movs	r2, #1
 8000f72:	4922      	ldr	r1, [pc, #136]	@ (8000ffc <main+0x638>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 f801 	bl	8001f7c <SSD1306_Puts>
	  					  SSD1306_UpdateScreen();
 8000f7a:	f000 fec7 	bl	8001d0c <SSD1306_UpdateScreen>
	  					  HAL_Delay(200);
 8000f7e:	20c8      	movs	r0, #200	@ 0xc8
 8000f80:	f001 faf8 	bl	8002574 <HAL_Delay>
 8000f84:	e030      	b.n	8000fe8 <main+0x624>
	  				  else if (i == 44){
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <main+0x650>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f8c:	d12c      	bne.n	8000fe8 <main+0x624>
	  					  set_lengh++;
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <main+0x648>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <main+0x648>)
 8000f98:	701a      	strb	r2, [r3, #0]
	  					  if (set_lengh > 100) set_lengh = 100;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <main+0x648>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b64      	cmp	r3, #100	@ 0x64
 8000fa0:	d902      	bls.n	8000fa8 <main+0x5e4>
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <main+0x648>)
 8000fa4:	2264      	movs	r2, #100	@ 0x64
 8000fa6:	701a      	strb	r2, [r3, #0]
	  					  SSD1306_GotoXY (56, 44);
 8000fa8:	212c      	movs	r1, #44	@ 0x2c
 8000faa:	2038      	movs	r0, #56	@ 0x38
 8000fac:	f000 ff52 	bl	8001e54 <SSD1306_GotoXY>
	  					  SSD1306_Puts ("      ", &Font_7x10, 1);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4912      	ldr	r1, [pc, #72]	@ (8000ffc <main+0x638>)
 8000fb4:	481a      	ldr	r0, [pc, #104]	@ (8001020 <main+0x65c>)
 8000fb6:	f000 ffe1 	bl	8001f7c <SSD1306_Puts>
	  					  itoa(set_lengh, sum, 10);
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <main+0x648>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	220a      	movs	r2, #10
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f004 f9c7 	bl	8005358 <itoa>
	  					  SSD1306_GotoXY (56, 44);
 8000fca:	212c      	movs	r1, #44	@ 0x2c
 8000fcc:	2038      	movs	r0, #56	@ 0x38
 8000fce:	f000 ff41 	bl	8001e54 <SSD1306_GotoXY>
	  					  SSD1306_Puts (sum, &Font_7x10, 1);
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4909      	ldr	r1, [pc, #36]	@ (8000ffc <main+0x638>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 ffcf 	bl	8001f7c <SSD1306_Puts>
	  					  SSD1306_UpdateScreen();
 8000fde:	f000 fe95 	bl	8001d0c <SSD1306_UpdateScreen>
	  					  HAL_Delay(200);
 8000fe2:	20c8      	movs	r0, #200	@ 0xc8
 8000fe4:	f001 fac6 	bl	8002574 <HAL_Delay>
	  			  while (HAL_GPIO_ReadPin(ADDITION_GPIO_Port, ADDITION_Pin) == 0)
 8000fe8:	2120      	movs	r1, #32
 8000fea:	4809      	ldr	r0, [pc, #36]	@ (8001010 <main+0x64c>)
 8000fec:	f001 fd78 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d098      	beq.n	8000f28 <main+0x564>
	  		  break;
 8000ff6:	e2af      	b.n	8001558 <main+0xb94>
 8000ff8:	2000000c 	.word	0x2000000c
 8000ffc:	20000000 	.word	0x20000000
 8001000:	08005e84 	.word	0x08005e84
 8001004:	2000000e 	.word	0x2000000e
 8001008:	2000000d 	.word	0x2000000d
 800100c:	2000000f 	.word	0x2000000f
 8001010:	40010800 	.word	0x40010800
 8001014:	20000008 	.word	0x20000008
 8001018:	08005e90 	.word	0x08005e90
 800101c:	08005e94 	.word	0x08005e94
 8001020:	08005e98 	.word	0x08005e98
	  		  else if (HAL_GPIO_ReadPin(SUBTRACTION_GPIO_Port, SUBTRACTION_Pin) == 0) {
 8001024:	2110      	movs	r1, #16
 8001026:	48a3      	ldr	r0, [pc, #652]	@ (80012b4 <main+0x8f0>)
 8001028:	f001 fd5a 	bl	8002ae0 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	f040 8292 	bne.w	8001558 <main+0xb94>
	  			  HAL_Delay(20);
 8001034:	2014      	movs	r0, #20
 8001036:	f001 fa9d 	bl	8002574 <HAL_Delay>
	  			  if (HAL_GPIO_ReadPin(SUBTRACTION_GPIO_Port, SUBTRACTION_Pin) == 0){
 800103a:	2110      	movs	r1, #16
 800103c:	489d      	ldr	r0, [pc, #628]	@ (80012b4 <main+0x8f0>)
 800103e:	f001 fd4f 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	f040 808b 	bne.w	8001160 <main+0x79c>
	  				  if (i == 11){
 800104a:	4b9b      	ldr	r3, [pc, #620]	@ (80012b8 <main+0x8f4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b0b      	cmp	r3, #11
 8001050:	d10d      	bne.n	800106e <main+0x6aa>
	  					  set_mode--;
 8001052:	4b9a      	ldr	r3, [pc, #616]	@ (80012bc <main+0x8f8>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	3b01      	subs	r3, #1
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b98      	ldr	r3, [pc, #608]	@ (80012bc <main+0x8f8>)
 800105c:	701a      	strb	r2, [r3, #0]
	  					  if (set_mode < 1) set_mode = 1;
 800105e:	4b97      	ldr	r3, [pc, #604]	@ (80012bc <main+0x8f8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d17c      	bne.n	8001160 <main+0x79c>
 8001066:	4b95      	ldr	r3, [pc, #596]	@ (80012bc <main+0x8f8>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	e078      	b.n	8001160 <main+0x79c>
	  				  else if (i == 33){
 800106e:	4b92      	ldr	r3, [pc, #584]	@ (80012b8 <main+0x8f4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b21      	cmp	r3, #33	@ 0x21
 8001074:	d174      	bne.n	8001160 <main+0x79c>
	  					  set_step--;
 8001076:	4b92      	ldr	r3, [pc, #584]	@ (80012c0 <main+0x8fc>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	3b01      	subs	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b90      	ldr	r3, [pc, #576]	@ (80012c0 <main+0x8fc>)
 8001080:	701a      	strb	r2, [r3, #0]
	  					  if (set_step < 1) set_step = 1;
 8001082:	4b8f      	ldr	r3, [pc, #572]	@ (80012c0 <main+0x8fc>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d16a      	bne.n	8001160 <main+0x79c>
 800108a:	4b8d      	ldr	r3, [pc, #564]	@ (80012c0 <main+0x8fc>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
	  			  while (HAL_GPIO_ReadPin(SUBTRACTION_GPIO_Port, SUBTRACTION_Pin) == 0)
 8001090:	e066      	b.n	8001160 <main+0x79c>
	  				  if ((i == 22) && (set_mode == 2)){
 8001092:	4b89      	ldr	r3, [pc, #548]	@ (80012b8 <main+0x8f4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b16      	cmp	r3, #22
 8001098:	d131      	bne.n	80010fe <main+0x73a>
 800109a:	4b88      	ldr	r3, [pc, #544]	@ (80012bc <main+0x8f8>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d12d      	bne.n	80010fe <main+0x73a>
	  					  set_times--;
 80010a2:	4b88      	ldr	r3, [pc, #544]	@ (80012c4 <main+0x900>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b86      	ldr	r3, [pc, #536]	@ (80012c4 <main+0x900>)
 80010ac:	701a      	strb	r2, [r3, #0]
	  					  if (set_times < 1) set_times = 1;
 80010ae:	4b85      	ldr	r3, [pc, #532]	@ (80012c4 <main+0x900>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <main+0x6f8>
 80010b6:	4b83      	ldr	r3, [pc, #524]	@ (80012c4 <main+0x900>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
	  					  SSD1306_GotoXY (56, 22);
 80010bc:	2116      	movs	r1, #22
 80010be:	2038      	movs	r0, #56	@ 0x38
 80010c0:	f000 fec8 	bl	8001e54 <SSD1306_GotoXY>
	  					  SSD1306_Puts ("      ", &Font_7x10, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	4980      	ldr	r1, [pc, #512]	@ (80012c8 <main+0x904>)
 80010c8:	4880      	ldr	r0, [pc, #512]	@ (80012cc <main+0x908>)
 80010ca:	f000 ff57 	bl	8001f7c <SSD1306_Puts>
	  					  itoa(set_times, sum, 10);
 80010ce:	4b7d      	ldr	r3, [pc, #500]	@ (80012c4 <main+0x900>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	220a      	movs	r2, #10
 80010d8:	4619      	mov	r1, r3
 80010da:	f004 f93d 	bl	8005358 <itoa>
	  					  SSD1306_GotoXY (56, 22);
 80010de:	2116      	movs	r1, #22
 80010e0:	2038      	movs	r0, #56	@ 0x38
 80010e2:	f000 feb7 	bl	8001e54 <SSD1306_GotoXY>
	  					  SSD1306_Puts (sum, &Font_7x10, 1);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2201      	movs	r2, #1
 80010ea:	4977      	ldr	r1, [pc, #476]	@ (80012c8 <main+0x904>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 ff45 	bl	8001f7c <SSD1306_Puts>
	  					  SSD1306_UpdateScreen();
 80010f2:	f000 fe0b 	bl	8001d0c <SSD1306_UpdateScreen>
	  					  HAL_Delay(200);
 80010f6:	20c8      	movs	r0, #200	@ 0xc8
 80010f8:	f001 fa3c 	bl	8002574 <HAL_Delay>
 80010fc:	e030      	b.n	8001160 <main+0x79c>
	  				  else if (i == 44){
 80010fe:	4b6e      	ldr	r3, [pc, #440]	@ (80012b8 <main+0x8f4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b2c      	cmp	r3, #44	@ 0x2c
 8001104:	d12c      	bne.n	8001160 <main+0x79c>
	  					  set_lengh--;
 8001106:	4b72      	ldr	r3, [pc, #456]	@ (80012d0 <main+0x90c>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3b01      	subs	r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b70      	ldr	r3, [pc, #448]	@ (80012d0 <main+0x90c>)
 8001110:	701a      	strb	r2, [r3, #0]
	  					  if (set_lengh < 1) set_lengh = 1;
 8001112:	4b6f      	ldr	r3, [pc, #444]	@ (80012d0 <main+0x90c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <main+0x75c>
 800111a:	4b6d      	ldr	r3, [pc, #436]	@ (80012d0 <main+0x90c>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
	  					  SSD1306_GotoXY (56,44);
 8001120:	212c      	movs	r1, #44	@ 0x2c
 8001122:	2038      	movs	r0, #56	@ 0x38
 8001124:	f000 fe96 	bl	8001e54 <SSD1306_GotoXY>
	  					  SSD1306_Puts ("      ", &Font_7x10, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	4967      	ldr	r1, [pc, #412]	@ (80012c8 <main+0x904>)
 800112c:	4867      	ldr	r0, [pc, #412]	@ (80012cc <main+0x908>)
 800112e:	f000 ff25 	bl	8001f7c <SSD1306_Puts>
	  					  itoa(set_times, sum, 10);
 8001132:	4b64      	ldr	r3, [pc, #400]	@ (80012c4 <main+0x900>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	220a      	movs	r2, #10
 800113c:	4619      	mov	r1, r3
 800113e:	f004 f90b 	bl	8005358 <itoa>
	  					  SSD1306_GotoXY (56, 44);
 8001142:	212c      	movs	r1, #44	@ 0x2c
 8001144:	2038      	movs	r0, #56	@ 0x38
 8001146:	f000 fe85 	bl	8001e54 <SSD1306_GotoXY>
	  					  SSD1306_Puts (sum, &Font_7x10, 1);
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2201      	movs	r2, #1
 800114e:	495e      	ldr	r1, [pc, #376]	@ (80012c8 <main+0x904>)
 8001150:	4618      	mov	r0, r3
 8001152:	f000 ff13 	bl	8001f7c <SSD1306_Puts>
	  					  SSD1306_UpdateScreen();
 8001156:	f000 fdd9 	bl	8001d0c <SSD1306_UpdateScreen>
	  					  HAL_Delay(200);
 800115a:	20c8      	movs	r0, #200	@ 0xc8
 800115c:	f001 fa0a 	bl	8002574 <HAL_Delay>
	  			  while (HAL_GPIO_ReadPin(SUBTRACTION_GPIO_Port, SUBTRACTION_Pin) == 0)
 8001160:	2110      	movs	r1, #16
 8001162:	4854      	ldr	r0, [pc, #336]	@ (80012b4 <main+0x8f0>)
 8001164:	f001 fcbc 	bl	8002ae0 <HAL_GPIO_ReadPin>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d091      	beq.n	8001092 <main+0x6ce>
	  		  break;
 800116e:	e1f3      	b.n	8001558 <main+0xb94>
	  	  case 8:

	  		  SSD1306_Clear();
 8001170:	f000 ff29 	bl	8001fc6 <SSD1306_Clear>
	  		  HAL_Delay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f001 f9fd 	bl	8002574 <HAL_Delay>
	  		  counter++;
 800117a:	4b56      	ldr	r3, [pc, #344]	@ (80012d4 <main+0x910>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b54      	ldr	r3, [pc, #336]	@ (80012d4 <main+0x910>)
 8001184:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001186:	e1ea      	b.n	800155e <main+0xb9a>
	  	  case 9:

	  		  SSD1306_Clear();
 8001188:	f000 ff1d 	bl	8001fc6 <SSD1306_Clear>
	  		  HAL_Delay(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f001 f9f1 	bl	8002574 <HAL_Delay>

	  		  SSD1306_GotoXY (11,0);
 8001192:	2100      	movs	r1, #0
 8001194:	200b      	movs	r0, #11
 8001196:	f000 fe5d 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("TESTING MACHINE", &Font_7x10, 1);
 800119a:	2201      	movs	r2, #1
 800119c:	494a      	ldr	r1, [pc, #296]	@ (80012c8 <main+0x904>)
 800119e:	484e      	ldr	r0, [pc, #312]	@ (80012d8 <main+0x914>)
 80011a0:	f000 feec 	bl	8001f7c <SSD1306_Puts>

	  		  SSD1306_GotoXY (0, 11);
 80011a4:	210b      	movs	r1, #11
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 fe54 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("STATUS:           ", &Font_7x10, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	4946      	ldr	r1, [pc, #280]	@ (80012c8 <main+0x904>)
 80011b0:	484a      	ldr	r0, [pc, #296]	@ (80012dc <main+0x918>)
 80011b2:	f000 fee3 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (0, 22);
 80011b6:	2116      	movs	r1, #22
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 fe4b 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("FORCE :           ", &Font_7x10, 1);
 80011be:	2201      	movs	r2, #1
 80011c0:	4941      	ldr	r1, [pc, #260]	@ (80012c8 <main+0x904>)
 80011c2:	4847      	ldr	r0, [pc, #284]	@ (80012e0 <main+0x91c>)
 80011c4:	f000 feda 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (0, 33);
 80011c8:	2121      	movs	r1, #33	@ 0x21
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 fe42 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("LEN   :           ", &Font_7x10, 1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	493d      	ldr	r1, [pc, #244]	@ (80012c8 <main+0x904>)
 80011d4:	4843      	ldr	r0, [pc, #268]	@ (80012e4 <main+0x920>)
 80011d6:	f000 fed1 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (0, 44);
 80011da:	212c      	movs	r1, #44	@ 0x2c
 80011dc:	2000      	movs	r0, #0
 80011de:	f000 fe39 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("TIMES :           ", &Font_7x10, 1);
 80011e2:	2201      	movs	r2, #1
 80011e4:	4938      	ldr	r1, [pc, #224]	@ (80012c8 <main+0x904>)
 80011e6:	4840      	ldr	r0, [pc, #256]	@ (80012e8 <main+0x924>)
 80011e8:	f000 fec8 	bl	8001f7c <SSD1306_Puts>

	  		  SSD1306_UpdateScreen();
 80011ec:	f000 fd8e 	bl	8001d0c <SSD1306_UpdateScreen>
	  		  counter++;
 80011f0:	4b38      	ldr	r3, [pc, #224]	@ (80012d4 <main+0x910>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b36      	ldr	r3, [pc, #216]	@ (80012d4 <main+0x910>)
 80011fa:	701a      	strb	r2, [r3, #0]
	  		  break;
 80011fc:	e1af      	b.n	800155e <main+0xb9a>

	  	  case 10:
	  		  if ((status == 1) && (set_mode == 1))
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <main+0x928>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d17c      	bne.n	8001300 <main+0x93c>
 8001206:	4b2d      	ldr	r3, [pc, #180]	@ (80012bc <main+0x8f8>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d178      	bne.n	8001300 <main+0x93c>
	  		  {
	  			  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001214:	4827      	ldr	r0, [pc, #156]	@ (80012b4 <main+0x8f0>)
 8001216:	f001 fc7a 	bl	8002b0e <HAL_GPIO_WritePin>
	  			  if (set_step == 1)
 800121a:	4b29      	ldr	r3, [pc, #164]	@ (80012c0 <main+0x8fc>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d113      	bne.n	800124a <main+0x886>
	  			  {
	  				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 8001222:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <main+0x92c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800122a:	63da      	str	r2, [r3, #60]	@ 0x3c
	  				  HAL_Delay(1370);
 800122c:	f240 505a 	movw	r0, #1370	@ 0x55a
 8001230:	f001 f9a0 	bl	8002574 <HAL_Delay>
	  				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <main+0x92c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	63da      	str	r2, [r3, #60]	@ 0x3c
	  				  lengh++;
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <main+0x930>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b2b      	ldr	r3, [pc, #172]	@ (80012f4 <main+0x930>)
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e012      	b.n	8001270 <main+0x8ac>
	  			  }
	  			  else
	  			  {
	  				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 800124a:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <main+0x92c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001252:	63da      	str	r2, [r3, #60]	@ 0x3c
	  				  HAL_Delay(2740);
 8001254:	f640 20b4 	movw	r0, #2740	@ 0xab4
 8001258:	f001 f98c 	bl	8002574 <HAL_Delay>
	  				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800125c:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <main+0x92c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2200      	movs	r2, #0
 8001262:	63da      	str	r2, [r3, #60]	@ 0x3c
	  				  lengh = lengh + 2;
 8001264:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <main+0x930>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3302      	adds	r3, #2
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <main+0x930>)
 800126e:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  force = getForce();
 8001270:	f7ff fb28 	bl	80008c4 <getForce>
 8001274:	4603      	mov	r3, r0
 8001276:	4a20      	ldr	r2, [pc, #128]	@ (80012f8 <main+0x934>)
 8001278:	6013      	str	r3, [r2, #0]
		  		  if (status != 0) {
 800127a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <main+0x928>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00a      	beq.n	8001298 <main+0x8d4>
		  			  send_values(force, lengh, times);
 8001282:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <main+0x934>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <main+0x930>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <main+0x938>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	f7ff fb72 	bl	800097c <send_values>
		  		  }
	  			  if (lengh >= set_lengh)	{
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <main+0x930>)
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <main+0x90c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f0c0 80e9 	bcc.w	8001478 <main+0xab4>
	  				  status = 0;
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <main+0x928>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
	  				  times = 1;
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <main+0x938>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
	  			  if (lengh >= set_lengh)	{
 80012b2:	e0e1      	b.n	8001478 <main+0xab4>
 80012b4:	40010800 	.word	0x40010800
 80012b8:	20000008 	.word	0x20000008
 80012bc:	2000000c 	.word	0x2000000c
 80012c0:	2000000e 	.word	0x2000000e
 80012c4:	2000000d 	.word	0x2000000d
 80012c8:	20000000 	.word	0x20000000
 80012cc:	08005e98 	.word	0x08005e98
 80012d0:	2000000f 	.word	0x2000000f
 80012d4:	2000020c 	.word	0x2000020c
 80012d8:	08005dac 	.word	0x08005dac
 80012dc:	08005ea0 	.word	0x08005ea0
 80012e0:	08005eb4 	.word	0x08005eb4
 80012e4:	08005ec8 	.word	0x08005ec8
 80012e8:	08005edc 	.word	0x08005edc
 80012ec:	2000020d 	.word	0x2000020d
 80012f0:	200000ec 	.word	0x200000ec
 80012f4:	20000210 	.word	0x20000210
 80012f8:	2000021c 	.word	0x2000021c
 80012fc:	2000020f 	.word	0x2000020f
	  			  }
	  		  }
	  		  else if ((status == 1) && (set_mode == 2))
 8001300:	4b98      	ldr	r3, [pc, #608]	@ (8001564 <main+0xba0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	f040 80b7 	bne.w	8001478 <main+0xab4>
 800130a:	4b97      	ldr	r3, [pc, #604]	@ (8001568 <main+0xba4>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b02      	cmp	r3, #2
 8001310:	f040 80b2 	bne.w	8001478 <main+0xab4>
	  		  {
	  			  if (limitswitch == 0)
 8001314:	4b95      	ldr	r3, [pc, #596]	@ (800156c <main+0xba8>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d14e      	bne.n	80013ba <main+0x9f6>
	  			  {
					  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001322:	4893      	ldr	r0, [pc, #588]	@ (8001570 <main+0xbac>)
 8001324:	f001 fbf3 	bl	8002b0e <HAL_GPIO_WritePin>
					  if (set_step == 1) {
 8001328:	4b92      	ldr	r3, [pc, #584]	@ (8001574 <main+0xbb0>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d113      	bne.n	8001358 <main+0x994>
						  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 8001330:	4b91      	ldr	r3, [pc, #580]	@ (8001578 <main+0xbb4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001338:	63da      	str	r2, [r3, #60]	@ 0x3c
						  HAL_Delay(1370);
 800133a:	f240 505a 	movw	r0, #1370	@ 0x55a
 800133e:	f001 f919 	bl	8002574 <HAL_Delay>
						  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001342:	4b8d      	ldr	r3, [pc, #564]	@ (8001578 <main+0xbb4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	63da      	str	r2, [r3, #60]	@ 0x3c
						  lengh++;
 800134a:	4b8c      	ldr	r3, [pc, #560]	@ (800157c <main+0xbb8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b8a      	ldr	r3, [pc, #552]	@ (800157c <main+0xbb8>)
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	e012      	b.n	800137e <main+0x9ba>
					  }
					  else {
						  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 8001358:	4b87      	ldr	r3, [pc, #540]	@ (8001578 <main+0xbb4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001360:	63da      	str	r2, [r3, #60]	@ 0x3c
						  HAL_Delay(2740);
 8001362:	f640 20b4 	movw	r0, #2740	@ 0xab4
 8001366:	f001 f905 	bl	8002574 <HAL_Delay>
						  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800136a:	4b83      	ldr	r3, [pc, #524]	@ (8001578 <main+0xbb4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c
						  lengh = lengh + 2;
 8001372:	4b82      	ldr	r3, [pc, #520]	@ (800157c <main+0xbb8>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	3302      	adds	r3, #2
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b80      	ldr	r3, [pc, #512]	@ (800157c <main+0xbb8>)
 800137c:	701a      	strb	r2, [r3, #0]
					  }
					  force = getForce();
 800137e:	f7ff faa1 	bl	80008c4 <getForce>
 8001382:	4603      	mov	r3, r0
 8001384:	4a7e      	ldr	r2, [pc, #504]	@ (8001580 <main+0xbbc>)
 8001386:	6013      	str	r3, [r2, #0]
			  		  if (status != 0) {
 8001388:	4b76      	ldr	r3, [pc, #472]	@ (8001564 <main+0xba0>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00a      	beq.n	80013a6 <main+0x9e2>
			  			  send_values(force, lengh, times);
 8001390:	4b7b      	ldr	r3, [pc, #492]	@ (8001580 <main+0xbbc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	4b79      	ldr	r3, [pc, #484]	@ (800157c <main+0xbb8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	4619      	mov	r1, r3
 800139c:	4b79      	ldr	r3, [pc, #484]	@ (8001584 <main+0xbc0>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	f7ff faeb 	bl	800097c <send_values>
			  		  }
					  if (lengh == set_lengh){
 80013a6:	4b75      	ldr	r3, [pc, #468]	@ (800157c <main+0xbb8>)
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	4b77      	ldr	r3, [pc, #476]	@ (8001588 <main+0xbc4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d162      	bne.n	8001478 <main+0xab4>
						  limitswitch = 1;
 80013b2:	4b6e      	ldr	r3, [pc, #440]	@ (800156c <main+0xba8>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e05e      	b.n	8001478 <main+0xab4>
					  }
	  			  }
	  			  else if (limitswitch == 1)
 80013ba:	4b6c      	ldr	r3, [pc, #432]	@ (800156c <main+0xba8>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d15a      	bne.n	8001478 <main+0xab4>
	  			  {
	  				  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013c8:	4869      	ldr	r0, [pc, #420]	@ (8001570 <main+0xbac>)
 80013ca:	f001 fba0 	bl	8002b0e <HAL_GPIO_WritePin>
	  				  if (set_step == 1) {
 80013ce:	4b69      	ldr	r3, [pc, #420]	@ (8001574 <main+0xbb0>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d113      	bne.n	80013fe <main+0xa3a>
	  					  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 80013d6:	4b68      	ldr	r3, [pc, #416]	@ (8001578 <main+0xbb4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80013de:	63da      	str	r2, [r3, #60]	@ 0x3c
	  					  HAL_Delay(1370);
 80013e0:	f240 505a 	movw	r0, #1370	@ 0x55a
 80013e4:	f001 f8c6 	bl	8002574 <HAL_Delay>
	  					  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80013e8:	4b63      	ldr	r3, [pc, #396]	@ (8001578 <main+0xbb4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	  					  lengh--;
 80013f0:	4b62      	ldr	r3, [pc, #392]	@ (800157c <main+0xbb8>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b60      	ldr	r3, [pc, #384]	@ (800157c <main+0xbb8>)
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	e012      	b.n	8001424 <main+0xa60>
	  				  }
	  				  else {
	  					  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 80013fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001578 <main+0xbb4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001406:	63da      	str	r2, [r3, #60]	@ 0x3c
	  					  HAL_Delay(2740);
 8001408:	f640 20b4 	movw	r0, #2740	@ 0xab4
 800140c:	f001 f8b2 	bl	8002574 <HAL_Delay>
	  					  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001410:	4b59      	ldr	r3, [pc, #356]	@ (8001578 <main+0xbb4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	63da      	str	r2, [r3, #60]	@ 0x3c
	  					  lengh = lengh - 2;
 8001418:	4b58      	ldr	r3, [pc, #352]	@ (800157c <main+0xbb8>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	3b02      	subs	r3, #2
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b56      	ldr	r3, [pc, #344]	@ (800157c <main+0xbb8>)
 8001422:	701a      	strb	r2, [r3, #0]
	  				  }
	  				  force = getForce();
 8001424:	f7ff fa4e 	bl	80008c4 <getForce>
 8001428:	4603      	mov	r3, r0
 800142a:	4a55      	ldr	r2, [pc, #340]	@ (8001580 <main+0xbbc>)
 800142c:	6013      	str	r3, [r2, #0]
	  		  		  if (status != 0) {
 800142e:	4b4d      	ldr	r3, [pc, #308]	@ (8001564 <main+0xba0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00a      	beq.n	800144c <main+0xa88>
	  		  			  send_values(force, lengh, times);
 8001436:	4b52      	ldr	r3, [pc, #328]	@ (8001580 <main+0xbbc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	4b4f      	ldr	r3, [pc, #316]	@ (800157c <main+0xbb8>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	4b50      	ldr	r3, [pc, #320]	@ (8001584 <main+0xbc0>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	f7ff fa98 	bl	800097c <send_values>
	  		  		  }
	  				  if (lengh == 0){
 800144c:	4b4b      	ldr	r3, [pc, #300]	@ (800157c <main+0xbb8>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d111      	bne.n	8001478 <main+0xab4>
	  					  times++;
 8001454:	4b4b      	ldr	r3, [pc, #300]	@ (8001584 <main+0xbc0>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b49      	ldr	r3, [pc, #292]	@ (8001584 <main+0xbc0>)
 800145e:	701a      	strb	r2, [r3, #0]
	  					  limitswitch = 0;
 8001460:	4b42      	ldr	r3, [pc, #264]	@ (800156c <main+0xba8>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
	  					  if (times == set_times) status = 0;
 8001466:	4b47      	ldr	r3, [pc, #284]	@ (8001584 <main+0xbc0>)
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	4b48      	ldr	r3, [pc, #288]	@ (800158c <main+0xbc8>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d102      	bne.n	8001478 <main+0xab4>
 8001472:	4b3c      	ldr	r3, [pc, #240]	@ (8001564 <main+0xba0>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
	  				  }
	  			  }
	  		  }

	  		  counter++;
 8001478:	4b45      	ldr	r3, [pc, #276]	@ (8001590 <main+0xbcc>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b43      	ldr	r3, [pc, #268]	@ (8001590 <main+0xbcc>)
 8001482:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001484:	e06b      	b.n	800155e <main+0xb9a>

	  	  case 11:

	  		  if (status == 0){
 8001486:	4b37      	ldr	r3, [pc, #220]	@ (8001564 <main+0xba0>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d108      	bne.n	80014a0 <main+0xadc>
	  			  SSD1306_GotoXY (56, 11);
 800148e:	210b      	movs	r1, #11
 8001490:	2038      	movs	r0, #56	@ 0x38
 8001492:	f000 fcdf 	bl	8001e54 <SSD1306_GotoXY>
	  			  SSD1306_Puts ("STOP     ", &Font_7x10, 1);
 8001496:	2201      	movs	r2, #1
 8001498:	493e      	ldr	r1, [pc, #248]	@ (8001594 <main+0xbd0>)
 800149a:	483f      	ldr	r0, [pc, #252]	@ (8001598 <main+0xbd4>)
 800149c:	f000 fd6e 	bl	8001f7c <SSD1306_Puts>
	  		  }
	  		  SSD1306_GotoXY (56, 22);
 80014a0:	2116      	movs	r1, #22
 80014a2:	2038      	movs	r0, #56	@ 0x38
 80014a4:	f000 fcd6 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("      ", &Font_7x10, 1);
 80014a8:	2201      	movs	r2, #1
 80014aa:	493a      	ldr	r1, [pc, #232]	@ (8001594 <main+0xbd0>)
 80014ac:	483b      	ldr	r0, [pc, #236]	@ (800159c <main+0xbd8>)
 80014ae:	f000 fd65 	bl	8001f7c <SSD1306_Puts>
	  		  itoa(force, sum, 10);
 80014b2:	4b33      	ldr	r3, [pc, #204]	@ (8001580 <main+0xbbc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1d39      	adds	r1, r7, #4
 80014b8:	220a      	movs	r2, #10
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 ff4c 	bl	8005358 <itoa>
	  		  SSD1306_GotoXY (56, 22);
 80014c0:	2116      	movs	r1, #22
 80014c2:	2038      	movs	r0, #56	@ 0x38
 80014c4:	f000 fcc6 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts (sum, &Font_7x10, 1);
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2201      	movs	r2, #1
 80014cc:	4931      	ldr	r1, [pc, #196]	@ (8001594 <main+0xbd0>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fd54 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (56, 33);
 80014d4:	2121      	movs	r1, #33	@ 0x21
 80014d6:	2038      	movs	r0, #56	@ 0x38
 80014d8:	f000 fcbc 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("      ", &Font_7x10, 1);
 80014dc:	2201      	movs	r2, #1
 80014de:	492d      	ldr	r1, [pc, #180]	@ (8001594 <main+0xbd0>)
 80014e0:	482e      	ldr	r0, [pc, #184]	@ (800159c <main+0xbd8>)
 80014e2:	f000 fd4b 	bl	8001f7c <SSD1306_Puts>
	  		  itoa(lengh, sum, 10);
 80014e6:	4b25      	ldr	r3, [pc, #148]	@ (800157c <main+0xbb8>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	220a      	movs	r2, #10
 80014f0:	4619      	mov	r1, r3
 80014f2:	f003 ff31 	bl	8005358 <itoa>
	  		  SSD1306_GotoXY (56, 33);
 80014f6:	2121      	movs	r1, #33	@ 0x21
 80014f8:	2038      	movs	r0, #56	@ 0x38
 80014fa:	f000 fcab 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts (sum, &Font_7x10, 1);
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2201      	movs	r2, #1
 8001502:	4924      	ldr	r1, [pc, #144]	@ (8001594 <main+0xbd0>)
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fd39 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_GotoXY (56, 44);
 800150a:	212c      	movs	r1, #44	@ 0x2c
 800150c:	2038      	movs	r0, #56	@ 0x38
 800150e:	f000 fca1 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("      ", &Font_7x10, 1);
 8001512:	2201      	movs	r2, #1
 8001514:	491f      	ldr	r1, [pc, #124]	@ (8001594 <main+0xbd0>)
 8001516:	4821      	ldr	r0, [pc, #132]	@ (800159c <main+0xbd8>)
 8001518:	f000 fd30 	bl	8001f7c <SSD1306_Puts>
	  		  itoa(times, sum, 10);
 800151c:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <main+0xbc0>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	220a      	movs	r2, #10
 8001526:	4619      	mov	r1, r3
 8001528:	f003 ff16 	bl	8005358 <itoa>
	  		  SSD1306_GotoXY (56, 44);
 800152c:	212c      	movs	r1, #44	@ 0x2c
 800152e:	2038      	movs	r0, #56	@ 0x38
 8001530:	f000 fc90 	bl	8001e54 <SSD1306_GotoXY>
	  		  SSD1306_Puts (sum, &Font_7x10, 1);
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2201      	movs	r2, #1
 8001538:	4916      	ldr	r1, [pc, #88]	@ (8001594 <main+0xbd0>)
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fd1e 	bl	8001f7c <SSD1306_Puts>
	  		  SSD1306_UpdateScreen();
 8001540:	f000 fbe4 	bl	8001d0c <SSD1306_UpdateScreen>
	  		  counter--;
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <main+0xbcc>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	3b01      	subs	r3, #1
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <main+0xbcc>)
 800154e:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001550:	e005      	b.n	800155e <main+0xb9a>
	  		  break;
 8001552:	bf00      	nop
 8001554:	f7ff ba8f 	b.w	8000a76 <main+0xb2>
	  		  break;
 8001558:	bf00      	nop
 800155a:	f7ff ba8c 	b.w	8000a76 <main+0xb2>
	  switch (counter)
 800155e:	f7ff ba8a 	b.w	8000a76 <main+0xb2>
 8001562:	bf00      	nop
 8001564:	2000020d 	.word	0x2000020d
 8001568:	2000000c 	.word	0x2000000c
 800156c:	2000020e 	.word	0x2000020e
 8001570:	40010800 	.word	0x40010800
 8001574:	2000000e 	.word	0x2000000e
 8001578:	200000ec 	.word	0x200000ec
 800157c:	20000210 	.word	0x20000210
 8001580:	2000021c 	.word	0x2000021c
 8001584:	2000020f 	.word	0x2000020f
 8001588:	2000000f 	.word	0x2000000f
 800158c:	2000000d 	.word	0x2000000d
 8001590:	2000020c 	.word	0x2000020c
 8001594:	20000000 	.word	0x20000000
 8001598:	08005ef0 	.word	0x08005ef0
 800159c:	08005e98 	.word	0x08005e98

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b090      	sub	sp, #64	@ 0x40
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0318 	add.w	r3, r7, #24
 80015aa:	2228      	movs	r2, #40	@ 0x28
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 ff36 	bl	8005420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d4:	2302      	movs	r3, #2
 80015d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015de:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e4:	f107 0318 	add.w	r3, r7, #24
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 f873 	bl	80036d4 <HAL_RCC_OscConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015f4:	f000 fa4a 	bl	8001a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f8:	230f      	movs	r3, #15
 80015fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fc:	2302      	movs	r3, #2
 80015fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2102      	movs	r1, #2
 8001612:	4618      	mov	r0, r3
 8001614:	f002 fae0 	bl	8003bd8 <HAL_RCC_ClockConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800161e:	f000 fa35 	bl	8001a8c <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3740      	adds	r7, #64	@ 0x40
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <MX_I2C1_Init+0x50>)
 8001632:	4a13      	ldr	r2, [pc, #76]	@ (8001680 <MX_I2C1_Init+0x54>)
 8001634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <MX_I2C1_Init+0x50>)
 8001638:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <MX_I2C1_Init+0x58>)
 800163a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <MX_I2C1_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <MX_I2C1_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <MX_I2C1_Init+0x50>)
 800164a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800164e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	@ (800167c <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	@ (800167c <MX_I2C1_Init+0x50>)
 800166a:	f001 fa69 	bl	8002b40 <HAL_I2C_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001674:	f000 fa0a 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000098 	.word	0x20000098
 8001680:	40005400 	.word	0x40005400
 8001684:	00061a80 	.word	0x00061a80

08001688 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b096      	sub	sp, #88	@ 0x58
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	615a      	str	r2, [r3, #20]
 80016b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2220      	movs	r2, #32
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 fead 	bl	8005420 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016c6:	4b3e      	ldr	r3, [pc, #248]	@ (80017c0 <MX_TIM1_Init+0x138>)
 80016c8:	4a3e      	ldr	r2, [pc, #248]	@ (80017c4 <MX_TIM1_Init+0x13c>)
 80016ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80016cc:	4b3c      	ldr	r3, [pc, #240]	@ (80017c0 <MX_TIM1_Init+0x138>)
 80016ce:	2247      	movs	r2, #71	@ 0x47
 80016d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	4b3b      	ldr	r3, [pc, #236]	@ (80017c0 <MX_TIM1_Init+0x138>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80016d8:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <MX_TIM1_Init+0x138>)
 80016da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b37      	ldr	r3, [pc, #220]	@ (80017c0 <MX_TIM1_Init+0x138>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016e6:	4b36      	ldr	r3, [pc, #216]	@ (80017c0 <MX_TIM1_Init+0x138>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ec:	4b34      	ldr	r3, [pc, #208]	@ (80017c0 <MX_TIM1_Init+0x138>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016f2:	4833      	ldr	r0, [pc, #204]	@ (80017c0 <MX_TIM1_Init+0x138>)
 80016f4:	f002 fbfe 	bl	8003ef4 <HAL_TIM_Base_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016fe:	f000 f9c5 	bl	8001a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001706:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001708:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800170c:	4619      	mov	r1, r3
 800170e:	482c      	ldr	r0, [pc, #176]	@ (80017c0 <MX_TIM1_Init+0x138>)
 8001710:	f002 ff88 	bl	8004624 <HAL_TIM_ConfigClockSource>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800171a:	f000 f9b7 	bl	8001a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800171e:	4828      	ldr	r0, [pc, #160]	@ (80017c0 <MX_TIM1_Init+0x138>)
 8001720:	f002 fcd4 	bl	80040cc <HAL_TIM_PWM_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800172a:	f000 f9af 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001736:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800173a:	4619      	mov	r1, r3
 800173c:	4820      	ldr	r0, [pc, #128]	@ (80017c0 <MX_TIM1_Init+0x138>)
 800173e:	f003 fb0d 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001748:	f000 f9a0 	bl	8001a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174c:	2360      	movs	r3, #96	@ 0x60
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176c:	2208      	movs	r2, #8
 800176e:	4619      	mov	r1, r3
 8001770:	4813      	ldr	r0, [pc, #76]	@ (80017c0 <MX_TIM1_Init+0x138>)
 8001772:	f002 fe95 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800177c:	f000 f986 	bl	8001a8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001798:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4807      	ldr	r0, [pc, #28]	@ (80017c0 <MX_TIM1_Init+0x138>)
 80017a4:	f003 fb38 	bl	8004e18 <HAL_TIMEx_ConfigBreakDeadTime>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80017ae:	f000 f96d 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017b2:	4803      	ldr	r0, [pc, #12]	@ (80017c0 <MX_TIM1_Init+0x138>)
 80017b4:	f000 fd64 	bl	8002280 <HAL_TIM_MspPostInit>

}
 80017b8:	bf00      	nop
 80017ba:	3758      	adds	r7, #88	@ 0x58
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200000ec 	.word	0x200000ec
 80017c4:	40012c00 	.word	0x40012c00

080017c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017dc:	463b      	mov	r3, r7
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <MX_TIM2_Init+0x94>)
 80017e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <MX_TIM2_Init+0x94>)
 80017ee:	2247      	movs	r2, #71	@ 0x47
 80017f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <MX_TIM2_Init+0x94>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017f8:	4b18      	ldr	r3, [pc, #96]	@ (800185c <MX_TIM2_Init+0x94>)
 80017fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001800:	4b16      	ldr	r3, [pc, #88]	@ (800185c <MX_TIM2_Init+0x94>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <MX_TIM2_Init+0x94>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800180c:	4813      	ldr	r0, [pc, #76]	@ (800185c <MX_TIM2_Init+0x94>)
 800180e:	f002 fb71 	bl	8003ef4 <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001818:	f000 f938 	bl	8001a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4619      	mov	r1, r3
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <MX_TIM2_Init+0x94>)
 800182a:	f002 fefb 	bl	8004624 <HAL_TIM_ConfigClockSource>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001834:	f000 f92a 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001840:	463b      	mov	r3, r7
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_TIM2_Init+0x94>)
 8001846:	f003 fa89 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001850:	f000 f91c 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000134 	.word	0x20000134

08001860 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001874:	463b      	mov	r3, r7
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800187c:	4b1d      	ldr	r3, [pc, #116]	@ (80018f4 <MX_TIM4_Init+0x94>)
 800187e:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <MX_TIM4_Init+0x98>)
 8001880:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17999;
 8001882:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <MX_TIM4_Init+0x94>)
 8001884:	f244 624f 	movw	r2, #17999	@ 0x464f
 8001888:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <MX_TIM4_Init+0x94>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 8001890:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <MX_TIM4_Init+0x94>)
 8001892:	f240 128f 	movw	r2, #399	@ 0x18f
 8001896:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001898:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <MX_TIM4_Init+0x94>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <MX_TIM4_Init+0x94>)
 80018a0:	2280      	movs	r2, #128	@ 0x80
 80018a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018a4:	4813      	ldr	r0, [pc, #76]	@ (80018f4 <MX_TIM4_Init+0x94>)
 80018a6:	f002 fb25 	bl	8003ef4 <HAL_TIM_Base_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80018b0:	f000 f8ec 	bl	8001a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	4619      	mov	r1, r3
 80018c0:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <MX_TIM4_Init+0x94>)
 80018c2:	f002 feaf 	bl	8004624 <HAL_TIM_ConfigClockSource>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80018cc:	f000 f8de 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_TIM4_Init+0x94>)
 80018de:	f003 fa3d 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80018e8:	f000 f8d0 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000017c 	.word	0x2000017c
 80018f8:	40000800 	.word	0x40000800

080018fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <MX_USART3_UART_Init+0x50>)
 8001904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001908:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800190c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_USART3_UART_Init+0x4c>)
 8001934:	f003 fad3 	bl	8004ede <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800193e:	f000 f8a5 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001c4 	.word	0x200001c4
 800194c:	40004800 	.word	0x40004800

08001950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001964:	4b45      	ldr	r3, [pc, #276]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a44      	ldr	r2, [pc, #272]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 800196a:	f043 0310 	orr.w	r3, r3, #16
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b42      	ldr	r3, [pc, #264]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a3e      	ldr	r2, [pc, #248]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 8001982:	f043 0320 	orr.w	r3, r3, #32
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b3c      	ldr	r3, [pc, #240]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	4b39      	ldr	r3, [pc, #228]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a38      	ldr	r2, [pc, #224]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 800199a:	f043 0304 	orr.w	r3, r3, #4
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b36      	ldr	r3, [pc, #216]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ac:	4b33      	ldr	r3, [pc, #204]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a32      	ldr	r2, [pc, #200]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 80019b2:	f043 0308 	orr.w	r3, r3, #8
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b30      	ldr	r3, [pc, #192]	@ (8001a7c <MX_GPIO_Init+0x12c>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ca:	482d      	ldr	r0, [pc, #180]	@ (8001a80 <MX_GPIO_Init+0x130>)
 80019cc:	f001 f89f 	bl	8002b0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019d6:	482b      	ldr	r0, [pc, #172]	@ (8001a84 <MX_GPIO_Init+0x134>)
 80019d8:	f001 f899 	bl	8002b0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019e2:	4829      	ldr	r0, [pc, #164]	@ (8001a88 <MX_GPIO_Init+0x138>)
 80019e4:	f001 f893 	bl	8002b0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 0310 	add.w	r3, r7, #16
 80019fe:	4619      	mov	r1, r3
 8001a00:	481f      	ldr	r0, [pc, #124]	@ (8001a80 <MX_GPIO_Init+0x130>)
 8001a02:	f000 fee9 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_STOP_Pin EMERGENCY_Pin MOVE_DOWN_Pin MOVE_UP_Pin
                           SUBTRACTION_Pin ADDITION_Pin */
  GPIO_InitStruct.Pin = START_STOP_Pin|EMERGENCY_Pin|MOVE_DOWN_Pin|MOVE_UP_Pin
 8001a06:	233f      	movs	r3, #63	@ 0x3f
 8001a08:	613b      	str	r3, [r7, #16]
                          |SUBTRACTION_Pin|ADDITION_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	4619      	mov	r1, r3
 8001a18:	481a      	ldr	r0, [pc, #104]	@ (8001a84 <MX_GPIO_Init+0x134>)
 8001a1a:	f000 fedd 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8001a1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	4619      	mov	r1, r3
 8001a36:	4813      	ldr	r0, [pc, #76]	@ (8001a84 <MX_GPIO_Init+0x134>)
 8001a38:	f000 fece 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480d      	ldr	r0, [pc, #52]	@ (8001a88 <MX_GPIO_Init+0x138>)
 8001a52:	f000 fec1 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4806      	ldr	r0, [pc, #24]	@ (8001a88 <MX_GPIO_Init+0x138>)
 8001a70:	f000 feb2 	bl	80027d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40011000 	.word	0x40011000
 8001a84:	40010800 	.word	0x40010800
 8001a88:	40010c00 	.word	0x40010c00

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <Error_Handler+0x8>

08001a98 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8001aa8:	2226      	movs	r2, #38	@ 0x26
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2078      	movs	r0, #120	@ 0x78
 8001aae:	f000 fb0d 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2078      	movs	r0, #120	@ 0x78
 8001ab8:	f000 fb08 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2078      	movs	r0, #120	@ 0x78
 8001ac4:	f000 fb02 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	2078      	movs	r0, #120	@ 0x78
 8001ace:	f000 fafd 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2078      	movs	r0, #120	@ 0x78
 8001ada:	f000 faf7 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2078      	movs	r0, #120	@ 0x78
 8001ae4:	f000 faf2 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001ae8:	22ff      	movs	r2, #255	@ 0xff
 8001aea:	2100      	movs	r1, #0
 8001aec:	2078      	movs	r0, #120	@ 0x78
 8001aee:	f000 faed 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001af2:	222f      	movs	r2, #47	@ 0x2f
 8001af4:	2100      	movs	r1, #0
 8001af6:	2078      	movs	r0, #120	@ 0x78
 8001af8:	f000 fae8 	bl	80020cc <ssd1306_I2C_Write>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	4613      	mov	r3, r2
 8001b12:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8001b14:	2227      	movs	r2, #39	@ 0x27
 8001b16:	2100      	movs	r1, #0
 8001b18:	2078      	movs	r0, #120	@ 0x78
 8001b1a:	f000 fad7 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2078      	movs	r0, #120	@ 0x78
 8001b24:	f000 fad2 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2078      	movs	r0, #120	@ 0x78
 8001b30:	f000 facc 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2078      	movs	r0, #120	@ 0x78
 8001b3a:	f000 fac7 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001b3e:	79bb      	ldrb	r3, [r7, #6]
 8001b40:	461a      	mov	r2, r3
 8001b42:	2100      	movs	r1, #0
 8001b44:	2078      	movs	r0, #120	@ 0x78
 8001b46:	f000 fac1 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2078      	movs	r0, #120	@ 0x78
 8001b50:	f000 fabc 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001b54:	22ff      	movs	r2, #255	@ 0xff
 8001b56:	2100      	movs	r1, #0
 8001b58:	2078      	movs	r0, #120	@ 0x78
 8001b5a:	f000 fab7 	bl	80020cc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001b5e:	222f      	movs	r2, #47	@ 0x2f
 8001b60:	2100      	movs	r1, #0
 8001b62:	2078      	movs	r0, #120	@ 0x78
 8001b64:	f000 fab2 	bl	80020cc <ssd1306_I2C_Write>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b74:	222e      	movs	r2, #46	@ 0x2e
 8001b76:	2100      	movs	r1, #0
 8001b78:	2078      	movs	r0, #120	@ 0x78
 8001b7a:	f000 faa7 	bl	80020cc <ssd1306_I2C_Write>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001b8a:	f000 fa25 	bl	8001fd8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001b8e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001b92:	2201      	movs	r2, #1
 8001b94:	2178      	movs	r1, #120	@ 0x78
 8001b96:	485b      	ldr	r0, [pc, #364]	@ (8001d04 <SSD1306_Init+0x180>)
 8001b98:	f001 fa14 	bl	8002fc4 <HAL_I2C_IsDeviceReady>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e0a9      	b.n	8001cfa <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001ba6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001baa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bac:	e002      	b.n	8001bb4 <SSD1306_Init+0x30>
		p--;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f9      	bne.n	8001bae <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001bba:	22ae      	movs	r2, #174	@ 0xae
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2078      	movs	r0, #120	@ 0x78
 8001bc0:	f000 fa84 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2078      	movs	r0, #120	@ 0x78
 8001bca:	f000 fa7f 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001bce:	2210      	movs	r2, #16
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2078      	movs	r0, #120	@ 0x78
 8001bd4:	f000 fa7a 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bd8:	22b0      	movs	r2, #176	@ 0xb0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2078      	movs	r0, #120	@ 0x78
 8001bde:	f000 fa75 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001be2:	22c8      	movs	r2, #200	@ 0xc8
 8001be4:	2100      	movs	r1, #0
 8001be6:	2078      	movs	r0, #120	@ 0x78
 8001be8:	f000 fa70 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2078      	movs	r0, #120	@ 0x78
 8001bf2:	f000 fa6b 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2078      	movs	r0, #120	@ 0x78
 8001bfc:	f000 fa66 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001c00:	2240      	movs	r2, #64	@ 0x40
 8001c02:	2100      	movs	r1, #0
 8001c04:	2078      	movs	r0, #120	@ 0x78
 8001c06:	f000 fa61 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001c0a:	2281      	movs	r2, #129	@ 0x81
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2078      	movs	r0, #120	@ 0x78
 8001c10:	f000 fa5c 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001c14:	22ff      	movs	r2, #255	@ 0xff
 8001c16:	2100      	movs	r1, #0
 8001c18:	2078      	movs	r0, #120	@ 0x78
 8001c1a:	f000 fa57 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001c1e:	22a1      	movs	r2, #161	@ 0xa1
 8001c20:	2100      	movs	r1, #0
 8001c22:	2078      	movs	r0, #120	@ 0x78
 8001c24:	f000 fa52 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001c28:	22a6      	movs	r2, #166	@ 0xa6
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2078      	movs	r0, #120	@ 0x78
 8001c2e:	f000 fa4d 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001c32:	22a8      	movs	r2, #168	@ 0xa8
 8001c34:	2100      	movs	r1, #0
 8001c36:	2078      	movs	r0, #120	@ 0x78
 8001c38:	f000 fa48 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001c3c:	223f      	movs	r2, #63	@ 0x3f
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2078      	movs	r0, #120	@ 0x78
 8001c42:	f000 fa43 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c46:	22a4      	movs	r2, #164	@ 0xa4
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2078      	movs	r0, #120	@ 0x78
 8001c4c:	f000 fa3e 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001c50:	22d3      	movs	r2, #211	@ 0xd3
 8001c52:	2100      	movs	r1, #0
 8001c54:	2078      	movs	r0, #120	@ 0x78
 8001c56:	f000 fa39 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2078      	movs	r0, #120	@ 0x78
 8001c60:	f000 fa34 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c64:	22d5      	movs	r2, #213	@ 0xd5
 8001c66:	2100      	movs	r1, #0
 8001c68:	2078      	movs	r0, #120	@ 0x78
 8001c6a:	f000 fa2f 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001c6e:	22f0      	movs	r2, #240	@ 0xf0
 8001c70:	2100      	movs	r1, #0
 8001c72:	2078      	movs	r0, #120	@ 0x78
 8001c74:	f000 fa2a 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001c78:	22d9      	movs	r2, #217	@ 0xd9
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2078      	movs	r0, #120	@ 0x78
 8001c7e:	f000 fa25 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001c82:	2222      	movs	r2, #34	@ 0x22
 8001c84:	2100      	movs	r1, #0
 8001c86:	2078      	movs	r0, #120	@ 0x78
 8001c88:	f000 fa20 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001c8c:	22da      	movs	r2, #218	@ 0xda
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2078      	movs	r0, #120	@ 0x78
 8001c92:	f000 fa1b 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001c96:	2212      	movs	r2, #18
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2078      	movs	r0, #120	@ 0x78
 8001c9c:	f000 fa16 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001ca0:	22db      	movs	r2, #219	@ 0xdb
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2078      	movs	r0, #120	@ 0x78
 8001ca6:	f000 fa11 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001caa:	2220      	movs	r2, #32
 8001cac:	2100      	movs	r1, #0
 8001cae:	2078      	movs	r0, #120	@ 0x78
 8001cb0:	f000 fa0c 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001cb4:	228d      	movs	r2, #141	@ 0x8d
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2078      	movs	r0, #120	@ 0x78
 8001cba:	f000 fa07 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001cbe:	2214      	movs	r2, #20
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2078      	movs	r0, #120	@ 0x78
 8001cc4:	f000 fa02 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001cc8:	22af      	movs	r2, #175	@ 0xaf
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2078      	movs	r0, #120	@ 0x78
 8001cce:	f000 f9fd 	bl	80020cc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001cd2:	222e      	movs	r2, #46	@ 0x2e
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2078      	movs	r0, #120	@ 0x78
 8001cd8:	f000 f9f8 	bl	80020cc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f000 f843 	bl	8001d68 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001ce2:	f000 f813 	bl	8001d0c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <SSD1306_Init+0x184>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <SSD1306_Init+0x184>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001cf2:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <SSD1306_Init+0x184>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001cf8:	2301      	movs	r3, #1
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000098 	.word	0x20000098
 8001d08:	20000620 	.word	0x20000620

08001d0c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001d12:	2300      	movs	r3, #0
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	e01d      	b.n	8001d54 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	3b50      	subs	r3, #80	@ 0x50
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	2078      	movs	r0, #120	@ 0x78
 8001d24:	f000 f9d2 	bl	80020cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2078      	movs	r0, #120	@ 0x78
 8001d2e:	f000 f9cd 	bl	80020cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001d32:	2210      	movs	r2, #16
 8001d34:	2100      	movs	r1, #0
 8001d36:	2078      	movs	r0, #120	@ 0x78
 8001d38:	f000 f9c8 	bl	80020cc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	01db      	lsls	r3, r3, #7
 8001d40:	4a08      	ldr	r2, [pc, #32]	@ (8001d64 <SSD1306_UpdateScreen+0x58>)
 8001d42:	441a      	add	r2, r3
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	2140      	movs	r1, #64	@ 0x40
 8001d48:	2078      	movs	r0, #120	@ 0x78
 8001d4a:	f000 f959 	bl	8002000 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	3301      	adds	r3, #1
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	2b07      	cmp	r3, #7
 8001d58:	d9de      	bls.n	8001d18 <SSD1306_UpdateScreen+0xc>
	}
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000220 	.word	0x20000220

08001d68 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <SSD1306_Fill+0x14>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e000      	b.n	8001d7e <SSD1306_Fill+0x16>
 8001d7c:	23ff      	movs	r3, #255	@ 0xff
 8001d7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d82:	4619      	mov	r1, r3
 8001d84:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <SSD1306_Fill+0x2c>)
 8001d86:	f003 fb4b 	bl	8005420 <memset>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000220 	.word	0x20000220

08001d98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80fb      	strh	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	80bb      	strh	r3, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	70fb      	strb	r3, [r7, #3]
	if (
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dae:	d848      	bhi.n	8001e42 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001db0:	88bb      	ldrh	r3, [r7, #4]
 8001db2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001db4:	d845      	bhi.n	8001e42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001db6:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <SSD1306_DrawPixel+0xb4>)
 8001db8:	791b      	ldrb	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d11a      	bne.n	8001e08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dd2:	88fa      	ldrh	r2, [r7, #6]
 8001dd4:	88bb      	ldrh	r3, [r7, #4]
 8001dd6:	08db      	lsrs	r3, r3, #3
 8001dd8:	b298      	uxth	r0, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	01db      	lsls	r3, r3, #7
 8001dde:	4413      	add	r3, r2
 8001de0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e50 <SSD1306_DrawPixel+0xb8>)
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
 8001de4:	b25a      	sxtb	r2, r3
 8001de6:	88bb      	ldrh	r3, [r7, #4]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b259      	sxtb	r1, r3
 8001df8:	88fa      	ldrh	r2, [r7, #6]
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	01db      	lsls	r3, r3, #7
 8001dfe:	4413      	add	r3, r2
 8001e00:	b2c9      	uxtb	r1, r1
 8001e02:	4a13      	ldr	r2, [pc, #76]	@ (8001e50 <SSD1306_DrawPixel+0xb8>)
 8001e04:	54d1      	strb	r1, [r2, r3]
 8001e06:	e01d      	b.n	8001e44 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e08:	88fa      	ldrh	r2, [r7, #6]
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	b298      	uxth	r0, r3
 8001e10:	4603      	mov	r3, r0
 8001e12:	01db      	lsls	r3, r3, #7
 8001e14:	4413      	add	r3, r2
 8001e16:	4a0e      	ldr	r2, [pc, #56]	@ (8001e50 <SSD1306_DrawPixel+0xb8>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	b25a      	sxtb	r2, r3
 8001e1c:	88bb      	ldrh	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	2101      	movs	r1, #1
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	b25b      	sxtb	r3, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	4013      	ands	r3, r2
 8001e30:	b259      	sxtb	r1, r3
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	4603      	mov	r3, r0
 8001e36:	01db      	lsls	r3, r3, #7
 8001e38:	4413      	add	r3, r2
 8001e3a:	b2c9      	uxtb	r1, r1
 8001e3c:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <SSD1306_DrawPixel+0xb8>)
 8001e3e:	54d1      	strb	r1, [r2, r3]
 8001e40:	e000      	b.n	8001e44 <SSD1306_DrawPixel+0xac>
		return;
 8001e42:	bf00      	nop
	}
}
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000620 	.word	0x20000620
 8001e50:	20000220 	.word	0x20000220

08001e54 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	80fb      	strh	r3, [r7, #6]
 8001e60:	4613      	mov	r3, r2
 8001e62:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001e64:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <SSD1306_GotoXY+0x28>)
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <SSD1306_GotoXY+0x28>)
 8001e6c:	88bb      	ldrh	r3, [r7, #4]
 8001e6e:	8053      	strh	r3, [r2, #2]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000620 	.word	0x20000620

08001e80 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e90:	4b39      	ldr	r3, [pc, #228]	@ (8001f78 <SSD1306_Putc+0xf8>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
	if (
 8001e9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e9e:	dc07      	bgt.n	8001eb0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001ea0:	4b35      	ldr	r3, [pc, #212]	@ (8001f78 <SSD1306_Putc+0xf8>)
 8001ea2:	885b      	ldrh	r3, [r3, #2]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	785b      	ldrb	r3, [r3, #1]
 8001eaa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001eac:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eae:	dd01      	ble.n	8001eb4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e05d      	b.n	8001f70 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e04b      	b.n	8001f52 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	3b20      	subs	r3, #32
 8001ec2:	6839      	ldr	r1, [r7, #0]
 8001ec4:	7849      	ldrb	r1, [r1, #1]
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4619      	mov	r1, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	440b      	add	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e030      	b.n	8001f40 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d010      	beq.n	8001f10 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001eee:	4b22      	ldr	r3, [pc, #136]	@ (8001f78 <SSD1306_Putc+0xf8>)
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b298      	uxth	r0, r3
 8001efa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <SSD1306_Putc+0xf8>)
 8001efc:	885a      	ldrh	r2, [r3, #2]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	79ba      	ldrb	r2, [r7, #6]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7ff ff45 	bl	8001d98 <SSD1306_DrawPixel>
 8001f0e:	e014      	b.n	8001f3a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001f10:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <SSD1306_Putc+0xf8>)
 8001f12:	881a      	ldrh	r2, [r3, #0]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	b298      	uxth	r0, r3
 8001f1c:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <SSD1306_Putc+0xf8>)
 8001f1e:	885a      	ldrh	r2, [r3, #2]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	b299      	uxth	r1, r3
 8001f28:	79bb      	ldrb	r3, [r7, #6]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	f7ff ff2f 	bl	8001d98 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d3c8      	bcc.n	8001ede <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	785b      	ldrb	r3, [r3, #1]
 8001f56:	461a      	mov	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d3ad      	bcc.n	8001eba <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <SSD1306_Putc+0xf8>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	7812      	ldrb	r2, [r2, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <SSD1306_Putc+0xf8>)
 8001f6c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000620 	.word	0x20000620

08001f7c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	4613      	mov	r3, r2
 8001f88:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001f8a:	e012      	b.n	8001fb2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	68b9      	ldr	r1, [r7, #8]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff73 	bl	8001e80 <SSD1306_Putc>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d002      	beq.n	8001fac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	e008      	b.n	8001fbe <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1e8      	bne.n	8001f8c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff fecc 	bl	8001d68 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001fd0:	f7ff fe9c 	bl	8001d0c <SSD1306_UpdateScreen>
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <ssd1306_I2C_Init+0x24>)
 8001fe0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fe2:	e002      	b.n	8001fea <ssd1306_I2C_Init+0x12>
		p--;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f9      	bne.n	8001fe4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	0003d090 	.word	0x0003d090

08002000 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b0c7      	sub	sp, #284	@ 0x11c
 8002004:	af02      	add	r7, sp, #8
 8002006:	4604      	mov	r4, r0
 8002008:	4608      	mov	r0, r1
 800200a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800200e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002012:	600a      	str	r2, [r1, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800201a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800201e:	4622      	mov	r2, r4
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002026:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800202a:	4602      	mov	r2, r0
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002032:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002036:	460a      	mov	r2, r1
 8002038:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800203a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800203e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002042:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002046:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002054:	e015      	b.n	8002082 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002056:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800205a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800205e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	441a      	add	r2, r3
 8002066:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800206a:	3301      	adds	r3, #1
 800206c:	7811      	ldrb	r1, [r2, #0]
 800206e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002072:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002076:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002078:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800207c:	3301      	adds	r3, #1
 800207e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002082:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002086:	b29b      	uxth	r3, r3
 8002088:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800208c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002090:	8812      	ldrh	r2, [r2, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d8df      	bhi.n	8002056 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800209a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b299      	uxth	r1, r3
 80020a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f107 020c 	add.w	r2, r7, #12
 80020b4:	200a      	movs	r0, #10
 80020b6:	9000      	str	r0, [sp, #0]
 80020b8:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <ssd1306_I2C_WriteMulti+0xc8>)
 80020ba:	f000 fe85 	bl	8002dc8 <HAL_I2C_Master_Transmit>
}
 80020be:	bf00      	nop
 80020c0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd90      	pop	{r4, r7, pc}
 80020c8:	20000098 	.word	0x20000098

080020cc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
 80020d6:	460b      	mov	r3, r1
 80020d8:	71bb      	strb	r3, [r7, #6]
 80020da:	4613      	mov	r3, r2
 80020dc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80020de:	79bb      	ldrb	r3, [r7, #6]
 80020e0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80020e2:	797b      	ldrb	r3, [r7, #5]
 80020e4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	b299      	uxth	r1, r3
 80020ea:	f107 020c 	add.w	r2, r7, #12
 80020ee:	230a      	movs	r3, #10
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2302      	movs	r3, #2
 80020f4:	4803      	ldr	r0, [pc, #12]	@ (8002104 <ssd1306_I2C_Write+0x38>)
 80020f6:	f000 fe67 	bl	8002dc8 <HAL_I2C_Master_Transmit>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000098 	.word	0x20000098

08002108 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <HAL_MspInit+0x5c>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <HAL_MspInit+0x5c>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6193      	str	r3, [r2, #24]
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_MspInit+0x5c>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <HAL_MspInit+0x5c>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a0e      	ldr	r2, [pc, #56]	@ (8002164 <HAL_MspInit+0x5c>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002130:	61d3      	str	r3, [r2, #28]
 8002132:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <HAL_MspInit+0x5c>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_MspInit+0x60>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_MspInit+0x60>)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000

0800216c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a15      	ldr	r2, [pc, #84]	@ (80021dc <HAL_I2C_MspInit+0x70>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d123      	bne.n	80021d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <HAL_I2C_MspInit+0x74>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a13      	ldr	r2, [pc, #76]	@ (80021e0 <HAL_I2C_MspInit+0x74>)
 8002192:	f043 0308 	orr.w	r3, r3, #8
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <HAL_I2C_MspInit+0x74>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021a4:	23c0      	movs	r3, #192	@ 0xc0
 80021a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a8:	2312      	movs	r3, #18
 80021aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	4619      	mov	r1, r3
 80021b6:	480b      	ldr	r0, [pc, #44]	@ (80021e4 <HAL_I2C_MspInit+0x78>)
 80021b8:	f000 fb0e 	bl	80027d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <HAL_I2C_MspInit+0x74>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	4a07      	ldr	r2, [pc, #28]	@ (80021e0 <HAL_I2C_MspInit+0x74>)
 80021c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021c6:	61d3      	str	r3, [r2, #28]
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_I2C_MspInit+0x74>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40005400 	.word	0x40005400
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40010c00 	.word	0x40010c00

080021e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002274 <HAL_TIM_Base_MspInit+0x8c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10c      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <HAL_TIM_Base_MspInit+0x90>)
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002278 <HAL_TIM_Base_MspInit+0x90>)
 8002200:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002204:	6193      	str	r3, [r2, #24]
 8002206:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <HAL_TIM_Base_MspInit+0x90>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002212:	e02a      	b.n	800226a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800221c:	d10c      	bne.n	8002238 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <HAL_TIM_Base_MspInit+0x90>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a15      	ldr	r2, [pc, #84]	@ (8002278 <HAL_TIM_Base_MspInit+0x90>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <HAL_TIM_Base_MspInit+0x90>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
}
 8002236:	e018      	b.n	800226a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0f      	ldr	r2, [pc, #60]	@ (800227c <HAL_TIM_Base_MspInit+0x94>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d113      	bne.n	800226a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002242:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <HAL_TIM_Base_MspInit+0x90>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4a0c      	ldr	r2, [pc, #48]	@ (8002278 <HAL_TIM_Base_MspInit+0x90>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	61d3      	str	r3, [r2, #28]
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_TIM_Base_MspInit+0x90>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	201e      	movs	r0, #30
 8002260:	f000 fa83 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002264:	201e      	movs	r0, #30
 8002266:	f000 fa9c 	bl	80027a2 <HAL_NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40021000 	.word	0x40021000
 800227c:	40000800 	.word	0x40000800

08002280 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a10      	ldr	r2, [pc, #64]	@ (80022dc <HAL_TIM_MspPostInit+0x5c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d118      	bne.n	80022d2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a0:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <HAL_TIM_MspPostInit+0x60>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a0e      	ldr	r2, [pc, #56]	@ (80022e0 <HAL_TIM_MspPostInit+0x60>)
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	6193      	str	r3, [r2, #24]
 80022ac:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <HAL_TIM_MspPostInit+0x60>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c6:	f107 0310 	add.w	r3, r7, #16
 80022ca:	4619      	mov	r1, r3
 80022cc:	4805      	ldr	r0, [pc, #20]	@ (80022e4 <HAL_TIM_MspPostInit+0x64>)
 80022ce:	f000 fa83 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022d2:	bf00      	nop
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40012c00 	.word	0x40012c00
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40010800 	.word	0x40010800

080022e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a1c      	ldr	r2, [pc, #112]	@ (8002374 <HAL_UART_MspInit+0x8c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d131      	bne.n	800236c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_UART_MspInit+0x90>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4a1a      	ldr	r2, [pc, #104]	@ (8002378 <HAL_UART_MspInit+0x90>)
 800230e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002312:	61d3      	str	r3, [r2, #28]
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <HAL_UART_MspInit+0x90>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_UART_MspInit+0x90>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	4a14      	ldr	r2, [pc, #80]	@ (8002378 <HAL_UART_MspInit+0x90>)
 8002326:	f043 0308 	orr.w	r3, r3, #8
 800232a:	6193      	str	r3, [r2, #24]
 800232c:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <HAL_UART_MspInit+0x90>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800233c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	4619      	mov	r1, r3
 800234c:	480b      	ldr	r0, [pc, #44]	@ (800237c <HAL_UART_MspInit+0x94>)
 800234e:	f000 fa43 	bl	80027d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002352:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002360:	f107 0310 	add.w	r3, r7, #16
 8002364:	4619      	mov	r1, r3
 8002366:	4805      	ldr	r0, [pc, #20]	@ (800237c <HAL_UART_MspInit+0x94>)
 8002368:	f000 fa36 	bl	80027d8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800236c:	bf00      	nop
 800236e:	3720      	adds	r7, #32
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40004800 	.word	0x40004800
 8002378:	40021000 	.word	0x40021000
 800237c:	40010c00 	.word	0x40010c00

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <NMI_Handler+0x4>

08002388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <HardFault_Handler+0x4>

08002390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <MemManage_Handler+0x4>

08002398 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <BusFault_Handler+0x4>

080023a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <UsageFault_Handler+0x4>

080023a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d0:	f000 f8b4 	bl	800253c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023dc:	4802      	ldr	r0, [pc, #8]	@ (80023e8 <TIM4_IRQHandler+0x10>)
 80023de:	f001 ff6f 	bl	80042c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000017c 	.word	0x2000017c

080023ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f4:	4a14      	ldr	r2, [pc, #80]	@ (8002448 <_sbrk+0x5c>)
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <_sbrk+0x60>)
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002400:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <_sbrk+0x64>)
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <_sbrk+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d207      	bcs.n	800242c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800241c:	f003 f808 	bl	8005430 <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	220c      	movs	r2, #12
 8002424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	e009      	b.n	8002440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800242c:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002432:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a05      	ldr	r2, [pc, #20]	@ (8002450 <_sbrk+0x64>)
 800243c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20005000 	.word	0x20005000
 800244c:	00000400 	.word	0x00000400
 8002450:	20000628 	.word	0x20000628
 8002454:	20000778 	.word	0x20000778

08002458 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002464:	f7ff fff8 	bl	8002458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002468:	480b      	ldr	r0, [pc, #44]	@ (8002498 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800246a:	490c      	ldr	r1, [pc, #48]	@ (800249c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800246c:	4a0c      	ldr	r2, [pc, #48]	@ (80024a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002470:	e002      	b.n	8002478 <LoopCopyDataInit>

08002472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002476:	3304      	adds	r3, #4

08002478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800247c:	d3f9      	bcc.n	8002472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247e:	4a09      	ldr	r2, [pc, #36]	@ (80024a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002480:	4c09      	ldr	r4, [pc, #36]	@ (80024a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002484:	e001      	b.n	800248a <LoopFillZerobss>

08002486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002488:	3204      	adds	r2, #4

0800248a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800248c:	d3fb      	bcc.n	8002486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800248e:	f002 ffd5 	bl	800543c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002492:	f7fe fa97 	bl	80009c4 <main>
  bx lr
 8002496:	4770      	bx	lr
  ldr r0, =_sdata
 8002498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800249c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80024a0:	080066fc 	.word	0x080066fc
  ldr r2, =_sbss
 80024a4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80024a8:	20000778 	.word	0x20000778

080024ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024ac:	e7fe      	b.n	80024ac <ADC1_2_IRQHandler>
	...

080024b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b4:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <HAL_Init+0x28>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a07      	ldr	r2, [pc, #28]	@ (80024d8 <HAL_Init+0x28>)
 80024ba:	f043 0310 	orr.w	r3, r3, #16
 80024be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c0:	2003      	movs	r0, #3
 80024c2:	f000 f947 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c6:	200f      	movs	r0, #15
 80024c8:	f000 f808 	bl	80024dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024cc:	f7ff fe1c 	bl	8002108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40022000 	.word	0x40022000

080024dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e4:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <HAL_InitTick+0x54>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_InitTick+0x58>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f95f 	bl	80027be <HAL_SYSTICK_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e00e      	b.n	8002528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b0f      	cmp	r3, #15
 800250e:	d80a      	bhi.n	8002526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002510:	2200      	movs	r2, #0
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f000 f927 	bl	800276a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800251c:	4a06      	ldr	r2, [pc, #24]	@ (8002538 <HAL_InitTick+0x5c>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000020 	.word	0x20000020
 8002534:	20000028 	.word	0x20000028
 8002538:	20000024 	.word	0x20000024

0800253c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_IncTick+0x1c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b05      	ldr	r3, [pc, #20]	@ (800255c <HAL_IncTick+0x20>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4413      	add	r3, r2
 800254c:	4a03      	ldr	r2, [pc, #12]	@ (800255c <HAL_IncTick+0x20>)
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	20000028 	.word	0x20000028
 800255c:	2000062c 	.word	0x2000062c

08002560 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return uwTick;
 8002564:	4b02      	ldr	r3, [pc, #8]	@ (8002570 <HAL_GetTick+0x10>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	2000062c 	.word	0x2000062c

08002574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff fff0 	bl	8002560 <HAL_GetTick>
 8002580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d005      	beq.n	800259a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <HAL_Delay+0x44>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800259a:	bf00      	nop
 800259c:	f7ff ffe0 	bl	8002560 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d8f7      	bhi.n	800259c <HAL_Delay+0x28>
  {
  }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000028 	.word	0x20000028

080025bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	@ (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db0b      	blt.n	800264a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4906      	ldr	r1, [pc, #24]	@ (8002654 <__NVIC_EnableIRQ+0x34>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100

08002658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	2b00      	cmp	r3, #0
 800266a:	db0a      	blt.n	8002682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	490c      	ldr	r1, [pc, #48]	@ (80026a4 <__NVIC_SetPriority+0x4c>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	0112      	lsls	r2, r2, #4
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	440b      	add	r3, r1
 800267c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002680:	e00a      	b.n	8002698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4908      	ldr	r1, [pc, #32]	@ (80026a8 <__NVIC_SetPriority+0x50>)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	3b04      	subs	r3, #4
 8002690:	0112      	lsls	r2, r2, #4
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	440b      	add	r3, r1
 8002696:	761a      	strb	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	@ 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f1c3 0307 	rsb	r3, r3, #7
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	bf28      	it	cs
 80026ca:	2304      	movcs	r3, #4
 80026cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d902      	bls.n	80026dc <NVIC_EncodePriority+0x30>
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3b03      	subs	r3, #3
 80026da:	e000      	b.n	80026de <NVIC_EncodePriority+0x32>
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	f04f 32ff 	mov.w	r2, #4294967295
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	401a      	ands	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f4:	f04f 31ff 	mov.w	r1, #4294967295
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	43d9      	mvns	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	4313      	orrs	r3, r2
         );
}
 8002706:	4618      	mov	r0, r3
 8002708:	3724      	adds	r7, #36	@ 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002720:	d301      	bcc.n	8002726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002722:	2301      	movs	r3, #1
 8002724:	e00f      	b.n	8002746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002726:	4a0a      	ldr	r2, [pc, #40]	@ (8002750 <SysTick_Config+0x40>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272e:	210f      	movs	r1, #15
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f7ff ff90 	bl	8002658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <SysTick_Config+0x40>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273e:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <SysTick_Config+0x40>)
 8002740:	2207      	movs	r2, #7
 8002742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	e000e010 	.word	0xe000e010

08002754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff2d 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800277c:	f7ff ff42 	bl	8002604 <__NVIC_GetPriorityGrouping>
 8002780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6978      	ldr	r0, [r7, #20]
 8002788:	f7ff ff90 	bl	80026ac <NVIC_EncodePriority>
 800278c:	4602      	mov	r2, r0
 800278e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff5f 	bl	8002658 <__NVIC_SetPriority>
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff35 	bl	8002620 <__NVIC_EnableIRQ>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ffa2 	bl	8002710 <SysTick_Config>
 80027cc:	4603      	mov	r3, r0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d8:	b480      	push	{r7}
 80027da:	b08b      	sub	sp, #44	@ 0x2c
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ea:	e169      	b.n	8002ac0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027ec:	2201      	movs	r2, #1
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	429a      	cmp	r2, r3
 8002806:	f040 8158 	bne.w	8002aba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a9a      	ldr	r2, [pc, #616]	@ (8002a78 <HAL_GPIO_Init+0x2a0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d05e      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
 8002814:	4a98      	ldr	r2, [pc, #608]	@ (8002a78 <HAL_GPIO_Init+0x2a0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d875      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 800281a:	4a98      	ldr	r2, [pc, #608]	@ (8002a7c <HAL_GPIO_Init+0x2a4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d058      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
 8002820:	4a96      	ldr	r2, [pc, #600]	@ (8002a7c <HAL_GPIO_Init+0x2a4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d86f      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 8002826:	4a96      	ldr	r2, [pc, #600]	@ (8002a80 <HAL_GPIO_Init+0x2a8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d052      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
 800282c:	4a94      	ldr	r2, [pc, #592]	@ (8002a80 <HAL_GPIO_Init+0x2a8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d869      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 8002832:	4a94      	ldr	r2, [pc, #592]	@ (8002a84 <HAL_GPIO_Init+0x2ac>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d04c      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
 8002838:	4a92      	ldr	r2, [pc, #584]	@ (8002a84 <HAL_GPIO_Init+0x2ac>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d863      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 800283e:	4a92      	ldr	r2, [pc, #584]	@ (8002a88 <HAL_GPIO_Init+0x2b0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d046      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
 8002844:	4a90      	ldr	r2, [pc, #576]	@ (8002a88 <HAL_GPIO_Init+0x2b0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d85d      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 800284a:	2b12      	cmp	r3, #18
 800284c:	d82a      	bhi.n	80028a4 <HAL_GPIO_Init+0xcc>
 800284e:	2b12      	cmp	r3, #18
 8002850:	d859      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 8002852:	a201      	add	r2, pc, #4	@ (adr r2, 8002858 <HAL_GPIO_Init+0x80>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	080028d3 	.word	0x080028d3
 800285c:	080028ad 	.word	0x080028ad
 8002860:	080028bf 	.word	0x080028bf
 8002864:	08002901 	.word	0x08002901
 8002868:	08002907 	.word	0x08002907
 800286c:	08002907 	.word	0x08002907
 8002870:	08002907 	.word	0x08002907
 8002874:	08002907 	.word	0x08002907
 8002878:	08002907 	.word	0x08002907
 800287c:	08002907 	.word	0x08002907
 8002880:	08002907 	.word	0x08002907
 8002884:	08002907 	.word	0x08002907
 8002888:	08002907 	.word	0x08002907
 800288c:	08002907 	.word	0x08002907
 8002890:	08002907 	.word	0x08002907
 8002894:	08002907 	.word	0x08002907
 8002898:	08002907 	.word	0x08002907
 800289c:	080028b5 	.word	0x080028b5
 80028a0:	080028c9 	.word	0x080028c9
 80028a4:	4a79      	ldr	r2, [pc, #484]	@ (8002a8c <HAL_GPIO_Init+0x2b4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028aa:	e02c      	b.n	8002906 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	623b      	str	r3, [r7, #32]
          break;
 80028b2:	e029      	b.n	8002908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	3304      	adds	r3, #4
 80028ba:	623b      	str	r3, [r7, #32]
          break;
 80028bc:	e024      	b.n	8002908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	3308      	adds	r3, #8
 80028c4:	623b      	str	r3, [r7, #32]
          break;
 80028c6:	e01f      	b.n	8002908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	330c      	adds	r3, #12
 80028ce:	623b      	str	r3, [r7, #32]
          break;
 80028d0:	e01a      	b.n	8002908 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028da:	2304      	movs	r3, #4
 80028dc:	623b      	str	r3, [r7, #32]
          break;
 80028de:	e013      	b.n	8002908 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028e8:	2308      	movs	r3, #8
 80028ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	611a      	str	r2, [r3, #16]
          break;
 80028f2:	e009      	b.n	8002908 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028f4:	2308      	movs	r3, #8
 80028f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	615a      	str	r2, [r3, #20]
          break;
 80028fe:	e003      	b.n	8002908 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
          break;
 8002904:	e000      	b.n	8002908 <HAL_GPIO_Init+0x130>
          break;
 8002906:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2bff      	cmp	r3, #255	@ 0xff
 800290c:	d801      	bhi.n	8002912 <HAL_GPIO_Init+0x13a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	e001      	b.n	8002916 <HAL_GPIO_Init+0x13e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2bff      	cmp	r3, #255	@ 0xff
 800291c:	d802      	bhi.n	8002924 <HAL_GPIO_Init+0x14c>
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	e002      	b.n	800292a <HAL_GPIO_Init+0x152>
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	3b08      	subs	r3, #8
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	210f      	movs	r1, #15
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	401a      	ands	r2, r3
 800293c:	6a39      	ldr	r1, [r7, #32]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	fa01 f303 	lsl.w	r3, r1, r3
 8002944:	431a      	orrs	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80b1 	beq.w	8002aba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002958:	4b4d      	ldr	r3, [pc, #308]	@ (8002a90 <HAL_GPIO_Init+0x2b8>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a90 <HAL_GPIO_Init+0x2b8>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b4a      	ldr	r3, [pc, #296]	@ (8002a90 <HAL_GPIO_Init+0x2b8>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002970:	4a48      	ldr	r2, [pc, #288]	@ (8002a94 <HAL_GPIO_Init+0x2bc>)
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a40      	ldr	r2, [pc, #256]	@ (8002a98 <HAL_GPIO_Init+0x2c0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d013      	beq.n	80029c4 <HAL_GPIO_Init+0x1ec>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a9c <HAL_GPIO_Init+0x2c4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00d      	beq.n	80029c0 <HAL_GPIO_Init+0x1e8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3e      	ldr	r2, [pc, #248]	@ (8002aa0 <HAL_GPIO_Init+0x2c8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <HAL_GPIO_Init+0x1e4>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3d      	ldr	r2, [pc, #244]	@ (8002aa4 <HAL_GPIO_Init+0x2cc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_GPIO_Init+0x1e0>
 80029b4:	2303      	movs	r3, #3
 80029b6:	e006      	b.n	80029c6 <HAL_GPIO_Init+0x1ee>
 80029b8:	2304      	movs	r3, #4
 80029ba:	e004      	b.n	80029c6 <HAL_GPIO_Init+0x1ee>
 80029bc:	2302      	movs	r3, #2
 80029be:	e002      	b.n	80029c6 <HAL_GPIO_Init+0x1ee>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_GPIO_Init+0x1ee>
 80029c4:	2300      	movs	r3, #0
 80029c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c8:	f002 0203 	and.w	r2, r2, #3
 80029cc:	0092      	lsls	r2, r2, #2
 80029ce:	4093      	lsls	r3, r2
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029d6:	492f      	ldr	r1, [pc, #188]	@ (8002a94 <HAL_GPIO_Init+0x2bc>)
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029f0:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	492c      	ldr	r1, [pc, #176]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029fe:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4928      	ldr	r1, [pc, #160]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a18:	4b23      	ldr	r3, [pc, #140]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	4922      	ldr	r1, [pc, #136]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60cb      	str	r3, [r1, #12]
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a26:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	491e      	ldr	r1, [pc, #120]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a40:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	4918      	ldr	r1, [pc, #96]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a4e:	4b16      	ldr	r3, [pc, #88]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	4914      	ldr	r1, [pc, #80]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d021      	beq.n	8002aac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a68:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	490e      	ldr	r1, [pc, #56]	@ (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
 8002a74:	e021      	b.n	8002aba <HAL_GPIO_Init+0x2e2>
 8002a76:	bf00      	nop
 8002a78:	10320000 	.word	0x10320000
 8002a7c:	10310000 	.word	0x10310000
 8002a80:	10220000 	.word	0x10220000
 8002a84:	10210000 	.word	0x10210000
 8002a88:	10120000 	.word	0x10120000
 8002a8c:	10110000 	.word	0x10110000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40010800 	.word	0x40010800
 8002a9c:	40010c00 	.word	0x40010c00
 8002aa0:	40011000 	.word	0x40011000
 8002aa4:	40011400 	.word	0x40011400
 8002aa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_GPIO_Init+0x304>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	4909      	ldr	r1, [pc, #36]	@ (8002adc <HAL_GPIO_Init+0x304>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	3301      	adds	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f47f ae8e 	bne.w	80027ec <HAL_GPIO_Init+0x14>
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	372c      	adds	r7, #44	@ 0x2c
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	40010400 	.word	0x40010400

08002ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	e001      	b.n	8002b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	807b      	strh	r3, [r7, #2]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b1e:	787b      	ldrb	r3, [r7, #1]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b24:	887a      	ldrh	r2, [r7, #2]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b2a:	e003      	b.n	8002b34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	041a      	lsls	r2, r3, #16
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	611a      	str	r2, [r3, #16]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e12b      	b.n	8002daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fb00 	bl	800216c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	@ 0x24
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ba4:	f001 f960 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8002ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a81      	ldr	r2, [pc, #516]	@ (8002db4 <HAL_I2C_Init+0x274>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d807      	bhi.n	8002bc4 <HAL_I2C_Init+0x84>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a80      	ldr	r2, [pc, #512]	@ (8002db8 <HAL_I2C_Init+0x278>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	bf94      	ite	ls
 8002bbc:	2301      	movls	r3, #1
 8002bbe:	2300      	movhi	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e006      	b.n	8002bd2 <HAL_I2C_Init+0x92>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a7d      	ldr	r2, [pc, #500]	@ (8002dbc <HAL_I2C_Init+0x27c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	bf94      	ite	ls
 8002bcc:	2301      	movls	r3, #1
 8002bce:	2300      	movhi	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0e7      	b.n	8002daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a78      	ldr	r2, [pc, #480]	@ (8002dc0 <HAL_I2C_Init+0x280>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	0c9b      	lsrs	r3, r3, #18
 8002be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a6a      	ldr	r2, [pc, #424]	@ (8002db4 <HAL_I2C_Init+0x274>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d802      	bhi.n	8002c14 <HAL_I2C_Init+0xd4>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	3301      	adds	r3, #1
 8002c12:	e009      	b.n	8002c28 <HAL_I2C_Init+0xe8>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	4a69      	ldr	r2, [pc, #420]	@ (8002dc4 <HAL_I2C_Init+0x284>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	3301      	adds	r3, #1
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	495c      	ldr	r1, [pc, #368]	@ (8002db4 <HAL_I2C_Init+0x274>)
 8002c44:	428b      	cmp	r3, r1
 8002c46:	d819      	bhi.n	8002c7c <HAL_I2C_Init+0x13c>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1e59      	subs	r1, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c56:	1c59      	adds	r1, r3, #1
 8002c58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_I2C_Init+0x138>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1e59      	subs	r1, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c76:	e051      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	e04f      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d111      	bne.n	8002ca8 <HAL_I2C_Init+0x168>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1e58      	subs	r0, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	440b      	add	r3, r1
 8002c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c96:	3301      	adds	r3, #1
 8002c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e012      	b.n	8002cce <HAL_I2C_Init+0x18e>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e58      	subs	r0, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	0099      	lsls	r1, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2C_Init+0x196>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e022      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10e      	bne.n	8002cfc <HAL_I2C_Init+0x1bc>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1e58      	subs	r0, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	440b      	add	r3, r1
 8002cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cfa:	e00f      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	0099      	lsls	r1, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	6809      	ldr	r1, [r1, #0]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69da      	ldr	r2, [r3, #28]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6911      	ldr	r1, [r2, #16]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68d2      	ldr	r2, [r2, #12]
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	000186a0 	.word	0x000186a0
 8002db8:	001e847f 	.word	0x001e847f
 8002dbc:	003d08ff 	.word	0x003d08ff
 8002dc0:	431bde83 	.word	0x431bde83
 8002dc4:	10624dd3 	.word	0x10624dd3

08002dc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff fbc0 	bl	8002560 <HAL_GetTick>
 8002de0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 80e0 	bne.w	8002fb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2319      	movs	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	4970      	ldr	r1, [pc, #448]	@ (8002fbc <HAL_I2C_Master_Transmit+0x1f4>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fa92 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	e0d3      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2C_Master_Transmit+0x50>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0cc      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d007      	beq.n	8002e3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2221      	movs	r2, #33	@ 0x21
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	893a      	ldrh	r2, [r7, #8]
 8002e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a50      	ldr	r2, [pc, #320]	@ (8002fc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e80:	8979      	ldrh	r1, [r7, #10]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f9ca 	bl	8003220 <I2C_MasterRequestWrite>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e08d      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002eac:	e066      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	6a39      	ldr	r1, [r7, #32]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fb50 	bl	8003558 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d107      	bne.n	8002ed6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06b      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d11b      	bne.n	8002f50 <HAL_I2C_Master_Transmit+0x188>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d017      	beq.n	8002f50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	6a39      	ldr	r1, [r7, #32]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fb47 	bl	80035e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d107      	bne.n	8002f78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e01a      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d194      	bne.n	8002eae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	00100002 	.word	0x00100002
 8002fc0:	ffff0000 	.word	0xffff0000

08002fc4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	@ 0x28
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fd4:	f7ff fac4 	bl	8002560 <HAL_GetTick>
 8002fd8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	f040 8111 	bne.w	800320e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2319      	movs	r3, #25
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4988      	ldr	r1, [pc, #544]	@ (8003218 <HAL_I2C_IsDeviceReady+0x254>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f994 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
 8003004:	e104      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_I2C_IsDeviceReady+0x50>
 8003010:	2302      	movs	r3, #2
 8003012:	e0fd      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d007      	beq.n	800303a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2224      	movs	r2, #36	@ 0x24
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a70      	ldr	r2, [pc, #448]	@ (800321c <HAL_I2C_IsDeviceReady+0x258>)
 800305c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800306c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f952 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003094:	d103      	bne.n	800309e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800309c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0b6      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030b2:	f7ff fa55 	bl	8002560 <HAL_GetTick>
 80030b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030e6:	e025      	b.n	8003134 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030e8:	f7ff fa3a 	bl	8002560 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d302      	bcc.n	80030fe <HAL_I2C_IsDeviceReady+0x13a>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d103      	bne.n	8003106 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	22a0      	movs	r2, #160	@ 0xa0
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b02      	cmp	r3, #2
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2ba0      	cmp	r3, #160	@ 0xa0
 800313e:	d005      	beq.n	800314c <HAL_I2C_IsDeviceReady+0x188>
 8003140:	7dfb      	ldrb	r3, [r7, #23]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <HAL_I2C_IsDeviceReady+0x188>
 8003146:	7dbb      	ldrb	r3, [r7, #22]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0cd      	beq.n	80030e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b02      	cmp	r3, #2
 8003160:	d129      	bne.n	80031b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003170:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2319      	movs	r3, #25
 800318e:	2201      	movs	r2, #1
 8003190:	4921      	ldr	r1, [pc, #132]	@ (8003218 <HAL_I2C_IsDeviceReady+0x254>)
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f8c6 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e036      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e02c      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	2319      	movs	r3, #25
 80031d6:	2201      	movs	r2, #1
 80031d8:	490f      	ldr	r1, [pc, #60]	@ (8003218 <HAL_I2C_IsDeviceReady+0x254>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f8a2 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e012      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	f4ff af32 	bcc.w	800305e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	00100002 	.word	0x00100002
 800321c:	ffff0000 	.word	0xffff0000

08003220 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d006      	beq.n	800324a <I2C_MasterRequestWrite+0x2a>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d003      	beq.n	800324a <I2C_MasterRequestWrite+0x2a>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003248:	d108      	bne.n	800325c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e00b      	b.n	8003274 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	2b12      	cmp	r3, #18
 8003262:	d107      	bne.n	8003274 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003272:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f84f 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800329a:	d103      	bne.n	80032a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e035      	b.n	8003314 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032b0:	d108      	bne.n	80032c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032b2:	897b      	ldrh	r3, [r7, #10]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032c0:	611a      	str	r2, [r3, #16]
 80032c2:	e01b      	b.n	80032fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032c4:	897b      	ldrh	r3, [r7, #10]
 80032c6:	11db      	asrs	r3, r3, #7
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f003 0306 	and.w	r3, r3, #6
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f063 030f 	orn	r3, r3, #15
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	490e      	ldr	r1, [pc, #56]	@ (800331c <I2C_MasterRequestWrite+0xfc>)
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f898 	bl	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e010      	b.n	8003314 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032f2:	897b      	ldrh	r3, [r7, #10]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4907      	ldr	r1, [pc, #28]	@ (8003320 <I2C_MasterRequestWrite+0x100>)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f888 	bl	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	00010008 	.word	0x00010008
 8003320:	00010002 	.word	0x00010002

08003324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003334:	e048      	b.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d044      	beq.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7ff f90f 	bl	8002560 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x30>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d139      	bne.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d10d      	bne.n	800337a <I2C_WaitOnFlagUntilTimeout+0x56>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	43da      	mvns	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	e00c      	b.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x70>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	43da      	mvns	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4013      	ands	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	429a      	cmp	r2, r3
 8003398:	d116      	bne.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e023      	b.n	8003410 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	0c1b      	lsrs	r3, r3, #16
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10d      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	43da      	mvns	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	4013      	ands	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	e00c      	b.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	429a      	cmp	r2, r3
 800340c:	d093      	beq.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003426:	e071      	b.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003436:	d123      	bne.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003446:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003450:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	f043 0204 	orr.w	r2, r3, #4
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e067      	b.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d041      	beq.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003488:	f7ff f86a 	bl	8002560 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d302      	bcc.n	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d136      	bne.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d10c      	bne.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	43da      	mvns	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	e00b      	b.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	43da      	mvns	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d016      	beq.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e021      	b.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10c      	bne.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	43da      	mvns	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e00b      	b.n	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	f47f af6d 	bne.w	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003564:	e034      	b.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f886 	bl	8003678 <I2C_IsAcknowledgeFailed>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e034      	b.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d028      	beq.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7fe ffef 	bl	8002560 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d11d      	bne.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359e:	2b80      	cmp	r3, #128	@ 0x80
 80035a0:	d016      	beq.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e007      	b.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b80      	cmp	r3, #128	@ 0x80
 80035dc:	d1c3      	bne.n	8003566 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f4:	e034      	b.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f83e 	bl	8003678 <I2C_IsAcknowledgeFailed>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e034      	b.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d028      	beq.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe ffa7 	bl	8002560 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11d      	bne.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b04      	cmp	r3, #4
 8003630:	d016      	beq.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e007      	b.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b04      	cmp	r3, #4
 800366c:	d1c3      	bne.n	80035f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368e:	d11b      	bne.n	80036c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003698:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	f043 0204 	orr.w	r2, r3, #4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e272      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8087 	beq.w	8003802 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f4:	4b92      	ldr	r3, [pc, #584]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d00c      	beq.n	800371a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003700:	4b8f      	ldr	r3, [pc, #572]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b08      	cmp	r3, #8
 800370a:	d112      	bne.n	8003732 <HAL_RCC_OscConfig+0x5e>
 800370c:	4b8c      	ldr	r3, [pc, #560]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003718:	d10b      	bne.n	8003732 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371a:	4b89      	ldr	r3, [pc, #548]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d06c      	beq.n	8003800 <HAL_RCC_OscConfig+0x12c>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d168      	bne.n	8003800 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e24c      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x76>
 800373c:	4b80      	ldr	r3, [pc, #512]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a7f      	ldr	r2, [pc, #508]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	e02e      	b.n	80037a8 <HAL_RCC_OscConfig+0xd4>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x98>
 8003752:	4b7b      	ldr	r3, [pc, #492]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a7a      	ldr	r2, [pc, #488]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b78      	ldr	r3, [pc, #480]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a77      	ldr	r2, [pc, #476]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003764:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e01d      	b.n	80037a8 <HAL_RCC_OscConfig+0xd4>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0xbc>
 8003776:	4b72      	ldr	r3, [pc, #456]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a71      	ldr	r2, [pc, #452]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 800377c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4b6f      	ldr	r3, [pc, #444]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6e      	ldr	r2, [pc, #440]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e00b      	b.n	80037a8 <HAL_RCC_OscConfig+0xd4>
 8003790:	4b6b      	ldr	r3, [pc, #428]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6a      	ldr	r2, [pc, #424]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	4b68      	ldr	r3, [pc, #416]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a67      	ldr	r2, [pc, #412]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 80037a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d013      	beq.n	80037d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe fed6 	bl	8002560 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b8:	f7fe fed2 	bl	8002560 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	@ 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e200      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0xe4>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fe fec2 	bl	8002560 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e0:	f7fe febe 	bl	8002560 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	@ 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e1ec      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f2:	4b53      	ldr	r3, [pc, #332]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x10c>
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d063      	beq.n	80038d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800380e:	4b4c      	ldr	r3, [pc, #304]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800381a:	4b49      	ldr	r3, [pc, #292]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b08      	cmp	r3, #8
 8003824:	d11c      	bne.n	8003860 <HAL_RCC_OscConfig+0x18c>
 8003826:	4b46      	ldr	r3, [pc, #280]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d116      	bne.n	8003860 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003832:	4b43      	ldr	r3, [pc, #268]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_RCC_OscConfig+0x176>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d001      	beq.n	800384a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e1c0      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384a:	4b3d      	ldr	r3, [pc, #244]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4939      	ldr	r1, [pc, #228]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385e:	e03a      	b.n	80038d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d020      	beq.n	80038aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003868:	4b36      	ldr	r3, [pc, #216]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fe fe77 	bl	8002560 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003876:	f7fe fe73 	bl	8002560 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e1a1      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003888:	4b2d      	ldr	r3, [pc, #180]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003894:	4b2a      	ldr	r3, [pc, #168]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4927      	ldr	r1, [pc, #156]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]
 80038a8:	e015      	b.n	80038d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038aa:	4b26      	ldr	r3, [pc, #152]	@ (8003944 <HAL_RCC_OscConfig+0x270>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe fe56 	bl	8002560 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b8:	f7fe fe52 	bl	8002560 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e180      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d03a      	beq.n	8003958 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d019      	beq.n	800391e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ea:	4b17      	ldr	r3, [pc, #92]	@ (8003948 <HAL_RCC_OscConfig+0x274>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f0:	f7fe fe36 	bl	8002560 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f8:	f7fe fe32 	bl	8002560 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e160      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390a:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <HAL_RCC_OscConfig+0x26c>)
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003916:	2001      	movs	r0, #1
 8003918:	f000 face 	bl	8003eb8 <RCC_Delay>
 800391c:	e01c      	b.n	8003958 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391e:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <HAL_RCC_OscConfig+0x274>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003924:	f7fe fe1c 	bl	8002560 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392a:	e00f      	b.n	800394c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392c:	f7fe fe18 	bl	8002560 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d908      	bls.n	800394c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e146      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	42420000 	.word	0x42420000
 8003948:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394c:	4b92      	ldr	r3, [pc, #584]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e9      	bne.n	800392c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80a6 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003966:	2300      	movs	r3, #0
 8003968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396a:	4b8b      	ldr	r3, [pc, #556]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	4b88      	ldr	r3, [pc, #544]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4a87      	ldr	r2, [pc, #540]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003980:	61d3      	str	r3, [r2, #28]
 8003982:	4b85      	ldr	r3, [pc, #532]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b82      	ldr	r3, [pc, #520]	@ (8003b9c <HAL_RCC_OscConfig+0x4c8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d118      	bne.n	80039d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b9c <HAL_RCC_OscConfig+0x4c8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7e      	ldr	r2, [pc, #504]	@ (8003b9c <HAL_RCC_OscConfig+0x4c8>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039aa:	f7fe fdd9 	bl	8002560 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fe fdd5 	bl	8002560 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b64      	cmp	r3, #100	@ 0x64
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e103      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c4:	4b75      	ldr	r3, [pc, #468]	@ (8003b9c <HAL_RCC_OscConfig+0x4c8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x312>
 80039d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6213      	str	r3, [r2, #32]
 80039e4:	e02d      	b.n	8003a42 <HAL_RCC_OscConfig+0x36e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x334>
 80039ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	4a69      	ldr	r2, [pc, #420]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	6213      	str	r3, [r2, #32]
 80039fa:	4b67      	ldr	r3, [pc, #412]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4a66      	ldr	r2, [pc, #408]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	f023 0304 	bic.w	r3, r3, #4
 8003a04:	6213      	str	r3, [r2, #32]
 8003a06:	e01c      	b.n	8003a42 <HAL_RCC_OscConfig+0x36e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x356>
 8003a10:	4b61      	ldr	r3, [pc, #388]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4a60      	ldr	r2, [pc, #384]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	6213      	str	r3, [r2, #32]
 8003a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4a5d      	ldr	r2, [pc, #372]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6213      	str	r3, [r2, #32]
 8003a28:	e00b      	b.n	8003a42 <HAL_RCC_OscConfig+0x36e>
 8003a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4a5a      	ldr	r2, [pc, #360]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6213      	str	r3, [r2, #32]
 8003a36:	4b58      	ldr	r3, [pc, #352]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4a57      	ldr	r2, [pc, #348]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d015      	beq.n	8003a76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fd89 	bl	8002560 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe fd85 	bl	8002560 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0b1      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	4b4b      	ldr	r3, [pc, #300]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ee      	beq.n	8003a52 <HAL_RCC_OscConfig+0x37e>
 8003a74:	e014      	b.n	8003aa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a76:	f7fe fd73 	bl	8002560 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fe fd6f 	bl	8002560 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e09b      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a94:	4b40      	ldr	r3, [pc, #256]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ee      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	4a3b      	ldr	r2, [pc, #236]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8087 	beq.w	8003bca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003abc:	4b36      	ldr	r3, [pc, #216]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d061      	beq.n	8003b8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d146      	bne.n	8003b5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad0:	4b33      	ldr	r3, [pc, #204]	@ (8003ba0 <HAL_RCC_OscConfig+0x4cc>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fd43 	bl	8002560 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ade:	f7fe fd3f 	bl	8002560 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e06d      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af0:	4b29      	ldr	r3, [pc, #164]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b04:	d108      	bne.n	8003b18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b06:	4b24      	ldr	r3, [pc, #144]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	4921      	ldr	r1, [pc, #132]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b18:	4b1f      	ldr	r3, [pc, #124]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a19      	ldr	r1, [r3, #32]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	491b      	ldr	r1, [pc, #108]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba0 <HAL_RCC_OscConfig+0x4cc>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b36:	f7fe fd13 	bl	8002560 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fe fd0f 	bl	8002560 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e03d      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b50:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x46a>
 8003b5c:	e035      	b.n	8003bca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ba0 <HAL_RCC_OscConfig+0x4cc>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fe fcfc 	bl	8002560 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe fcf8 	bl	8002560 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e026      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b7e:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x498>
 8003b8a:	e01e      	b.n	8003bca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e019      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_RCC_OscConfig+0x500>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d001      	beq.n	8003bca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000

08003bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0d0      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bec:	4b6a      	ldr	r3, [pc, #424]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d910      	bls.n	8003c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4b67      	ldr	r3, [pc, #412]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 0207 	bic.w	r2, r3, #7
 8003c02:	4965      	ldr	r1, [pc, #404]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0a:	4b63      	ldr	r3, [pc, #396]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0b8      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c34:	4b59      	ldr	r3, [pc, #356]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a58      	ldr	r2, [pc, #352]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c4c:	4b53      	ldr	r3, [pc, #332]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4a52      	ldr	r2, [pc, #328]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c52:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c58:	4b50      	ldr	r3, [pc, #320]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	494d      	ldr	r1, [pc, #308]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d040      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d107      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b47      	ldr	r3, [pc, #284]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d115      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e07f      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c96:	4b41      	ldr	r3, [pc, #260]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e073      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e06b      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4b39      	ldr	r3, [pc, #228]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4936      	ldr	r1, [pc, #216]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc8:	f7fe fc4a 	bl	8002560 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fe fc46 	bl	8002560 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e053      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 020c 	and.w	r2, r3, #12
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1eb      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b27      	ldr	r3, [pc, #156]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d210      	bcs.n	8003d28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b24      	ldr	r3, [pc, #144]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 0207 	bic.w	r2, r3, #7
 8003d0e:	4922      	ldr	r1, [pc, #136]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b20      	ldr	r3, [pc, #128]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e032      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d34:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4916      	ldr	r1, [pc, #88]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d52:	4b12      	ldr	r3, [pc, #72]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	490e      	ldr	r1, [pc, #56]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d66:	f000 f821 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	490a      	ldr	r1, [pc, #40]	@ (8003da0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	5ccb      	ldrb	r3, [r1, r3]
 8003d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7e:	4a09      	ldr	r2, [pc, #36]	@ (8003da4 <HAL_RCC_ClockConfig+0x1cc>)
 8003d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d82:	4b09      	ldr	r3, [pc, #36]	@ (8003da8 <HAL_RCC_ClockConfig+0x1d0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fba8 	bl	80024dc <HAL_InitTick>

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40022000 	.word	0x40022000
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	08006668 	.word	0x08006668
 8003da4:	20000020 	.word	0x20000020
 8003da8:	20000024 	.word	0x20000024

08003dac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d002      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x30>
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d003      	beq.n	8003de2 <HAL_RCC_GetSysClockFreq+0x36>
 8003dda:	e027      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ddc:	4b19      	ldr	r3, [pc, #100]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dde:	613b      	str	r3, [r7, #16]
      break;
 8003de0:	e027      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	0c9b      	lsrs	r3, r3, #18
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	4a17      	ldr	r2, [pc, #92]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dec:	5cd3      	ldrb	r3, [r2, r3]
 8003dee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d010      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dfa:	4b11      	ldr	r3, [pc, #68]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	0c5b      	lsrs	r3, r3, #17
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	4a11      	ldr	r2, [pc, #68]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e06:	5cd3      	ldrb	r3, [r2, r3]
 8003e08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e0e:	fb03 f202 	mul.w	r2, r3, r2
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	e004      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e20:	fb02 f303 	mul.w	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	613b      	str	r3, [r7, #16]
      break;
 8003e2a:	e002      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e2c:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e2e:	613b      	str	r3, [r7, #16]
      break;
 8003e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e32:	693b      	ldr	r3, [r7, #16]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	007a1200 	.word	0x007a1200
 8003e48:	08006680 	.word	0x08006680
 8003e4c:	08006690 	.word	0x08006690
 8003e50:	003d0900 	.word	0x003d0900

08003e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e58:	4b02      	ldr	r3, [pc, #8]	@ (8003e64 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	20000020 	.word	0x20000020

08003e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e6c:	f7ff fff2 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4903      	ldr	r1, [pc, #12]	@ (8003e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	08006678 	.word	0x08006678

08003e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e94:	f7ff ffde 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b05      	ldr	r3, [pc, #20]	@ (8003eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	0adb      	lsrs	r3, r3, #11
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4903      	ldr	r1, [pc, #12]	@ (8003eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	08006678 	.word	0x08006678

08003eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <RCC_Delay+0x34>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef0 <RCC_Delay+0x38>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	0a5b      	lsrs	r3, r3, #9
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ed4:	bf00      	nop
  }
  while (Delay --);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1e5a      	subs	r2, r3, #1
 8003eda:	60fa      	str	r2, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f9      	bne.n	8003ed4 <RCC_Delay+0x1c>
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	20000020 	.word	0x20000020
 8003ef0:	10624dd3 	.word	0x10624dd3

08003ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e041      	b.n	8003f8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fe f964 	bl	80021e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f000 fc62 	bl	80047fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d001      	beq.n	8003fac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e032      	b.n	8004012 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a18      	ldr	r2, [pc, #96]	@ (800401c <HAL_TIM_Base_Start+0x88>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00e      	beq.n	8003fdc <HAL_TIM_Base_Start+0x48>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc6:	d009      	beq.n	8003fdc <HAL_TIM_Base_Start+0x48>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a14      	ldr	r2, [pc, #80]	@ (8004020 <HAL_TIM_Base_Start+0x8c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_TIM_Base_Start+0x48>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a13      	ldr	r2, [pc, #76]	@ (8004024 <HAL_TIM_Base_Start+0x90>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d111      	bne.n	8004000 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d010      	beq.n	8004010 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffe:	e007      	b.n	8004010 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800

08004028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d001      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e03a      	b.n	80040b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a18      	ldr	r2, [pc, #96]	@ (80040c0 <HAL_TIM_Base_Start_IT+0x98>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00e      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x58>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406a:	d009      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x58>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a14      	ldr	r2, [pc, #80]	@ (80040c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x58>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a13      	ldr	r2, [pc, #76]	@ (80040c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d111      	bne.n	80040a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b06      	cmp	r3, #6
 8004090:	d010      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a2:	e007      	b.n	80040b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800

080040cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e041      	b.n	8004162 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f839 	bl	800416a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f000 fb76 	bl	80047fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <HAL_TIM_PWM_Start+0x24>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e022      	b.n	80041e6 <HAL_TIM_PWM_Start+0x6a>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d109      	bne.n	80041ba <HAL_TIM_PWM_Start+0x3e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e015      	b.n	80041e6 <HAL_TIM_PWM_Start+0x6a>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d109      	bne.n	80041d4 <HAL_TIM_PWM_Start+0x58>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e008      	b.n	80041e6 <HAL_TIM_PWM_Start+0x6a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e05e      	b.n	80042ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_PWM_Start+0x82>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041fc:	e013      	b.n	8004226 <HAL_TIM_PWM_Start+0xaa>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b04      	cmp	r3, #4
 8004202:	d104      	bne.n	800420e <HAL_TIM_PWM_Start+0x92>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800420c:	e00b      	b.n	8004226 <HAL_TIM_PWM_Start+0xaa>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d104      	bne.n	800421e <HAL_TIM_PWM_Start+0xa2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800421c:	e003      	b.n	8004226 <HAL_TIM_PWM_Start+0xaa>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fd70 	bl	8004d14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1e      	ldr	r2, [pc, #120]	@ (80042b4 <HAL_TIM_PWM_Start+0x138>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d107      	bne.n	800424e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a18      	ldr	r2, [pc, #96]	@ (80042b4 <HAL_TIM_PWM_Start+0x138>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00e      	beq.n	8004276 <HAL_TIM_PWM_Start+0xfa>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004260:	d009      	beq.n	8004276 <HAL_TIM_PWM_Start+0xfa>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a14      	ldr	r2, [pc, #80]	@ (80042b8 <HAL_TIM_PWM_Start+0x13c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_TIM_PWM_Start+0xfa>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <HAL_TIM_PWM_Start+0x140>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d111      	bne.n	800429a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b06      	cmp	r3, #6
 8004286:	d010      	beq.n	80042aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004298:	e007      	b.n	80042aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40000800 	.word	0x40000800

080042c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d020      	beq.n	8004324 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01b      	beq.n	8004324 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0202 	mvn.w	r2, #2
 80042f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fa5a 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 8004310:	e005      	b.n	800431e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa4d 	bl	80047b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fa5c 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d020      	beq.n	8004370 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01b      	beq.n	8004370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0204 	mvn.w	r2, #4
 8004340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fa34 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fa27 	bl	80047b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fa36 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d020      	beq.n	80043bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01b      	beq.n	80043bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0208 	mvn.w	r2, #8
 800438c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2204      	movs	r2, #4
 8004392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa0e 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fa01 	bl	80047b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fa10 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d020      	beq.n	8004408 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01b      	beq.n	8004408 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0210 	mvn.w	r2, #16
 80043d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2208      	movs	r2, #8
 80043de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f9e8 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9db 	bl	80047b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f9ea 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0201 	mvn.w	r2, #1
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fc f934 	bl	8000694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00c      	beq.n	8004450 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fd3e 	bl	8004ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800446c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f9ba 	bl	80047e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00c      	beq.n	8004498 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0220 	mvn.w	r2, #32
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fd11 	bl	8004eba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e0ae      	b.n	800461c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	f200 809f 	bhi.w	800460c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ce:	a201      	add	r2, pc, #4	@ (adr r2, 80044d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	08004509 	.word	0x08004509
 80044d8:	0800460d 	.word	0x0800460d
 80044dc:	0800460d 	.word	0x0800460d
 80044e0:	0800460d 	.word	0x0800460d
 80044e4:	08004549 	.word	0x08004549
 80044e8:	0800460d 	.word	0x0800460d
 80044ec:	0800460d 	.word	0x0800460d
 80044f0:	0800460d 	.word	0x0800460d
 80044f4:	0800458b 	.word	0x0800458b
 80044f8:	0800460d 	.word	0x0800460d
 80044fc:	0800460d 	.word	0x0800460d
 8004500:	0800460d 	.word	0x0800460d
 8004504:	080045cb 	.word	0x080045cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f9e2 	bl	80048d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0208 	orr.w	r2, r2, #8
 8004522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0204 	bic.w	r2, r2, #4
 8004532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6999      	ldr	r1, [r3, #24]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	619a      	str	r2, [r3, #24]
      break;
 8004546:	e064      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fa28 	bl	80049a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6999      	ldr	r1, [r3, #24]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	619a      	str	r2, [r3, #24]
      break;
 8004588:	e043      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fa71 	bl	8004a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0208 	orr.w	r2, r2, #8
 80045a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0204 	bic.w	r2, r2, #4
 80045b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69d9      	ldr	r1, [r3, #28]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	61da      	str	r2, [r3, #28]
      break;
 80045c8:	e023      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fabb 	bl	8004b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69d9      	ldr	r1, [r3, #28]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	021a      	lsls	r2, r3, #8
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	61da      	str	r2, [r3, #28]
      break;
 800460a:	e002      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	75fb      	strb	r3, [r7, #23]
      break;
 8004610:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800461a:	7dfb      	ldrb	r3, [r7, #23]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_TIM_ConfigClockSource+0x1c>
 800463c:	2302      	movs	r3, #2
 800463e:	e0b4      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x186>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800465e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004678:	d03e      	beq.n	80046f8 <HAL_TIM_ConfigClockSource+0xd4>
 800467a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467e:	f200 8087 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004686:	f000 8086 	beq.w	8004796 <HAL_TIM_ConfigClockSource+0x172>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468e:	d87f      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b70      	cmp	r3, #112	@ 0x70
 8004692:	d01a      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0xa6>
 8004694:	2b70      	cmp	r3, #112	@ 0x70
 8004696:	d87b      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b60      	cmp	r3, #96	@ 0x60
 800469a:	d050      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x11a>
 800469c:	2b60      	cmp	r3, #96	@ 0x60
 800469e:	d877      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b50      	cmp	r3, #80	@ 0x50
 80046a2:	d03c      	beq.n	800471e <HAL_TIM_ConfigClockSource+0xfa>
 80046a4:	2b50      	cmp	r3, #80	@ 0x50
 80046a6:	d873      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b40      	cmp	r3, #64	@ 0x40
 80046aa:	d058      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x13a>
 80046ac:	2b40      	cmp	r3, #64	@ 0x40
 80046ae:	d86f      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b30      	cmp	r3, #48	@ 0x30
 80046b2:	d064      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046b4:	2b30      	cmp	r3, #48	@ 0x30
 80046b6:	d86b      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d060      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d867      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d05c      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d05a      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046c8:	e062      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046da:	f000 fafc 	bl	8004cd6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	609a      	str	r2, [r3, #8]
      break;
 80046f6:	e04f      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004708:	f000 fae5 	bl	8004cd6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800471a:	609a      	str	r2, [r3, #8]
      break;
 800471c:	e03c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	461a      	mov	r2, r3
 800472c:	f000 fa5c 	bl	8004be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2150      	movs	r1, #80	@ 0x50
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fab3 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 800473c:	e02c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800474a:	461a      	mov	r2, r3
 800474c:	f000 fa7a 	bl	8004c44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2160      	movs	r1, #96	@ 0x60
 8004756:	4618      	mov	r0, r3
 8004758:	f000 faa3 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 800475c:	e01c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800476a:	461a      	mov	r2, r3
 800476c:	f000 fa3c 	bl	8004be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2140      	movs	r1, #64	@ 0x40
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fa93 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 800477c:	e00c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f000 fa8a 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 800478e:	e003      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	e000      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr
	...

080047fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a2f      	ldr	r2, [pc, #188]	@ (80048cc <TIM_Base_SetConfig+0xd0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00b      	beq.n	800482c <TIM_Base_SetConfig+0x30>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481a:	d007      	beq.n	800482c <TIM_Base_SetConfig+0x30>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a2c      	ldr	r2, [pc, #176]	@ (80048d0 <TIM_Base_SetConfig+0xd4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0x30>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a2b      	ldr	r2, [pc, #172]	@ (80048d4 <TIM_Base_SetConfig+0xd8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d108      	bne.n	800483e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a22      	ldr	r2, [pc, #136]	@ (80048cc <TIM_Base_SetConfig+0xd0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00b      	beq.n	800485e <TIM_Base_SetConfig+0x62>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484c:	d007      	beq.n	800485e <TIM_Base_SetConfig+0x62>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a1f      	ldr	r2, [pc, #124]	@ (80048d0 <TIM_Base_SetConfig+0xd4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d003      	beq.n	800485e <TIM_Base_SetConfig+0x62>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a1e      	ldr	r2, [pc, #120]	@ (80048d4 <TIM_Base_SetConfig+0xd8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d108      	bne.n	8004870 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4313      	orrs	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a0d      	ldr	r2, [pc, #52]	@ (80048cc <TIM_Base_SetConfig+0xd0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d103      	bne.n	80048a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f023 0201 	bic.w	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	611a      	str	r2, [r3, #16]
  }
}
 80048c2:	bf00      	nop
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	40012c00 	.word	0x40012c00
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40000800 	.word	0x40000800

080048d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f023 0201 	bic.w	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f023 0302 	bic.w	r3, r3, #2
 8004920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a1c      	ldr	r2, [pc, #112]	@ (80049a0 <TIM_OC1_SetConfig+0xc8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10c      	bne.n	800494e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0308 	bic.w	r3, r3, #8
 800493a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 0304 	bic.w	r3, r3, #4
 800494c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a13      	ldr	r2, [pc, #76]	@ (80049a0 <TIM_OC1_SetConfig+0xc8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d111      	bne.n	800497a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800495c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	621a      	str	r2, [r3, #32]
}
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40012c00 	.word	0x40012c00

080049a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f023 0210 	bic.w	r2, r3, #16
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0320 	bic.w	r3, r3, #32
 80049ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004a74 <TIM_OC2_SetConfig+0xd0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d10d      	bne.n	8004a20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a14      	ldr	r2, [pc, #80]	@ (8004a74 <TIM_OC2_SetConfig+0xd0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d113      	bne.n	8004a50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr
 8004a74:	40012c00 	.word	0x40012c00

08004a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b48 <TIM_OC3_SetConfig+0xd0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d10d      	bne.n	8004af2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a14      	ldr	r2, [pc, #80]	@ (8004b48 <TIM_OC3_SetConfig+0xd0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d113      	bne.n	8004b22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40012c00 	.word	0x40012c00

08004b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	031b      	lsls	r3, r3, #12
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8004be4 <TIM_OC4_SetConfig+0x98>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d109      	bne.n	8004bc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	019b      	lsls	r3, r3, #6
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	40012c00 	.word	0x40012c00

08004be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f023 0201 	bic.w	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 030a 	bic.w	r3, r3, #10
 8004c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0210 	bic.w	r2, r3, #16
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	031b      	lsls	r3, r3, #12
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	621a      	str	r2, [r3, #32]
}
 8004c98:	bf00      	nop
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f043 0307 	orr.w	r3, r3, #7
 8004cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	609a      	str	r2, [r3, #8]
}
 8004ccc:	bf00      	nop
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	021a      	lsls	r2, r3, #8
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	609a      	str	r2, [r3, #8]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2201      	movs	r2, #1
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	43db      	mvns	r3, r3
 8004d36:	401a      	ands	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e046      	b.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a16      	ldr	r2, [pc, #88]	@ (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00e      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc0:	d009      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a12      	ldr	r2, [pc, #72]	@ (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d004      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a10      	ldr	r2, [pc, #64]	@ (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d10c      	bne.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr
 8004e0c:	40012c00 	.word	0x40012c00
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800

08004e18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e03d      	b.n	8004eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e042      	b.n	8004f76 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fd f9ef 	bl	80022e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2224      	movs	r2, #36	@ 0x24
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f972 	bl	800520c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b08a      	sub	sp, #40	@ 0x28
 8004f82:	af02      	add	r7, sp, #8
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d175      	bne.n	800508a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <HAL_UART_Transmit+0x2c>
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e06e      	b.n	800508c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2221      	movs	r2, #33	@ 0x21
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fbc:	f7fd fad0 	bl	8002560 <HAL_GetTick>
 8004fc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	88fa      	ldrh	r2, [r7, #6]
 8004fc6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	88fa      	ldrh	r2, [r7, #6]
 8004fcc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fd6:	d108      	bne.n	8004fea <HAL_UART_Transmit+0x6c>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	e003      	b.n	8004ff2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ff2:	e02e      	b.n	8005052 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2180      	movs	r1, #128	@ 0x80
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f848 	bl	8005094 <UART_WaitOnFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e03a      	b.n	800508c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800502a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	3302      	adds	r3, #2
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	e007      	b.n	8005044 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	781a      	ldrb	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3301      	adds	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1cb      	bne.n	8004ff4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2200      	movs	r2, #0
 8005064:	2140      	movs	r1, #64	@ 0x40
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f814 	bl	8005094 <UART_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e006      	b.n	800508c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e000      	b.n	800508c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800508a:	2302      	movs	r3, #2
  }
}
 800508c:	4618      	mov	r0, r3
 800508e:	3720      	adds	r7, #32
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	4613      	mov	r3, r2
 80050a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a4:	e03b      	b.n	800511e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ac:	d037      	beq.n	800511e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ae:	f7fd fa57 	bl	8002560 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	6a3a      	ldr	r2, [r7, #32]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d302      	bcc.n	80050c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e03a      	b.n	800513e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d023      	beq.n	800511e <UART_WaitOnFlagUntilTimeout+0x8a>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b80      	cmp	r3, #128	@ 0x80
 80050da:	d020      	beq.n	800511e <UART_WaitOnFlagUntilTimeout+0x8a>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b40      	cmp	r3, #64	@ 0x40
 80050e0:	d01d      	beq.n	800511e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d116      	bne.n	800511e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f81d 	bl	8005146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2208      	movs	r2, #8
 8005110:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e00f      	b.n	800513e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4013      	ands	r3, r2
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	429a      	cmp	r2, r3
 800512c:	bf0c      	ite	eq
 800512e:	2301      	moveq	r3, #1
 8005130:	2300      	movne	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	429a      	cmp	r2, r3
 800513a:	d0b4      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005146:	b480      	push	{r7}
 8005148:	b095      	sub	sp, #84	@ 0x54
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	330c      	adds	r3, #12
 8005154:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800516e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005174:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800517c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e5      	bne.n	800514e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3314      	adds	r3, #20
 8005188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	61fb      	str	r3, [r7, #28]
   return(result);
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3314      	adds	r3, #20
 80051a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d119      	bne.n	80051f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f023 0310 	bic.w	r3, r3, #16
 80051d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051de:	61ba      	str	r2, [r7, #24]
 80051e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	6979      	ldr	r1, [r7, #20]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	613b      	str	r3, [r7, #16]
   return(result);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e5      	bne.n	80051be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005200:	bf00      	nop
 8005202:	3754      	adds	r7, #84	@ 0x54
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr
	...

0800520c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005246:	f023 030c 	bic.w	r3, r3, #12
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	430b      	orrs	r3, r1
 8005252:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2c      	ldr	r2, [pc, #176]	@ (8005320 <UART_SetConfig+0x114>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d103      	bne.n	800527c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005274:	f7fe fe0c 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	e002      	b.n	8005282 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800527c:	f7fe fdf4 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8005280:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	009a      	lsls	r2, r3, #2
 800528c:	441a      	add	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	fbb2 f3f3 	udiv	r3, r2, r3
 8005298:	4a22      	ldr	r2, [pc, #136]	@ (8005324 <UART_SetConfig+0x118>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	0119      	lsls	r1, r3, #4
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009a      	lsls	r2, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005324 <UART_SetConfig+0x118>)
 80052ba:	fba3 0302 	umull	r0, r3, r3, r2
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	2064      	movs	r0, #100	@ 0x64
 80052c2:	fb00 f303 	mul.w	r3, r0, r3
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	3332      	adds	r3, #50	@ 0x32
 80052cc:	4a15      	ldr	r2, [pc, #84]	@ (8005324 <UART_SetConfig+0x118>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052d8:	4419      	add	r1, r3
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	009a      	lsls	r2, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80052f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <UART_SetConfig+0x118>)
 80052f2:	fba3 0302 	umull	r0, r3, r3, r2
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	2064      	movs	r0, #100	@ 0x64
 80052fa:	fb00 f303 	mul.w	r3, r0, r3
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	3332      	adds	r3, #50	@ 0x32
 8005304:	4a07      	ldr	r2, [pc, #28]	@ (8005324 <UART_SetConfig+0x118>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	f003 020f 	and.w	r2, r3, #15
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	440a      	add	r2, r1
 8005316:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40013800 	.word	0x40013800
 8005324:	51eb851f 	.word	0x51eb851f

08005328 <__itoa>:
 8005328:	1e93      	subs	r3, r2, #2
 800532a:	2b22      	cmp	r3, #34	@ 0x22
 800532c:	b510      	push	{r4, lr}
 800532e:	460c      	mov	r4, r1
 8005330:	d904      	bls.n	800533c <__itoa+0x14>
 8005332:	2300      	movs	r3, #0
 8005334:	461c      	mov	r4, r3
 8005336:	700b      	strb	r3, [r1, #0]
 8005338:	4620      	mov	r0, r4
 800533a:	bd10      	pop	{r4, pc}
 800533c:	2a0a      	cmp	r2, #10
 800533e:	d109      	bne.n	8005354 <__itoa+0x2c>
 8005340:	2800      	cmp	r0, #0
 8005342:	da07      	bge.n	8005354 <__itoa+0x2c>
 8005344:	232d      	movs	r3, #45	@ 0x2d
 8005346:	700b      	strb	r3, [r1, #0]
 8005348:	2101      	movs	r1, #1
 800534a:	4240      	negs	r0, r0
 800534c:	4421      	add	r1, r4
 800534e:	f000 f805 	bl	800535c <__utoa>
 8005352:	e7f1      	b.n	8005338 <__itoa+0x10>
 8005354:	2100      	movs	r1, #0
 8005356:	e7f9      	b.n	800534c <__itoa+0x24>

08005358 <itoa>:
 8005358:	f7ff bfe6 	b.w	8005328 <__itoa>

0800535c <__utoa>:
 800535c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800535e:	b08b      	sub	sp, #44	@ 0x2c
 8005360:	4605      	mov	r5, r0
 8005362:	460b      	mov	r3, r1
 8005364:	466e      	mov	r6, sp
 8005366:	4c1d      	ldr	r4, [pc, #116]	@ (80053dc <__utoa+0x80>)
 8005368:	f104 0c20 	add.w	ip, r4, #32
 800536c:	4637      	mov	r7, r6
 800536e:	6820      	ldr	r0, [r4, #0]
 8005370:	6861      	ldr	r1, [r4, #4]
 8005372:	3408      	adds	r4, #8
 8005374:	c703      	stmia	r7!, {r0, r1}
 8005376:	4564      	cmp	r4, ip
 8005378:	463e      	mov	r6, r7
 800537a:	d1f7      	bne.n	800536c <__utoa+0x10>
 800537c:	7921      	ldrb	r1, [r4, #4]
 800537e:	6820      	ldr	r0, [r4, #0]
 8005380:	7139      	strb	r1, [r7, #4]
 8005382:	1e91      	subs	r1, r2, #2
 8005384:	2922      	cmp	r1, #34	@ 0x22
 8005386:	6038      	str	r0, [r7, #0]
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	d904      	bls.n	8005398 <__utoa+0x3c>
 800538e:	7019      	strb	r1, [r3, #0]
 8005390:	460b      	mov	r3, r1
 8005392:	4618      	mov	r0, r3
 8005394:	b00b      	add	sp, #44	@ 0x2c
 8005396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005398:	1e58      	subs	r0, r3, #1
 800539a:	4684      	mov	ip, r0
 800539c:	fbb5 f7f2 	udiv	r7, r5, r2
 80053a0:	fb02 5617 	mls	r6, r2, r7, r5
 80053a4:	3628      	adds	r6, #40	@ 0x28
 80053a6:	446e      	add	r6, sp
 80053a8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80053ac:	460c      	mov	r4, r1
 80053ae:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80053b2:	462e      	mov	r6, r5
 80053b4:	42b2      	cmp	r2, r6
 80053b6:	463d      	mov	r5, r7
 80053b8:	f101 0101 	add.w	r1, r1, #1
 80053bc:	d9ee      	bls.n	800539c <__utoa+0x40>
 80053be:	2200      	movs	r2, #0
 80053c0:	545a      	strb	r2, [r3, r1]
 80053c2:	1919      	adds	r1, r3, r4
 80053c4:	1aa5      	subs	r5, r4, r2
 80053c6:	42aa      	cmp	r2, r5
 80053c8:	dae3      	bge.n	8005392 <__utoa+0x36>
 80053ca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80053ce:	780e      	ldrb	r6, [r1, #0]
 80053d0:	3201      	adds	r2, #1
 80053d2:	7006      	strb	r6, [r0, #0]
 80053d4:	f801 5901 	strb.w	r5, [r1], #-1
 80053d8:	e7f4      	b.n	80053c4 <__utoa+0x68>
 80053da:	bf00      	nop
 80053dc:	08006692 	.word	0x08006692

080053e0 <siprintf>:
 80053e0:	b40e      	push	{r1, r2, r3}
 80053e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053e6:	b500      	push	{lr}
 80053e8:	b09c      	sub	sp, #112	@ 0x70
 80053ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80053ec:	9002      	str	r0, [sp, #8]
 80053ee:	9006      	str	r0, [sp, #24]
 80053f0:	9107      	str	r1, [sp, #28]
 80053f2:	9104      	str	r1, [sp, #16]
 80053f4:	4808      	ldr	r0, [pc, #32]	@ (8005418 <siprintf+0x38>)
 80053f6:	4909      	ldr	r1, [pc, #36]	@ (800541c <siprintf+0x3c>)
 80053f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80053fc:	9105      	str	r1, [sp, #20]
 80053fe:	6800      	ldr	r0, [r0, #0]
 8005400:	a902      	add	r1, sp, #8
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	f000 f992 	bl	800572c <_svfiprintf_r>
 8005408:	2200      	movs	r2, #0
 800540a:	9b02      	ldr	r3, [sp, #8]
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	b01c      	add	sp, #112	@ 0x70
 8005410:	f85d eb04 	ldr.w	lr, [sp], #4
 8005414:	b003      	add	sp, #12
 8005416:	4770      	bx	lr
 8005418:	2000002c 	.word	0x2000002c
 800541c:	ffff0208 	.word	0xffff0208

08005420 <memset>:
 8005420:	4603      	mov	r3, r0
 8005422:	4402      	add	r2, r0
 8005424:	4293      	cmp	r3, r2
 8005426:	d100      	bne.n	800542a <memset+0xa>
 8005428:	4770      	bx	lr
 800542a:	f803 1b01 	strb.w	r1, [r3], #1
 800542e:	e7f9      	b.n	8005424 <memset+0x4>

08005430 <__errno>:
 8005430:	4b01      	ldr	r3, [pc, #4]	@ (8005438 <__errno+0x8>)
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	2000002c 	.word	0x2000002c

0800543c <__libc_init_array>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	2600      	movs	r6, #0
 8005440:	4d0c      	ldr	r5, [pc, #48]	@ (8005474 <__libc_init_array+0x38>)
 8005442:	4c0d      	ldr	r4, [pc, #52]	@ (8005478 <__libc_init_array+0x3c>)
 8005444:	1b64      	subs	r4, r4, r5
 8005446:	10a4      	asrs	r4, r4, #2
 8005448:	42a6      	cmp	r6, r4
 800544a:	d109      	bne.n	8005460 <__libc_init_array+0x24>
 800544c:	f000 fc78 	bl	8005d40 <_init>
 8005450:	2600      	movs	r6, #0
 8005452:	4d0a      	ldr	r5, [pc, #40]	@ (800547c <__libc_init_array+0x40>)
 8005454:	4c0a      	ldr	r4, [pc, #40]	@ (8005480 <__libc_init_array+0x44>)
 8005456:	1b64      	subs	r4, r4, r5
 8005458:	10a4      	asrs	r4, r4, #2
 800545a:	42a6      	cmp	r6, r4
 800545c:	d105      	bne.n	800546a <__libc_init_array+0x2e>
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	f855 3b04 	ldr.w	r3, [r5], #4
 8005464:	4798      	blx	r3
 8005466:	3601      	adds	r6, #1
 8005468:	e7ee      	b.n	8005448 <__libc_init_array+0xc>
 800546a:	f855 3b04 	ldr.w	r3, [r5], #4
 800546e:	4798      	blx	r3
 8005470:	3601      	adds	r6, #1
 8005472:	e7f2      	b.n	800545a <__libc_init_array+0x1e>
 8005474:	080066f4 	.word	0x080066f4
 8005478:	080066f4 	.word	0x080066f4
 800547c:	080066f4 	.word	0x080066f4
 8005480:	080066f8 	.word	0x080066f8

08005484 <__retarget_lock_acquire_recursive>:
 8005484:	4770      	bx	lr

08005486 <__retarget_lock_release_recursive>:
 8005486:	4770      	bx	lr

08005488 <_free_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4605      	mov	r5, r0
 800548c:	2900      	cmp	r1, #0
 800548e:	d040      	beq.n	8005512 <_free_r+0x8a>
 8005490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005494:	1f0c      	subs	r4, r1, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	bfb8      	it	lt
 800549a:	18e4      	addlt	r4, r4, r3
 800549c:	f000 f8de 	bl	800565c <__malloc_lock>
 80054a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005514 <_free_r+0x8c>)
 80054a2:	6813      	ldr	r3, [r2, #0]
 80054a4:	b933      	cbnz	r3, 80054b4 <_free_r+0x2c>
 80054a6:	6063      	str	r3, [r4, #4]
 80054a8:	6014      	str	r4, [r2, #0]
 80054aa:	4628      	mov	r0, r5
 80054ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054b0:	f000 b8da 	b.w	8005668 <__malloc_unlock>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d908      	bls.n	80054ca <_free_r+0x42>
 80054b8:	6820      	ldr	r0, [r4, #0]
 80054ba:	1821      	adds	r1, r4, r0
 80054bc:	428b      	cmp	r3, r1
 80054be:	bf01      	itttt	eq
 80054c0:	6819      	ldreq	r1, [r3, #0]
 80054c2:	685b      	ldreq	r3, [r3, #4]
 80054c4:	1809      	addeq	r1, r1, r0
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	e7ed      	b.n	80054a6 <_free_r+0x1e>
 80054ca:	461a      	mov	r2, r3
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	b10b      	cbz	r3, 80054d4 <_free_r+0x4c>
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	d9fa      	bls.n	80054ca <_free_r+0x42>
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	1850      	adds	r0, r2, r1
 80054d8:	42a0      	cmp	r0, r4
 80054da:	d10b      	bne.n	80054f4 <_free_r+0x6c>
 80054dc:	6820      	ldr	r0, [r4, #0]
 80054de:	4401      	add	r1, r0
 80054e0:	1850      	adds	r0, r2, r1
 80054e2:	4283      	cmp	r3, r0
 80054e4:	6011      	str	r1, [r2, #0]
 80054e6:	d1e0      	bne.n	80054aa <_free_r+0x22>
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4408      	add	r0, r1
 80054ee:	6010      	str	r0, [r2, #0]
 80054f0:	6053      	str	r3, [r2, #4]
 80054f2:	e7da      	b.n	80054aa <_free_r+0x22>
 80054f4:	d902      	bls.n	80054fc <_free_r+0x74>
 80054f6:	230c      	movs	r3, #12
 80054f8:	602b      	str	r3, [r5, #0]
 80054fa:	e7d6      	b.n	80054aa <_free_r+0x22>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	1821      	adds	r1, r4, r0
 8005500:	428b      	cmp	r3, r1
 8005502:	bf01      	itttt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	1809      	addeq	r1, r1, r0
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	6063      	str	r3, [r4, #4]
 800550e:	6054      	str	r4, [r2, #4]
 8005510:	e7cb      	b.n	80054aa <_free_r+0x22>
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	20000774 	.word	0x20000774

08005518 <sbrk_aligned>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4e0f      	ldr	r6, [pc, #60]	@ (8005558 <sbrk_aligned+0x40>)
 800551c:	460c      	mov	r4, r1
 800551e:	6831      	ldr	r1, [r6, #0]
 8005520:	4605      	mov	r5, r0
 8005522:	b911      	cbnz	r1, 800552a <sbrk_aligned+0x12>
 8005524:	f000 fbaa 	bl	8005c7c <_sbrk_r>
 8005528:	6030      	str	r0, [r6, #0]
 800552a:	4621      	mov	r1, r4
 800552c:	4628      	mov	r0, r5
 800552e:	f000 fba5 	bl	8005c7c <_sbrk_r>
 8005532:	1c43      	adds	r3, r0, #1
 8005534:	d103      	bne.n	800553e <sbrk_aligned+0x26>
 8005536:	f04f 34ff 	mov.w	r4, #4294967295
 800553a:	4620      	mov	r0, r4
 800553c:	bd70      	pop	{r4, r5, r6, pc}
 800553e:	1cc4      	adds	r4, r0, #3
 8005540:	f024 0403 	bic.w	r4, r4, #3
 8005544:	42a0      	cmp	r0, r4
 8005546:	d0f8      	beq.n	800553a <sbrk_aligned+0x22>
 8005548:	1a21      	subs	r1, r4, r0
 800554a:	4628      	mov	r0, r5
 800554c:	f000 fb96 	bl	8005c7c <_sbrk_r>
 8005550:	3001      	adds	r0, #1
 8005552:	d1f2      	bne.n	800553a <sbrk_aligned+0x22>
 8005554:	e7ef      	b.n	8005536 <sbrk_aligned+0x1e>
 8005556:	bf00      	nop
 8005558:	20000770 	.word	0x20000770

0800555c <_malloc_r>:
 800555c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005560:	1ccd      	adds	r5, r1, #3
 8005562:	f025 0503 	bic.w	r5, r5, #3
 8005566:	3508      	adds	r5, #8
 8005568:	2d0c      	cmp	r5, #12
 800556a:	bf38      	it	cc
 800556c:	250c      	movcc	r5, #12
 800556e:	2d00      	cmp	r5, #0
 8005570:	4606      	mov	r6, r0
 8005572:	db01      	blt.n	8005578 <_malloc_r+0x1c>
 8005574:	42a9      	cmp	r1, r5
 8005576:	d904      	bls.n	8005582 <_malloc_r+0x26>
 8005578:	230c      	movs	r3, #12
 800557a:	6033      	str	r3, [r6, #0]
 800557c:	2000      	movs	r0, #0
 800557e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005582:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005658 <_malloc_r+0xfc>
 8005586:	f000 f869 	bl	800565c <__malloc_lock>
 800558a:	f8d8 3000 	ldr.w	r3, [r8]
 800558e:	461c      	mov	r4, r3
 8005590:	bb44      	cbnz	r4, 80055e4 <_malloc_r+0x88>
 8005592:	4629      	mov	r1, r5
 8005594:	4630      	mov	r0, r6
 8005596:	f7ff ffbf 	bl	8005518 <sbrk_aligned>
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	4604      	mov	r4, r0
 800559e:	d158      	bne.n	8005652 <_malloc_r+0xf6>
 80055a0:	f8d8 4000 	ldr.w	r4, [r8]
 80055a4:	4627      	mov	r7, r4
 80055a6:	2f00      	cmp	r7, #0
 80055a8:	d143      	bne.n	8005632 <_malloc_r+0xd6>
 80055aa:	2c00      	cmp	r4, #0
 80055ac:	d04b      	beq.n	8005646 <_malloc_r+0xea>
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	4639      	mov	r1, r7
 80055b2:	4630      	mov	r0, r6
 80055b4:	eb04 0903 	add.w	r9, r4, r3
 80055b8:	f000 fb60 	bl	8005c7c <_sbrk_r>
 80055bc:	4581      	cmp	r9, r0
 80055be:	d142      	bne.n	8005646 <_malloc_r+0xea>
 80055c0:	6821      	ldr	r1, [r4, #0]
 80055c2:	4630      	mov	r0, r6
 80055c4:	1a6d      	subs	r5, r5, r1
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7ff ffa6 	bl	8005518 <sbrk_aligned>
 80055cc:	3001      	adds	r0, #1
 80055ce:	d03a      	beq.n	8005646 <_malloc_r+0xea>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	442b      	add	r3, r5
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	f8d8 3000 	ldr.w	r3, [r8]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	bb62      	cbnz	r2, 8005638 <_malloc_r+0xdc>
 80055de:	f8c8 7000 	str.w	r7, [r8]
 80055e2:	e00f      	b.n	8005604 <_malloc_r+0xa8>
 80055e4:	6822      	ldr	r2, [r4, #0]
 80055e6:	1b52      	subs	r2, r2, r5
 80055e8:	d420      	bmi.n	800562c <_malloc_r+0xd0>
 80055ea:	2a0b      	cmp	r2, #11
 80055ec:	d917      	bls.n	800561e <_malloc_r+0xc2>
 80055ee:	1961      	adds	r1, r4, r5
 80055f0:	42a3      	cmp	r3, r4
 80055f2:	6025      	str	r5, [r4, #0]
 80055f4:	bf18      	it	ne
 80055f6:	6059      	strne	r1, [r3, #4]
 80055f8:	6863      	ldr	r3, [r4, #4]
 80055fa:	bf08      	it	eq
 80055fc:	f8c8 1000 	streq.w	r1, [r8]
 8005600:	5162      	str	r2, [r4, r5]
 8005602:	604b      	str	r3, [r1, #4]
 8005604:	4630      	mov	r0, r6
 8005606:	f000 f82f 	bl	8005668 <__malloc_unlock>
 800560a:	f104 000b 	add.w	r0, r4, #11
 800560e:	1d23      	adds	r3, r4, #4
 8005610:	f020 0007 	bic.w	r0, r0, #7
 8005614:	1ac2      	subs	r2, r0, r3
 8005616:	bf1c      	itt	ne
 8005618:	1a1b      	subne	r3, r3, r0
 800561a:	50a3      	strne	r3, [r4, r2]
 800561c:	e7af      	b.n	800557e <_malloc_r+0x22>
 800561e:	6862      	ldr	r2, [r4, #4]
 8005620:	42a3      	cmp	r3, r4
 8005622:	bf0c      	ite	eq
 8005624:	f8c8 2000 	streq.w	r2, [r8]
 8005628:	605a      	strne	r2, [r3, #4]
 800562a:	e7eb      	b.n	8005604 <_malloc_r+0xa8>
 800562c:	4623      	mov	r3, r4
 800562e:	6864      	ldr	r4, [r4, #4]
 8005630:	e7ae      	b.n	8005590 <_malloc_r+0x34>
 8005632:	463c      	mov	r4, r7
 8005634:	687f      	ldr	r7, [r7, #4]
 8005636:	e7b6      	b.n	80055a6 <_malloc_r+0x4a>
 8005638:	461a      	mov	r2, r3
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	42a3      	cmp	r3, r4
 800563e:	d1fb      	bne.n	8005638 <_malloc_r+0xdc>
 8005640:	2300      	movs	r3, #0
 8005642:	6053      	str	r3, [r2, #4]
 8005644:	e7de      	b.n	8005604 <_malloc_r+0xa8>
 8005646:	230c      	movs	r3, #12
 8005648:	4630      	mov	r0, r6
 800564a:	6033      	str	r3, [r6, #0]
 800564c:	f000 f80c 	bl	8005668 <__malloc_unlock>
 8005650:	e794      	b.n	800557c <_malloc_r+0x20>
 8005652:	6005      	str	r5, [r0, #0]
 8005654:	e7d6      	b.n	8005604 <_malloc_r+0xa8>
 8005656:	bf00      	nop
 8005658:	20000774 	.word	0x20000774

0800565c <__malloc_lock>:
 800565c:	4801      	ldr	r0, [pc, #4]	@ (8005664 <__malloc_lock+0x8>)
 800565e:	f7ff bf11 	b.w	8005484 <__retarget_lock_acquire_recursive>
 8005662:	bf00      	nop
 8005664:	2000076c 	.word	0x2000076c

08005668 <__malloc_unlock>:
 8005668:	4801      	ldr	r0, [pc, #4]	@ (8005670 <__malloc_unlock+0x8>)
 800566a:	f7ff bf0c 	b.w	8005486 <__retarget_lock_release_recursive>
 800566e:	bf00      	nop
 8005670:	2000076c 	.word	0x2000076c

08005674 <__ssputs_r>:
 8005674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005678:	461f      	mov	r7, r3
 800567a:	688e      	ldr	r6, [r1, #8]
 800567c:	4682      	mov	sl, r0
 800567e:	42be      	cmp	r6, r7
 8005680:	460c      	mov	r4, r1
 8005682:	4690      	mov	r8, r2
 8005684:	680b      	ldr	r3, [r1, #0]
 8005686:	d82d      	bhi.n	80056e4 <__ssputs_r+0x70>
 8005688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800568c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005690:	d026      	beq.n	80056e0 <__ssputs_r+0x6c>
 8005692:	6965      	ldr	r5, [r4, #20]
 8005694:	6909      	ldr	r1, [r1, #16]
 8005696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800569a:	eba3 0901 	sub.w	r9, r3, r1
 800569e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056a2:	1c7b      	adds	r3, r7, #1
 80056a4:	444b      	add	r3, r9
 80056a6:	106d      	asrs	r5, r5, #1
 80056a8:	429d      	cmp	r5, r3
 80056aa:	bf38      	it	cc
 80056ac:	461d      	movcc	r5, r3
 80056ae:	0553      	lsls	r3, r2, #21
 80056b0:	d527      	bpl.n	8005702 <__ssputs_r+0x8e>
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7ff ff52 	bl	800555c <_malloc_r>
 80056b8:	4606      	mov	r6, r0
 80056ba:	b360      	cbz	r0, 8005716 <__ssputs_r+0xa2>
 80056bc:	464a      	mov	r2, r9
 80056be:	6921      	ldr	r1, [r4, #16]
 80056c0:	f000 fafa 	bl	8005cb8 <memcpy>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	6126      	str	r6, [r4, #16]
 80056d2:	444e      	add	r6, r9
 80056d4:	6026      	str	r6, [r4, #0]
 80056d6:	463e      	mov	r6, r7
 80056d8:	6165      	str	r5, [r4, #20]
 80056da:	eba5 0509 	sub.w	r5, r5, r9
 80056de:	60a5      	str	r5, [r4, #8]
 80056e0:	42be      	cmp	r6, r7
 80056e2:	d900      	bls.n	80056e6 <__ssputs_r+0x72>
 80056e4:	463e      	mov	r6, r7
 80056e6:	4632      	mov	r2, r6
 80056e8:	4641      	mov	r1, r8
 80056ea:	6820      	ldr	r0, [r4, #0]
 80056ec:	f000 faac 	bl	8005c48 <memmove>
 80056f0:	2000      	movs	r0, #0
 80056f2:	68a3      	ldr	r3, [r4, #8]
 80056f4:	1b9b      	subs	r3, r3, r6
 80056f6:	60a3      	str	r3, [r4, #8]
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	4433      	add	r3, r6
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005702:	462a      	mov	r2, r5
 8005704:	f000 fae6 	bl	8005cd4 <_realloc_r>
 8005708:	4606      	mov	r6, r0
 800570a:	2800      	cmp	r0, #0
 800570c:	d1e0      	bne.n	80056d0 <__ssputs_r+0x5c>
 800570e:	4650      	mov	r0, sl
 8005710:	6921      	ldr	r1, [r4, #16]
 8005712:	f7ff feb9 	bl	8005488 <_free_r>
 8005716:	230c      	movs	r3, #12
 8005718:	f8ca 3000 	str.w	r3, [sl]
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f04f 30ff 	mov.w	r0, #4294967295
 8005722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005726:	81a3      	strh	r3, [r4, #12]
 8005728:	e7e9      	b.n	80056fe <__ssputs_r+0x8a>
	...

0800572c <_svfiprintf_r>:
 800572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005730:	4698      	mov	r8, r3
 8005732:	898b      	ldrh	r3, [r1, #12]
 8005734:	4607      	mov	r7, r0
 8005736:	061b      	lsls	r3, r3, #24
 8005738:	460d      	mov	r5, r1
 800573a:	4614      	mov	r4, r2
 800573c:	b09d      	sub	sp, #116	@ 0x74
 800573e:	d510      	bpl.n	8005762 <_svfiprintf_r+0x36>
 8005740:	690b      	ldr	r3, [r1, #16]
 8005742:	b973      	cbnz	r3, 8005762 <_svfiprintf_r+0x36>
 8005744:	2140      	movs	r1, #64	@ 0x40
 8005746:	f7ff ff09 	bl	800555c <_malloc_r>
 800574a:	6028      	str	r0, [r5, #0]
 800574c:	6128      	str	r0, [r5, #16]
 800574e:	b930      	cbnz	r0, 800575e <_svfiprintf_r+0x32>
 8005750:	230c      	movs	r3, #12
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	b01d      	add	sp, #116	@ 0x74
 800575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575e:	2340      	movs	r3, #64	@ 0x40
 8005760:	616b      	str	r3, [r5, #20]
 8005762:	2300      	movs	r3, #0
 8005764:	9309      	str	r3, [sp, #36]	@ 0x24
 8005766:	2320      	movs	r3, #32
 8005768:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800576c:	2330      	movs	r3, #48	@ 0x30
 800576e:	f04f 0901 	mov.w	r9, #1
 8005772:	f8cd 800c 	str.w	r8, [sp, #12]
 8005776:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005910 <_svfiprintf_r+0x1e4>
 800577a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800577e:	4623      	mov	r3, r4
 8005780:	469a      	mov	sl, r3
 8005782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005786:	b10a      	cbz	r2, 800578c <_svfiprintf_r+0x60>
 8005788:	2a25      	cmp	r2, #37	@ 0x25
 800578a:	d1f9      	bne.n	8005780 <_svfiprintf_r+0x54>
 800578c:	ebba 0b04 	subs.w	fp, sl, r4
 8005790:	d00b      	beq.n	80057aa <_svfiprintf_r+0x7e>
 8005792:	465b      	mov	r3, fp
 8005794:	4622      	mov	r2, r4
 8005796:	4629      	mov	r1, r5
 8005798:	4638      	mov	r0, r7
 800579a:	f7ff ff6b 	bl	8005674 <__ssputs_r>
 800579e:	3001      	adds	r0, #1
 80057a0:	f000 80a7 	beq.w	80058f2 <_svfiprintf_r+0x1c6>
 80057a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057a6:	445a      	add	r2, fp
 80057a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80057aa:	f89a 3000 	ldrb.w	r3, [sl]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 809f 	beq.w	80058f2 <_svfiprintf_r+0x1c6>
 80057b4:	2300      	movs	r3, #0
 80057b6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057be:	f10a 0a01 	add.w	sl, sl, #1
 80057c2:	9304      	str	r3, [sp, #16]
 80057c4:	9307      	str	r3, [sp, #28]
 80057c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80057cc:	4654      	mov	r4, sl
 80057ce:	2205      	movs	r2, #5
 80057d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d4:	484e      	ldr	r0, [pc, #312]	@ (8005910 <_svfiprintf_r+0x1e4>)
 80057d6:	f000 fa61 	bl	8005c9c <memchr>
 80057da:	9a04      	ldr	r2, [sp, #16]
 80057dc:	b9d8      	cbnz	r0, 8005816 <_svfiprintf_r+0xea>
 80057de:	06d0      	lsls	r0, r2, #27
 80057e0:	bf44      	itt	mi
 80057e2:	2320      	movmi	r3, #32
 80057e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057e8:	0711      	lsls	r1, r2, #28
 80057ea:	bf44      	itt	mi
 80057ec:	232b      	movmi	r3, #43	@ 0x2b
 80057ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057f2:	f89a 3000 	ldrb.w	r3, [sl]
 80057f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80057f8:	d015      	beq.n	8005826 <_svfiprintf_r+0xfa>
 80057fa:	4654      	mov	r4, sl
 80057fc:	2000      	movs	r0, #0
 80057fe:	f04f 0c0a 	mov.w	ip, #10
 8005802:	9a07      	ldr	r2, [sp, #28]
 8005804:	4621      	mov	r1, r4
 8005806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800580a:	3b30      	subs	r3, #48	@ 0x30
 800580c:	2b09      	cmp	r3, #9
 800580e:	d94b      	bls.n	80058a8 <_svfiprintf_r+0x17c>
 8005810:	b1b0      	cbz	r0, 8005840 <_svfiprintf_r+0x114>
 8005812:	9207      	str	r2, [sp, #28]
 8005814:	e014      	b.n	8005840 <_svfiprintf_r+0x114>
 8005816:	eba0 0308 	sub.w	r3, r0, r8
 800581a:	fa09 f303 	lsl.w	r3, r9, r3
 800581e:	4313      	orrs	r3, r2
 8005820:	46a2      	mov	sl, r4
 8005822:	9304      	str	r3, [sp, #16]
 8005824:	e7d2      	b.n	80057cc <_svfiprintf_r+0xa0>
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	1d19      	adds	r1, r3, #4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	9103      	str	r1, [sp, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	bfbb      	ittet	lt
 8005832:	425b      	neglt	r3, r3
 8005834:	f042 0202 	orrlt.w	r2, r2, #2
 8005838:	9307      	strge	r3, [sp, #28]
 800583a:	9307      	strlt	r3, [sp, #28]
 800583c:	bfb8      	it	lt
 800583e:	9204      	strlt	r2, [sp, #16]
 8005840:	7823      	ldrb	r3, [r4, #0]
 8005842:	2b2e      	cmp	r3, #46	@ 0x2e
 8005844:	d10a      	bne.n	800585c <_svfiprintf_r+0x130>
 8005846:	7863      	ldrb	r3, [r4, #1]
 8005848:	2b2a      	cmp	r3, #42	@ 0x2a
 800584a:	d132      	bne.n	80058b2 <_svfiprintf_r+0x186>
 800584c:	9b03      	ldr	r3, [sp, #12]
 800584e:	3402      	adds	r4, #2
 8005850:	1d1a      	adds	r2, r3, #4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	9203      	str	r2, [sp, #12]
 8005856:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800585a:	9305      	str	r3, [sp, #20]
 800585c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005914 <_svfiprintf_r+0x1e8>
 8005860:	2203      	movs	r2, #3
 8005862:	4650      	mov	r0, sl
 8005864:	7821      	ldrb	r1, [r4, #0]
 8005866:	f000 fa19 	bl	8005c9c <memchr>
 800586a:	b138      	cbz	r0, 800587c <_svfiprintf_r+0x150>
 800586c:	2240      	movs	r2, #64	@ 0x40
 800586e:	9b04      	ldr	r3, [sp, #16]
 8005870:	eba0 000a 	sub.w	r0, r0, sl
 8005874:	4082      	lsls	r2, r0
 8005876:	4313      	orrs	r3, r2
 8005878:	3401      	adds	r4, #1
 800587a:	9304      	str	r3, [sp, #16]
 800587c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005880:	2206      	movs	r2, #6
 8005882:	4825      	ldr	r0, [pc, #148]	@ (8005918 <_svfiprintf_r+0x1ec>)
 8005884:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005888:	f000 fa08 	bl	8005c9c <memchr>
 800588c:	2800      	cmp	r0, #0
 800588e:	d036      	beq.n	80058fe <_svfiprintf_r+0x1d2>
 8005890:	4b22      	ldr	r3, [pc, #136]	@ (800591c <_svfiprintf_r+0x1f0>)
 8005892:	bb1b      	cbnz	r3, 80058dc <_svfiprintf_r+0x1b0>
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	3307      	adds	r3, #7
 8005898:	f023 0307 	bic.w	r3, r3, #7
 800589c:	3308      	adds	r3, #8
 800589e:	9303      	str	r3, [sp, #12]
 80058a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a2:	4433      	add	r3, r6
 80058a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058a6:	e76a      	b.n	800577e <_svfiprintf_r+0x52>
 80058a8:	460c      	mov	r4, r1
 80058aa:	2001      	movs	r0, #1
 80058ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80058b0:	e7a8      	b.n	8005804 <_svfiprintf_r+0xd8>
 80058b2:	2300      	movs	r3, #0
 80058b4:	f04f 0c0a 	mov.w	ip, #10
 80058b8:	4619      	mov	r1, r3
 80058ba:	3401      	adds	r4, #1
 80058bc:	9305      	str	r3, [sp, #20]
 80058be:	4620      	mov	r0, r4
 80058c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058c4:	3a30      	subs	r2, #48	@ 0x30
 80058c6:	2a09      	cmp	r2, #9
 80058c8:	d903      	bls.n	80058d2 <_svfiprintf_r+0x1a6>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0c6      	beq.n	800585c <_svfiprintf_r+0x130>
 80058ce:	9105      	str	r1, [sp, #20]
 80058d0:	e7c4      	b.n	800585c <_svfiprintf_r+0x130>
 80058d2:	4604      	mov	r4, r0
 80058d4:	2301      	movs	r3, #1
 80058d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80058da:	e7f0      	b.n	80058be <_svfiprintf_r+0x192>
 80058dc:	ab03      	add	r3, sp, #12
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	462a      	mov	r2, r5
 80058e2:	4638      	mov	r0, r7
 80058e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005920 <_svfiprintf_r+0x1f4>)
 80058e6:	a904      	add	r1, sp, #16
 80058e8:	f3af 8000 	nop.w
 80058ec:	1c42      	adds	r2, r0, #1
 80058ee:	4606      	mov	r6, r0
 80058f0:	d1d6      	bne.n	80058a0 <_svfiprintf_r+0x174>
 80058f2:	89ab      	ldrh	r3, [r5, #12]
 80058f4:	065b      	lsls	r3, r3, #25
 80058f6:	f53f af2d 	bmi.w	8005754 <_svfiprintf_r+0x28>
 80058fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058fc:	e72c      	b.n	8005758 <_svfiprintf_r+0x2c>
 80058fe:	ab03      	add	r3, sp, #12
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	462a      	mov	r2, r5
 8005904:	4638      	mov	r0, r7
 8005906:	4b06      	ldr	r3, [pc, #24]	@ (8005920 <_svfiprintf_r+0x1f4>)
 8005908:	a904      	add	r1, sp, #16
 800590a:	f000 f87d 	bl	8005a08 <_printf_i>
 800590e:	e7ed      	b.n	80058ec <_svfiprintf_r+0x1c0>
 8005910:	080066b7 	.word	0x080066b7
 8005914:	080066bd 	.word	0x080066bd
 8005918:	080066c1 	.word	0x080066c1
 800591c:	00000000 	.word	0x00000000
 8005920:	08005675 	.word	0x08005675

08005924 <_printf_common>:
 8005924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005928:	4616      	mov	r6, r2
 800592a:	4698      	mov	r8, r3
 800592c:	688a      	ldr	r2, [r1, #8]
 800592e:	690b      	ldr	r3, [r1, #16]
 8005930:	4607      	mov	r7, r0
 8005932:	4293      	cmp	r3, r2
 8005934:	bfb8      	it	lt
 8005936:	4613      	movlt	r3, r2
 8005938:	6033      	str	r3, [r6, #0]
 800593a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800593e:	460c      	mov	r4, r1
 8005940:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005944:	b10a      	cbz	r2, 800594a <_printf_common+0x26>
 8005946:	3301      	adds	r3, #1
 8005948:	6033      	str	r3, [r6, #0]
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	0699      	lsls	r1, r3, #26
 800594e:	bf42      	ittt	mi
 8005950:	6833      	ldrmi	r3, [r6, #0]
 8005952:	3302      	addmi	r3, #2
 8005954:	6033      	strmi	r3, [r6, #0]
 8005956:	6825      	ldr	r5, [r4, #0]
 8005958:	f015 0506 	ands.w	r5, r5, #6
 800595c:	d106      	bne.n	800596c <_printf_common+0x48>
 800595e:	f104 0a19 	add.w	sl, r4, #25
 8005962:	68e3      	ldr	r3, [r4, #12]
 8005964:	6832      	ldr	r2, [r6, #0]
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	42ab      	cmp	r3, r5
 800596a:	dc2b      	bgt.n	80059c4 <_printf_common+0xa0>
 800596c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005970:	6822      	ldr	r2, [r4, #0]
 8005972:	3b00      	subs	r3, #0
 8005974:	bf18      	it	ne
 8005976:	2301      	movne	r3, #1
 8005978:	0692      	lsls	r2, r2, #26
 800597a:	d430      	bmi.n	80059de <_printf_common+0xba>
 800597c:	4641      	mov	r1, r8
 800597e:	4638      	mov	r0, r7
 8005980:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005984:	47c8      	blx	r9
 8005986:	3001      	adds	r0, #1
 8005988:	d023      	beq.n	80059d2 <_printf_common+0xae>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	6922      	ldr	r2, [r4, #16]
 800598e:	f003 0306 	and.w	r3, r3, #6
 8005992:	2b04      	cmp	r3, #4
 8005994:	bf14      	ite	ne
 8005996:	2500      	movne	r5, #0
 8005998:	6833      	ldreq	r3, [r6, #0]
 800599a:	f04f 0600 	mov.w	r6, #0
 800599e:	bf08      	it	eq
 80059a0:	68e5      	ldreq	r5, [r4, #12]
 80059a2:	f104 041a 	add.w	r4, r4, #26
 80059a6:	bf08      	it	eq
 80059a8:	1aed      	subeq	r5, r5, r3
 80059aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80059ae:	bf08      	it	eq
 80059b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059b4:	4293      	cmp	r3, r2
 80059b6:	bfc4      	itt	gt
 80059b8:	1a9b      	subgt	r3, r3, r2
 80059ba:	18ed      	addgt	r5, r5, r3
 80059bc:	42b5      	cmp	r5, r6
 80059be:	d11a      	bne.n	80059f6 <_printf_common+0xd2>
 80059c0:	2000      	movs	r0, #0
 80059c2:	e008      	b.n	80059d6 <_printf_common+0xb2>
 80059c4:	2301      	movs	r3, #1
 80059c6:	4652      	mov	r2, sl
 80059c8:	4641      	mov	r1, r8
 80059ca:	4638      	mov	r0, r7
 80059cc:	47c8      	blx	r9
 80059ce:	3001      	adds	r0, #1
 80059d0:	d103      	bne.n	80059da <_printf_common+0xb6>
 80059d2:	f04f 30ff 	mov.w	r0, #4294967295
 80059d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059da:	3501      	adds	r5, #1
 80059dc:	e7c1      	b.n	8005962 <_printf_common+0x3e>
 80059de:	2030      	movs	r0, #48	@ 0x30
 80059e0:	18e1      	adds	r1, r4, r3
 80059e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059ec:	4422      	add	r2, r4
 80059ee:	3302      	adds	r3, #2
 80059f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059f4:	e7c2      	b.n	800597c <_printf_common+0x58>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4622      	mov	r2, r4
 80059fa:	4641      	mov	r1, r8
 80059fc:	4638      	mov	r0, r7
 80059fe:	47c8      	blx	r9
 8005a00:	3001      	adds	r0, #1
 8005a02:	d0e6      	beq.n	80059d2 <_printf_common+0xae>
 8005a04:	3601      	adds	r6, #1
 8005a06:	e7d9      	b.n	80059bc <_printf_common+0x98>

08005a08 <_printf_i>:
 8005a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a0c:	7e0f      	ldrb	r7, [r1, #24]
 8005a0e:	4691      	mov	r9, r2
 8005a10:	2f78      	cmp	r7, #120	@ 0x78
 8005a12:	4680      	mov	r8, r0
 8005a14:	460c      	mov	r4, r1
 8005a16:	469a      	mov	sl, r3
 8005a18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a1e:	d807      	bhi.n	8005a30 <_printf_i+0x28>
 8005a20:	2f62      	cmp	r7, #98	@ 0x62
 8005a22:	d80a      	bhi.n	8005a3a <_printf_i+0x32>
 8005a24:	2f00      	cmp	r7, #0
 8005a26:	f000 80d3 	beq.w	8005bd0 <_printf_i+0x1c8>
 8005a2a:	2f58      	cmp	r7, #88	@ 0x58
 8005a2c:	f000 80ba 	beq.w	8005ba4 <_printf_i+0x19c>
 8005a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a38:	e03a      	b.n	8005ab0 <_printf_i+0xa8>
 8005a3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a3e:	2b15      	cmp	r3, #21
 8005a40:	d8f6      	bhi.n	8005a30 <_printf_i+0x28>
 8005a42:	a101      	add	r1, pc, #4	@ (adr r1, 8005a48 <_printf_i+0x40>)
 8005a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a48:	08005aa1 	.word	0x08005aa1
 8005a4c:	08005ab5 	.word	0x08005ab5
 8005a50:	08005a31 	.word	0x08005a31
 8005a54:	08005a31 	.word	0x08005a31
 8005a58:	08005a31 	.word	0x08005a31
 8005a5c:	08005a31 	.word	0x08005a31
 8005a60:	08005ab5 	.word	0x08005ab5
 8005a64:	08005a31 	.word	0x08005a31
 8005a68:	08005a31 	.word	0x08005a31
 8005a6c:	08005a31 	.word	0x08005a31
 8005a70:	08005a31 	.word	0x08005a31
 8005a74:	08005bb7 	.word	0x08005bb7
 8005a78:	08005adf 	.word	0x08005adf
 8005a7c:	08005b71 	.word	0x08005b71
 8005a80:	08005a31 	.word	0x08005a31
 8005a84:	08005a31 	.word	0x08005a31
 8005a88:	08005bd9 	.word	0x08005bd9
 8005a8c:	08005a31 	.word	0x08005a31
 8005a90:	08005adf 	.word	0x08005adf
 8005a94:	08005a31 	.word	0x08005a31
 8005a98:	08005a31 	.word	0x08005a31
 8005a9c:	08005b79 	.word	0x08005b79
 8005aa0:	6833      	ldr	r3, [r6, #0]
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6032      	str	r2, [r6, #0]
 8005aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005aac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e09e      	b.n	8005bf2 <_printf_i+0x1ea>
 8005ab4:	6833      	ldr	r3, [r6, #0]
 8005ab6:	6820      	ldr	r0, [r4, #0]
 8005ab8:	1d19      	adds	r1, r3, #4
 8005aba:	6031      	str	r1, [r6, #0]
 8005abc:	0606      	lsls	r6, r0, #24
 8005abe:	d501      	bpl.n	8005ac4 <_printf_i+0xbc>
 8005ac0:	681d      	ldr	r5, [r3, #0]
 8005ac2:	e003      	b.n	8005acc <_printf_i+0xc4>
 8005ac4:	0645      	lsls	r5, r0, #25
 8005ac6:	d5fb      	bpl.n	8005ac0 <_printf_i+0xb8>
 8005ac8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005acc:	2d00      	cmp	r5, #0
 8005ace:	da03      	bge.n	8005ad8 <_printf_i+0xd0>
 8005ad0:	232d      	movs	r3, #45	@ 0x2d
 8005ad2:	426d      	negs	r5, r5
 8005ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ad8:	230a      	movs	r3, #10
 8005ada:	4859      	ldr	r0, [pc, #356]	@ (8005c40 <_printf_i+0x238>)
 8005adc:	e011      	b.n	8005b02 <_printf_i+0xfa>
 8005ade:	6821      	ldr	r1, [r4, #0]
 8005ae0:	6833      	ldr	r3, [r6, #0]
 8005ae2:	0608      	lsls	r0, r1, #24
 8005ae4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ae8:	d402      	bmi.n	8005af0 <_printf_i+0xe8>
 8005aea:	0649      	lsls	r1, r1, #25
 8005aec:	bf48      	it	mi
 8005aee:	b2ad      	uxthmi	r5, r5
 8005af0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005af2:	6033      	str	r3, [r6, #0]
 8005af4:	bf14      	ite	ne
 8005af6:	230a      	movne	r3, #10
 8005af8:	2308      	moveq	r3, #8
 8005afa:	4851      	ldr	r0, [pc, #324]	@ (8005c40 <_printf_i+0x238>)
 8005afc:	2100      	movs	r1, #0
 8005afe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b02:	6866      	ldr	r6, [r4, #4]
 8005b04:	2e00      	cmp	r6, #0
 8005b06:	bfa8      	it	ge
 8005b08:	6821      	ldrge	r1, [r4, #0]
 8005b0a:	60a6      	str	r6, [r4, #8]
 8005b0c:	bfa4      	itt	ge
 8005b0e:	f021 0104 	bicge.w	r1, r1, #4
 8005b12:	6021      	strge	r1, [r4, #0]
 8005b14:	b90d      	cbnz	r5, 8005b1a <_printf_i+0x112>
 8005b16:	2e00      	cmp	r6, #0
 8005b18:	d04b      	beq.n	8005bb2 <_printf_i+0x1aa>
 8005b1a:	4616      	mov	r6, r2
 8005b1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b20:	fb03 5711 	mls	r7, r3, r1, r5
 8005b24:	5dc7      	ldrb	r7, [r0, r7]
 8005b26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b2a:	462f      	mov	r7, r5
 8005b2c:	42bb      	cmp	r3, r7
 8005b2e:	460d      	mov	r5, r1
 8005b30:	d9f4      	bls.n	8005b1c <_printf_i+0x114>
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d10b      	bne.n	8005b4e <_printf_i+0x146>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	07df      	lsls	r7, r3, #31
 8005b3a:	d508      	bpl.n	8005b4e <_printf_i+0x146>
 8005b3c:	6923      	ldr	r3, [r4, #16]
 8005b3e:	6861      	ldr	r1, [r4, #4]
 8005b40:	4299      	cmp	r1, r3
 8005b42:	bfde      	ittt	le
 8005b44:	2330      	movle	r3, #48	@ 0x30
 8005b46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b4e:	1b92      	subs	r2, r2, r6
 8005b50:	6122      	str	r2, [r4, #16]
 8005b52:	464b      	mov	r3, r9
 8005b54:	4621      	mov	r1, r4
 8005b56:	4640      	mov	r0, r8
 8005b58:	f8cd a000 	str.w	sl, [sp]
 8005b5c:	aa03      	add	r2, sp, #12
 8005b5e:	f7ff fee1 	bl	8005924 <_printf_common>
 8005b62:	3001      	adds	r0, #1
 8005b64:	d14a      	bne.n	8005bfc <_printf_i+0x1f4>
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6a:	b004      	add	sp, #16
 8005b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	f043 0320 	orr.w	r3, r3, #32
 8005b76:	6023      	str	r3, [r4, #0]
 8005b78:	2778      	movs	r7, #120	@ 0x78
 8005b7a:	4832      	ldr	r0, [pc, #200]	@ (8005c44 <_printf_i+0x23c>)
 8005b7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	6831      	ldr	r1, [r6, #0]
 8005b84:	061f      	lsls	r7, r3, #24
 8005b86:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b8a:	d402      	bmi.n	8005b92 <_printf_i+0x18a>
 8005b8c:	065f      	lsls	r7, r3, #25
 8005b8e:	bf48      	it	mi
 8005b90:	b2ad      	uxthmi	r5, r5
 8005b92:	6031      	str	r1, [r6, #0]
 8005b94:	07d9      	lsls	r1, r3, #31
 8005b96:	bf44      	itt	mi
 8005b98:	f043 0320 	orrmi.w	r3, r3, #32
 8005b9c:	6023      	strmi	r3, [r4, #0]
 8005b9e:	b11d      	cbz	r5, 8005ba8 <_printf_i+0x1a0>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	e7ab      	b.n	8005afc <_printf_i+0xf4>
 8005ba4:	4826      	ldr	r0, [pc, #152]	@ (8005c40 <_printf_i+0x238>)
 8005ba6:	e7e9      	b.n	8005b7c <_printf_i+0x174>
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	f023 0320 	bic.w	r3, r3, #32
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	e7f6      	b.n	8005ba0 <_printf_i+0x198>
 8005bb2:	4616      	mov	r6, r2
 8005bb4:	e7bd      	b.n	8005b32 <_printf_i+0x12a>
 8005bb6:	6833      	ldr	r3, [r6, #0]
 8005bb8:	6825      	ldr	r5, [r4, #0]
 8005bba:	1d18      	adds	r0, r3, #4
 8005bbc:	6961      	ldr	r1, [r4, #20]
 8005bbe:	6030      	str	r0, [r6, #0]
 8005bc0:	062e      	lsls	r6, r5, #24
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	d501      	bpl.n	8005bca <_printf_i+0x1c2>
 8005bc6:	6019      	str	r1, [r3, #0]
 8005bc8:	e002      	b.n	8005bd0 <_printf_i+0x1c8>
 8005bca:	0668      	lsls	r0, r5, #25
 8005bcc:	d5fb      	bpl.n	8005bc6 <_printf_i+0x1be>
 8005bce:	8019      	strh	r1, [r3, #0]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4616      	mov	r6, r2
 8005bd4:	6123      	str	r3, [r4, #16]
 8005bd6:	e7bc      	b.n	8005b52 <_printf_i+0x14a>
 8005bd8:	6833      	ldr	r3, [r6, #0]
 8005bda:	2100      	movs	r1, #0
 8005bdc:	1d1a      	adds	r2, r3, #4
 8005bde:	6032      	str	r2, [r6, #0]
 8005be0:	681e      	ldr	r6, [r3, #0]
 8005be2:	6862      	ldr	r2, [r4, #4]
 8005be4:	4630      	mov	r0, r6
 8005be6:	f000 f859 	bl	8005c9c <memchr>
 8005bea:	b108      	cbz	r0, 8005bf0 <_printf_i+0x1e8>
 8005bec:	1b80      	subs	r0, r0, r6
 8005bee:	6060      	str	r0, [r4, #4]
 8005bf0:	6863      	ldr	r3, [r4, #4]
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bfa:	e7aa      	b.n	8005b52 <_printf_i+0x14a>
 8005bfc:	4632      	mov	r2, r6
 8005bfe:	4649      	mov	r1, r9
 8005c00:	4640      	mov	r0, r8
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	47d0      	blx	sl
 8005c06:	3001      	adds	r0, #1
 8005c08:	d0ad      	beq.n	8005b66 <_printf_i+0x15e>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	079b      	lsls	r3, r3, #30
 8005c0e:	d413      	bmi.n	8005c38 <_printf_i+0x230>
 8005c10:	68e0      	ldr	r0, [r4, #12]
 8005c12:	9b03      	ldr	r3, [sp, #12]
 8005c14:	4298      	cmp	r0, r3
 8005c16:	bfb8      	it	lt
 8005c18:	4618      	movlt	r0, r3
 8005c1a:	e7a6      	b.n	8005b6a <_printf_i+0x162>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4632      	mov	r2, r6
 8005c20:	4649      	mov	r1, r9
 8005c22:	4640      	mov	r0, r8
 8005c24:	47d0      	blx	sl
 8005c26:	3001      	adds	r0, #1
 8005c28:	d09d      	beq.n	8005b66 <_printf_i+0x15e>
 8005c2a:	3501      	adds	r5, #1
 8005c2c:	68e3      	ldr	r3, [r4, #12]
 8005c2e:	9903      	ldr	r1, [sp, #12]
 8005c30:	1a5b      	subs	r3, r3, r1
 8005c32:	42ab      	cmp	r3, r5
 8005c34:	dcf2      	bgt.n	8005c1c <_printf_i+0x214>
 8005c36:	e7eb      	b.n	8005c10 <_printf_i+0x208>
 8005c38:	2500      	movs	r5, #0
 8005c3a:	f104 0619 	add.w	r6, r4, #25
 8005c3e:	e7f5      	b.n	8005c2c <_printf_i+0x224>
 8005c40:	080066c8 	.word	0x080066c8
 8005c44:	080066d9 	.word	0x080066d9

08005c48 <memmove>:
 8005c48:	4288      	cmp	r0, r1
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	eb01 0402 	add.w	r4, r1, r2
 8005c50:	d902      	bls.n	8005c58 <memmove+0x10>
 8005c52:	4284      	cmp	r4, r0
 8005c54:	4623      	mov	r3, r4
 8005c56:	d807      	bhi.n	8005c68 <memmove+0x20>
 8005c58:	1e43      	subs	r3, r0, #1
 8005c5a:	42a1      	cmp	r1, r4
 8005c5c:	d008      	beq.n	8005c70 <memmove+0x28>
 8005c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c66:	e7f8      	b.n	8005c5a <memmove+0x12>
 8005c68:	4601      	mov	r1, r0
 8005c6a:	4402      	add	r2, r0
 8005c6c:	428a      	cmp	r2, r1
 8005c6e:	d100      	bne.n	8005c72 <memmove+0x2a>
 8005c70:	bd10      	pop	{r4, pc}
 8005c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c7a:	e7f7      	b.n	8005c6c <memmove+0x24>

08005c7c <_sbrk_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4d05      	ldr	r5, [pc, #20]	@ (8005c98 <_sbrk_r+0x1c>)
 8005c82:	4604      	mov	r4, r0
 8005c84:	4608      	mov	r0, r1
 8005c86:	602b      	str	r3, [r5, #0]
 8005c88:	f7fc fbb0 	bl	80023ec <_sbrk>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d102      	bne.n	8005c96 <_sbrk_r+0x1a>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	b103      	cbz	r3, 8005c96 <_sbrk_r+0x1a>
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	20000768 	.word	0x20000768

08005c9c <memchr>:
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	b510      	push	{r4, lr}
 8005ca0:	b2c9      	uxtb	r1, r1
 8005ca2:	4402      	add	r2, r0
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	d101      	bne.n	8005cae <memchr+0x12>
 8005caa:	2000      	movs	r0, #0
 8005cac:	e003      	b.n	8005cb6 <memchr+0x1a>
 8005cae:	7804      	ldrb	r4, [r0, #0]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	428c      	cmp	r4, r1
 8005cb4:	d1f6      	bne.n	8005ca4 <memchr+0x8>
 8005cb6:	bd10      	pop	{r4, pc}

08005cb8 <memcpy>:
 8005cb8:	440a      	add	r2, r1
 8005cba:	4291      	cmp	r1, r2
 8005cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cc0:	d100      	bne.n	8005cc4 <memcpy+0xc>
 8005cc2:	4770      	bx	lr
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cca:	4291      	cmp	r1, r2
 8005ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cd0:	d1f9      	bne.n	8005cc6 <memcpy+0xe>
 8005cd2:	bd10      	pop	{r4, pc}

08005cd4 <_realloc_r>:
 8005cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd8:	4680      	mov	r8, r0
 8005cda:	4615      	mov	r5, r2
 8005cdc:	460c      	mov	r4, r1
 8005cde:	b921      	cbnz	r1, 8005cea <_realloc_r+0x16>
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce6:	f7ff bc39 	b.w	800555c <_malloc_r>
 8005cea:	b92a      	cbnz	r2, 8005cf8 <_realloc_r+0x24>
 8005cec:	f7ff fbcc 	bl	8005488 <_free_r>
 8005cf0:	2400      	movs	r4, #0
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf8:	f000 f81a 	bl	8005d30 <_malloc_usable_size_r>
 8005cfc:	4285      	cmp	r5, r0
 8005cfe:	4606      	mov	r6, r0
 8005d00:	d802      	bhi.n	8005d08 <_realloc_r+0x34>
 8005d02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d06:	d8f4      	bhi.n	8005cf2 <_realloc_r+0x1e>
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	f7ff fc26 	bl	800555c <_malloc_r>
 8005d10:	4607      	mov	r7, r0
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d0ec      	beq.n	8005cf0 <_realloc_r+0x1c>
 8005d16:	42b5      	cmp	r5, r6
 8005d18:	462a      	mov	r2, r5
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	bf28      	it	cs
 8005d1e:	4632      	movcs	r2, r6
 8005d20:	f7ff ffca 	bl	8005cb8 <memcpy>
 8005d24:	4621      	mov	r1, r4
 8005d26:	4640      	mov	r0, r8
 8005d28:	f7ff fbae 	bl	8005488 <_free_r>
 8005d2c:	463c      	mov	r4, r7
 8005d2e:	e7e0      	b.n	8005cf2 <_realloc_r+0x1e>

08005d30 <_malloc_usable_size_r>:
 8005d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d34:	1f18      	subs	r0, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bfbc      	itt	lt
 8005d3a:	580b      	ldrlt	r3, [r1, r0]
 8005d3c:	18c0      	addlt	r0, r0, r3
 8005d3e:	4770      	bx	lr

08005d40 <_init>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	bf00      	nop
 8005d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d46:	bc08      	pop	{r3}
 8005d48:	469e      	mov	lr, r3
 8005d4a:	4770      	bx	lr

08005d4c <_fini>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr
